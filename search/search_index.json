{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\ude80 K8s Tools - Kubernetes Analysis &amp; Reporting Suite","text":"<p>Comprehensive Kubernetes Cluster Analysis and Reporting Tools for DevOps Engineers, SREs, and Platform Teams</p> <p> </p>"},{"location":"#overview","title":"Overview","text":"<p>K8s Tools is a powerful suite designed to provide deep insights into Kubernetes cluster operations through automated analysis and interactive reporting. The toolkit consists of two main components that work together to deliver comprehensive cluster intelligence.</p> <p>Latest Release: v0.7.9 - Now with enhanced label-based analysis and application discovery features!</p>"},{"location":"#key-components","title":"\ud83c\udfaf Key Components","text":"<ul> <li>k8s-analyzer - CLI tool for extracting and analyzing cluster data</li> <li>k8s-reporter - Interactive web dashboard for visualization and insights</li> </ul>"},{"location":"#key-benefits","title":"\u2b50 Key Benefits","text":"<ul> <li>\ud83d\udd0d Deep Cluster Insights - Comprehensive resource relationship mapping</li> <li>\ud83d\udcc8 Temporal Analysis - Track resource lifecycle and creation patterns  </li> <li>\u26a1 Resource Efficiency - Identify optimization opportunities</li> <li>\ud83d\udcbe Storage Analytics - Monitor storage consumption and capacity</li> <li>\ud83c\udf10 Interactive Dashboard - User-friendly Streamlit web interface</li> <li>\ud83d\udcca Multiple Export Formats - SQLite, CSV, and JSON outputs</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.9+</li> <li>kubectl configured for your cluster</li> <li>UV package manager (recommended)</li> </ul>"},{"location":"#1-installation","title":"1\ufe0f\u20e3 Installation","text":"<pre><code># Install both tools using UV\nuv tool install ./k8s-analyzer\nuv tool install ./k8s-reporter\n\n# Verify installation\nk8s-analyzer --help\nk8s-reporter --help\n</code></pre>"},{"location":"#2-analyze-your-cluster","title":"2\ufe0f\u20e3 Analyze Your Cluster","text":"<pre><code># Export cluster data to SQLite\nk8s-analyzer sqlite --output cluster-analysis.db\n\n# Or export to CSV\nk8s-analyzer csv --output-dir ./reports\n</code></pre>"},{"location":"#3-launch-interactive-dashboard","title":"3\ufe0f\u20e3 Launch Interactive Dashboard","text":"<pre><code># Launch web interface\nk8s-reporter --database cluster-analysis.db\n\n# Access at http://localhost:8501\n</code></pre>"},{"location":"#architecture-overview","title":"Architecture Overview","text":"<pre><code>graph TB\n    K8S[Kubernetes Cluster] --&gt;|kubectl export| ANALYZER[k8s-analyzer]\n    ANALYZER --&gt;|SQLite DB| REPORTER[k8s-reporter]\n    ANALYZER --&gt;|CSV Export| CSV[CSV Files]\n    ANALYZER --&gt;|JSON Export| JSON[JSON Files]\n    REPORTER --&gt;|Streamlit| WEB[Web Dashboard]\n    WEB --&gt;|Analysis| INSIGHTS[\ud83d\udcca Cluster Insights]\n\n    subgraph \"Analysis Views\"\n        INSIGHTS --&gt; OVERVIEW[\ud83d\udcca Overview]\n        INSIGHTS --&gt; SECURITY[\ud83d\udd12 Security] \n        INSIGHTS --&gt; EFFICIENCY[\u26a1 Efficiency]\n        INSIGHTS --&gt; STORAGE[\ud83d\udcbe Storage]\n        INSIGHTS --&gt; TEMPORAL[\u23f0 Temporal]\n        INSIGHTS --&gt; NAMESPACE[\ud83c\udfe0 Namespaces]\n    end</code></pre>"},{"location":"#use-cases","title":"Use Cases","text":""},{"location":"#operations-sre","title":"\ud83d\udd27 Operations &amp; SRE","text":"<ul> <li>Cluster Health Monitoring - Continuous resource health assessment</li> <li>Capacity Planning - Storage and resource utilization analysis</li> <li>Incident Response - Quick identification of problematic resources</li> <li>Change Impact Assessment - Before/after cluster state comparison</li> </ul>"},{"location":"#security-compliance","title":"\ud83d\udee1\ufe0f Security &amp; Compliance","text":"<ul> <li>RBAC Analysis - Service account and permission auditing</li> <li>Security Posture - Identify pods without security contexts</li> <li>Compliance Reporting - Generate security and compliance reports</li> <li>Vulnerability Assessment - Track containers without resource limits</li> </ul>"},{"location":"#devops-platform-engineering","title":"\ud83d\ude80 DevOps &amp; Platform Engineering","text":"<ul> <li>Resource Optimization - Identify over/under-provisioned resources</li> <li>Cost Management - Storage and compute efficiency analysis</li> <li>Deployment Validation - Ensure proper resource configurations</li> <li>Multi-cluster Management - Consistent analysis across environments</li> </ul>"},{"location":"#whats-next","title":"What's Next?","text":"<ul> <li>\ud83d\udcd6 Get Started - Detailed installation and setup guide</li> <li>\ud83d\udd27 k8s-analyzer Guide - Learn about the analysis engine</li> <li>\ud83c\udfa8 k8s-reporter Guide - Explore the web dashboard</li> <li>\ud83d\udcca Analysis Views - Understanding the different dashboards</li> <li>\ud83d\udcbb Development - Contributing and development setup</li> </ul>"},{"location":"#community-support","title":"Community &amp; Support","text":"<ul> <li>\ud83d\udc1b Report Issues</li> <li>\ud83d\udcac Discussions</li> <li>\ud83d\udcd6 Changelog</li> <li>\ud83d\udcc4 License</li> </ul>   **Made with \u2764\ufe0f for the Kubernetes community**  [\u2b50 Star us on GitHub](https://github.com/k8s-tools/k8s-tools) \u2022 [\ud83d\udcd6 Documentation](.) \u2022 [\ud83d\udcac Get Support](https://github.com/k8s-tools/k8s-tools/issues)"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"CHANGELOG/#079-2025-06-26","title":"[0.7.9] - 2025-06-26","text":""},{"location":"CHANGELOG/#added","title":"\u2728 Added","text":"<p>Label-based Analysis Features - New Label Analysis View: Comprehensive analysis of resource labeling patterns with coverage metrics and quality scoring - Enhanced Application View: Detailed label-based resource grouping and application identification using standard Kubernetes labels - Orphaned Resource Detection: Identify resources without proper application labels with actionable recommendations - Multi-label Analysis: Statistical insights into label usage patterns and resource relationships - Interactive Label Filtering: Search and filter resources by specific labels and applications</p> <p>Export and Reporting - Application Report Export: Download comprehensive application analysis data in JSON format - Label Governance Reports: Export labeling recommendations and coverage analysis - Enhanced UI Elements: Tabbed interfaces, interactive charts, and improved user experience</p>"},{"location":"CHANGELOG/#fixed","title":"\ud83d\udc1b Fixed","text":"<ul> <li>Plotly Rendering Issue: Fixed <code>AttributeError: 'Figure' object has no attribute 'update_xaxis'</code> by correcting method name to <code>update_xaxes</code></li> <li>Chart Display: Resolved visualization errors in Application View charts</li> </ul>"},{"location":"CHANGELOG/#technical-improvements","title":"\ud83d\udd27 Technical Improvements","text":"<ul> <li>New Data Models: Added <code>LabelAnalysis</code> and <code>ApplicationViewpoint</code> models for structured label analysis</li> <li>Database Extensions: Added 15+ new label-specific query methods to the database client</li> <li>Comprehensive Testing: Added 276 lines of test coverage for new label-based features</li> <li>Enhanced UI Components: Improved chart visualizations and interactive elements</li> </ul>"},{"location":"CHANGELOG/#documentation","title":"\ud83d\udcda Documentation","text":"<ul> <li>Enhanced README: Updated with comprehensive information about new label-based features</li> <li>Usage Examples: Added detailed examples for label analysis and application governance workflows</li> <li>Best Practices: Included Kubernetes labeling recommendations and governance guidelines</li> </ul>"},{"location":"CHANGELOG/#110-2025-06-25","title":"[1.1.0] - 2025-06-25","text":""},{"location":"CHANGELOG/#added_1","title":"\u2728 Added","text":"<p>Comprehensive Documentation Suite - MkDocs Integration: Complete documentation website with Mermaid diagram support - Analysis Views Documentation: Detailed guides for all dashboard views - CLI Reference: Complete command-line interface documentation - Data Models: Entity-relationship diagrams and data model documentation - Configuration Guides: Comprehensive setup and configuration instructions - Examples and Tutorials: Real-world usage examples and step-by-step guides - Troubleshooting Guide: Common issues and solutions - FAQ Section: Frequently asked questions and answers - Database Schema Reference: Complete SQLite schema documentation</p> <p>Development Resources - Setup Guide: Development environment configuration - Contributing Guidelines: Code standards and contribution process - API Reference: Detailed API documentation</p>"},{"location":"CHANGELOG/#technical-improvements_1","title":"\ud83d\udd27 Technical Improvements","text":"<ul> <li>Mermaid Diagrams: Interactive diagrams for architecture and data models</li> <li>Searchable Documentation: Full-text search across all documentation</li> <li>Mobile-Friendly: Responsive documentation design</li> </ul>"},{"location":"CHANGELOG/#073-2025-06-24","title":"[0.7.3] - 2025-06-24","text":""},{"location":"CHANGELOG/#added_2","title":"\u2728 Added","text":"<ul> <li>Enhanced Analysis Views: Improved dashboard visualizations and user interface</li> <li>Performance Optimizations: Faster data loading and chart rendering</li> <li>Bug Fixes: Various stability improvements and error handling</li> </ul>"},{"location":"CHANGELOG/#improvements","title":"\ud83d\udd27 Improvements","text":"<ul> <li>Database Query Optimization: More efficient SQLite queries for large datasets</li> <li>Memory Usage: Reduced memory footprint for better performance</li> <li>Error Handling: Improved error messages and graceful failure handling</li> </ul>"},{"location":"CHANGELOG/#040-2025-06-20","title":"[0.4.0] - 2025-06-20","text":""},{"location":"CHANGELOG/#added_3","title":"\u2728 Added","text":"<ul> <li>Storage Analysis View: Comprehensive storage consumption and volume analysis</li> <li>Temporal Analysis: Resource lifecycle tracking and age-based categorization</li> <li>Resource Efficiency: Pod resource optimization analysis and recommendations</li> <li>Relationship Mapping: Advanced resource dependency visualization</li> </ul>"},{"location":"CHANGELOG/#improvements_1","title":"\ud83d\udd27 Improvements","text":"<ul> <li>Enhanced Visualizations: Improved charts and interactive elements</li> <li>Export Capabilities: Multiple export formats for analysis data</li> <li>Performance: Optimized for larger clusters and datasets</li> </ul>"},{"location":"CHANGELOG/#010-2025-06-15","title":"[0.1.0] - 2025-06-15","text":""},{"location":"CHANGELOG/#added_4","title":"\u2728 Added","text":"<ul> <li>Initial Release: Basic k8s-reporter functionality</li> <li>Core Analysis Views: Overview, Security, Namespace, and Health dashboards</li> <li>SQLite Integration: Database support for k8s-analyzer data</li> <li>Web Interface: Streamlit-based interactive dashboard</li> <li>Basic Filtering: Namespace and resource type filtering</li> </ul>"},{"location":"CHANGELOG/#infrastructure","title":"\ud83c\udfd7\ufe0f Infrastructure","text":"<ul> <li>Project Structure: Initial codebase and architecture</li> <li>Dependencies: Core library requirements and setup</li> <li>CLI Interface: Basic command-line interface for launching the dashboard</li> </ul>"},{"location":"CHANGELOG/#upcoming-features","title":"Upcoming Features","text":""},{"location":"CHANGELOG/#in-development","title":"\ud83d\ude80 In Development","text":"<ul> <li>Environment View: Environment-based resource grouping and analysis</li> <li>Team Ownership: Team-based resource ownership and governance</li> <li>Cost Optimization: Resource cost analysis and optimization recommendations</li> <li>Real-time Monitoring: Live cluster connection and real-time updates</li> <li>Multi-cluster Support: Compare and analyze multiple clusters</li> </ul>"},{"location":"CHANGELOG/#planned-features","title":"\ud83c\udfaf Planned Features","text":"<ul> <li>Custom Dashboards: User-defined dashboard creation and customization</li> <li>Advanced Analytics: Machine learning insights and predictive analysis</li> <li>Integration APIs: REST API for external tool integration</li> <li>Alert System: Configurable alerts for resource issues and thresholds</li> <li>PDF Reports: Automated report generation and distribution</li> </ul> <p>For more details about specific changes, see the GitHub Releases page.</p>"},{"location":"getting-started/","title":"\ud83d\ude80 Getting Started with K8s Tools","text":"<p>This guide will walk you through installing and using K8s Tools to analyze your Kubernetes clusters.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have:</p> <ul> <li>Python 3.9+ installed on your system</li> <li>kubectl configured for your Kubernetes cluster</li> <li>UV package manager (recommended) or pip</li> <li>Git for cloning the repository</li> </ul>"},{"location":"getting-started/#installing-uv-package-manager","title":"Installing UV Package Manager","text":"<p>UV is the recommended package manager for fast and reliable Python environment management:</p> <pre><code># Install UV (macOS/Linux)\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# Or using Homebrew (macOS)\nbrew install uv\n\n# Or using pip\npip install uv\n</code></pre>"},{"location":"getting-started/#installation-methods","title":"Installation Methods","text":""},{"location":"getting-started/#option-1-uv-tool-installation-recommended","title":"Option 1: UV Tool Installation (Recommended)","text":"<p>This is the fastest way to get started:</p> <pre><code># Clone the repository\ngit clone https://github.com/k8s-tools/k8s-tools.git\ncd k8s-tools\n\n# Install both tools globally\nuv tool install ./k8s-analyzer\nuv tool install ./k8s-reporter\n\n# Verify installation\nk8s-analyzer --version\nk8s-reporter --version\n</code></pre>"},{"location":"getting-started/#option-2-development-installation","title":"Option 2: Development Installation","text":"<p>For development or customization:</p> <pre><code># Clone the repository\ngit clone https://github.com/k8s-tools/k8s-tools.git\ncd k8s-tools\n\n# Install k8s-analyzer\ncd k8s-analyzer\nuv sync\nuv run k8s-analyzer --help\n\n# Install k8s-reporter\ncd ../k8s-reporter\nuv sync\nuv run streamlit run src/k8s_reporter/app.py\n</code></pre>"},{"location":"getting-started/#option-3-traditional-pip-installation","title":"Option 3: Traditional pip Installation","text":"<pre><code># Install from source\ngit clone https://github.com/k8s-tools/k8s-tools.git\ncd k8s-tools\n\n# Install k8s-analyzer\ncd k8s-analyzer\npip install -e .\n\n# Install k8s-reporter\ncd ../k8s-reporter\npip install -e .\n</code></pre>"},{"location":"getting-started/#first-analysis","title":"First Analysis","text":""},{"location":"getting-started/#step-1-export-cluster-data","title":"Step 1: Export Cluster Data","text":"<p>First, export your Kubernetes cluster data using kubectl:</p> <pre><code># Export all cluster resources to JSON\nkubectl get all,nodes,pv,pvc,configmaps,secrets,serviceaccounts,rolebindings,ingress \\\n  -o json &gt; cluster-export.json\n\n# Or export to YAML\nkubectl get all,nodes,pv,pvc,configmaps,secrets,serviceaccounts,rolebindings,ingress \\\n  -o yaml &gt; cluster-export.yaml\n</code></pre>"},{"location":"getting-started/#step-2-analyze-with-k8s-analyzer","title":"Step 2: Analyze with k8s-analyzer","text":"<pre><code># Basic analysis and export to SQLite\nk8s-analyzer sqlite cluster-export.json --output cluster-analysis.db\n\n# Or analyze and export to CSV\nk8s-analyzer csv cluster-export.json --output-dir ./reports\n\n# Generate comprehensive HTML report\nk8s-analyzer report cluster-export.json --output cluster-report.html\n</code></pre>"},{"location":"getting-started/#step-3-launch-the-web-dashboard","title":"Step 3: Launch the Web Dashboard","text":"<pre><code># Launch the interactive web interface\nk8s-reporter --database cluster-analysis.db\n\n# Open http://localhost:8501 in your browser\n</code></pre>"},{"location":"getting-started/#understanding-the-output","title":"Understanding the Output","text":""},{"location":"getting-started/#sqlite-database","title":"SQLite Database","text":"<p>The SQLite database contains structured data about your cluster:</p> <ul> <li>resources table: All Kubernetes resources with metadata</li> <li>relationships table: Resource dependencies and connections</li> <li>analysis_summary table: High-level cluster statistics</li> </ul>"},{"location":"getting-started/#dashboard-views","title":"Dashboard Views","text":"<p>The web interface provides several analysis views:</p> <ol> <li>\ud83d\udcca Cluster Overview - Health metrics and resource distribution</li> <li>\ud83d\udd12 Security Analysis - RBAC and security posture insights</li> <li>\ud83c\udff7\ufe0f Namespace Analysis - Per-namespace breakdowns</li> <li>\u2764\ufe0f Health Dashboard - Resource health monitoring</li> <li>\ud83d\udd17 Relationship Analysis - Resource dependencies</li> <li>\u26a1 Resource Efficiency - Optimization opportunities</li> <li>\ud83d\udcbe Storage Analysis - Storage consumption tracking</li> <li>\u23f0 Temporal Analysis - Resource lifecycle patterns</li> </ol>"},{"location":"getting-started/#common-use-cases","title":"Common Use Cases","text":""},{"location":"getting-started/#health-monitoring","title":"Health Monitoring","text":"<pre><code># Quick cluster health check\nk8s-analyzer analyze cluster-export.json\n\n# Generate health report\nk8s-analyzer validate cluster-export.json\n</code></pre>"},{"location":"getting-started/#multi-cluster-analysis","title":"Multi-cluster Analysis","text":"<pre><code># Analyze multiple clusters\nk8s-analyzer sqlite cluster1.json cluster2.json --output multi-cluster.db\n\n# Compare clusters in the dashboard\nk8s-reporter --database multi-cluster.db\n</code></pre>"},{"location":"getting-started/#continuous-monitoring","title":"Continuous Monitoring","text":"<pre><code>#!/bin/bash\n# daily-analysis.sh - Automated daily cluster analysis\n\nDATE=$(date +%Y-%m-%d)\nkubectl get all,nodes,pv,pvc,configmaps,secrets,serviceaccounts,rolebindings,ingress \\\n  -o json &gt; \"cluster-export-${DATE}.json\"\n\nk8s-analyzer sqlite \"cluster-export-${DATE}.json\" \\\n  --output \"cluster-analysis-${DATE}.db\"\n\necho \"Analysis complete: cluster-analysis-${DATE}.db\"\n</code></pre>"},{"location":"getting-started/#configuration","title":"Configuration","text":""},{"location":"getting-started/#environment-variables","title":"Environment Variables","text":"<pre><code># k8s-analyzer configuration\nexport K8S_ANALYZER_OUTPUT_DIR=\"./analysis\"\nexport K8S_ANALYZER_LOG_LEVEL=\"INFO\"\n\n# k8s-reporter configuration\nexport K8S_REPORTER_HOST=\"0.0.0.0\"\nexport K8S_REPORTER_PORT=\"8501\"\nexport K8S_REPORTER_DATABASE=\"./cluster.db\"\n</code></pre>"},{"location":"getting-started/#custom-analysis","title":"Custom Analysis","text":"<pre><code># Filter by namespace\nk8s-analyzer sqlite cluster-export.json \\\n  --namespace production \\\n  --output production-analysis.db\n\n# Filter by resource types\nk8s-analyzer csv cluster-export.json \\\n  --include-kinds Pod,Service,Deployment \\\n  --output-dir filtered-reports\n\n# Exclude system namespaces\nk8s-analyzer sqlite cluster-export.json \\\n  --exclude-namespaces kube-system,kube-public \\\n  --output user-analysis.db\n</code></pre>"},{"location":"getting-started/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/#common-issues","title":"Common Issues","text":""},{"location":"getting-started/#1-kubectl-export-errors","title":"1. kubectl Export Errors","text":"<pre><code># Check cluster connectivity\nkubectl cluster-info\n\n# Verify permissions\nkubectl auth can-i get pods --all-namespaces\n</code></pre>"},{"location":"getting-started/#2-large-cluster-performance","title":"2. Large Cluster Performance","text":"<pre><code># Use batch processing for large clusters\nk8s-analyzer sqlite cluster-export.json \\\n  --batch-size 100 \\\n  --output large-cluster.db\n</code></pre>"},{"location":"getting-started/#3-memory-issues","title":"3. Memory Issues","text":"<pre><code># Process files individually for very large clusters\nk8s-analyzer sqlite pods.json --output pods.db\nk8s-analyzer sqlite services.json --output services.db\n# Then merge databases if needed\n</code></pre>"},{"location":"getting-started/#4-web-interface-issues","title":"4. Web Interface Issues","text":"<pre><code># Check if port is available\nnetstat -an | grep 8501\n\n# Use different port\nk8s-reporter --database cluster.db --port 8080\n\n# Enable debug mode\nk8s-reporter --database cluster.db --debug\n</code></pre>"},{"location":"getting-started/#getting-help","title":"Getting Help","text":"<pre><code># View available commands\nk8s-analyzer --help\nk8s-reporter --help\n\n# Get specific command help\nk8s-analyzer sqlite --help\nk8s-analyzer analyze --help\n</code></pre>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<p>Now that you have K8s Tools installed and running:</p> <ol> <li>Explore k8s-analyzer - Learn about advanced analysis features</li> <li>Master k8s-reporter - Discover all dashboard capabilities</li> <li>Understand Analysis Views - Deep dive into each analysis type</li> <li>Set up Development - Contribute to the project</li> </ol>"},{"location":"getting-started/#performance-tips","title":"Performance Tips","text":""},{"location":"getting-started/#for-large-clusters","title":"For Large Clusters","text":"<ul> <li>Use batch processing with <code>--batch-size</code> parameter</li> <li>Export specific namespaces separately</li> <li>Consider using multiple smaller exports instead of one large file</li> </ul>"},{"location":"getting-started/#for-regular-monitoring","title":"For Regular Monitoring","text":"<ul> <li>Set up automated daily/weekly exports</li> <li>Use filesystem monitoring to trigger analysis on changes</li> <li>Implement retention policies for historical data</li> </ul>"},{"location":"getting-started/#for-cicd-integration","title":"For CI/CD Integration","text":"<pre><code># Example GitHub Actions workflow\nname: Cluster Analysis\non:\n  schedule:\n    - cron: '0 6 * * *'  # Daily at 6 AM\n\njobs:\n  analyze:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Setup Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.11'\n      - name: Install UV\n        run: curl -LsSf https://astral.sh/uv/install.sh | sh\n      - name: Install K8s Tools\n        run: |\n          uv tool install ./k8s-analyzer\n          uv tool install ./k8s-reporter\n      - name: Analyze Cluster\n        run: |\n          kubectl get all -o json &gt; cluster.json\n          k8s-analyzer sqlite cluster.json --output analysis.db\n      - name: Upload Results\n        uses: actions/upload-artifact@v3\n        with:\n          name: cluster-analysis\n          path: analysis.db\n</code></pre>"},{"location":"getting-started/#support","title":"Support","text":"<p>If you encounter issues:</p> <ol> <li>Check the troubleshooting section</li> <li>Search existing issues</li> <li>Create a new issue with:</li> <li>Your environment details</li> <li>Steps to reproduce</li> <li>Error messages</li> <li>Sample data (anonymized)</li> </ol>"},{"location":"analysis-views/cluster-overview/","title":"Cluster Overview","text":"<p>The Cluster Overview provides a comprehensive high-level view of your Kubernetes cluster's health, resource utilization, and key metrics.</p>"},{"location":"analysis-views/cluster-overview/#overview","title":"Overview","text":"<p>This analysis view presents:</p> <ul> <li>Cluster Summary: Basic information about nodes, namespaces, and workloads</li> <li>Resource Utilization: CPU, memory, and storage usage across the cluster</li> <li>Node Status: Health and capacity of cluster nodes</li> <li>Workload Distribution: How applications are distributed across nodes</li> <li>Recent Events: Important cluster events and alerts</li> </ul>"},{"location":"analysis-views/cluster-overview/#key-metrics","title":"Key Metrics","text":""},{"location":"analysis-views/cluster-overview/#node-information","title":"Node Information","text":"<ul> <li>Total nodes and their status (Ready, NotReady, Unknown)</li> <li>Node capacity and allocatable resources</li> <li>Node labels and taints</li> </ul>"},{"location":"analysis-views/cluster-overview/#resource-usage","title":"Resource Usage","text":"<ul> <li>CPU and memory utilization percentages</li> <li>Storage consumption and available capacity</li> <li>Network traffic and pod-to-pod communication</li> </ul>"},{"location":"analysis-views/cluster-overview/#workload-summary","title":"Workload Summary","text":"<ul> <li>Total pods, deployments, services, and other resources</li> <li>Pod distribution across namespaces</li> <li>Resource requests vs. limits</li> </ul>"},{"location":"analysis-views/cluster-overview/#using-the-cluster-overview","title":"Using the Cluster Overview","text":"<pre><code>k8s-analyzer analyze --view cluster-overview\n</code></pre>"},{"location":"analysis-views/cluster-overview/#interpreting-results","title":"Interpreting Results","text":"<p>The cluster overview helps you quickly identify:</p> <ul> <li>Resource bottlenecks</li> <li>Unhealthy nodes</li> <li>Overcommitted resources</li> <li>Uneven workload distribution</li> </ul>"},{"location":"analysis-views/cluster-overview/#related-views","title":"Related Views","text":"<ul> <li>Resource Efficiency</li> <li>Health Dashboard</li> <li>Namespace Analysis</li> </ul>"},{"location":"analysis-views/health-dashboard/","title":"Health Dashboard","text":"<p>The Health Dashboard provides an at-a-glance view of the overall health of your Kubernetes cluster, with indicators for node health, workload status, and other key metrics.</p>"},{"location":"analysis-views/health-dashboard/#overview","title":"Overview","text":"<p>The Health Dashboard includes:</p> <ul> <li>Node Health: Status of nodes in the cluster</li> <li>Workload Health: Deployment and service health checks</li> <li>Resource Availability: Current utilization of CPU, memory, and storage</li> <li>Alerting Dashboard: Active alerts and notifications</li> </ul>"},{"location":"analysis-views/health-dashboard/#key-health-metrics","title":"Key Health Metrics","text":""},{"location":"analysis-views/health-dashboard/#node-health-indicators","title":"Node Health Indicators","text":"<ul> <li>Node Status: Ready, NotReady, Unknown</li> <li>Capacity and Allocatable Resources: CPU and memory</li> <li>Node Conditions: MemoryPressure, DiskPressure, etc.</li> </ul>"},{"location":"analysis-views/health-dashboard/#workload-health-indicators","title":"Workload Health Indicators","text":"<ul> <li>Deployment Status: Pod status and availability</li> <li>Failed Pods: Recent failures and restarts</li> <li>Service Reachability: Network and service checks</li> </ul>"},{"location":"analysis-views/health-dashboard/#alerting-and-notifications","title":"Alerting and Notifications","text":"<ul> <li>Current Alerts: Active cluster-wide alerts</li> <li>History of Alerts: Past alerts and resolutions</li> <li>Critical Notifications: Node and workload alerts</li> </ul>"},{"location":"analysis-views/health-dashboard/#usage","title":"Usage","text":"<p>To view the health dashboard, use:</p> <pre><code>k8s-analyzer dashboard --view health\n</code></pre>"},{"location":"analysis-views/health-dashboard/#integration","title":"Integration","text":""},{"location":"analysis-views/health-dashboard/#monitoring-tools","title":"Monitoring Tools","text":"<ul> <li>Prometheus for gathering health metrics</li> <li>Grafana for visual representation</li> <li>Alertmanager for alerting</li> </ul>"},{"location":"analysis-views/health-dashboard/#maintenance-recommendations","title":"Maintenance Recommendations","text":"<ol> <li>Regular Monitoring: Always keep an eye on the dashboard for real-time indicators.</li> <li>Alert Response: Address alerts promptly to mitigate issues.</li> <li>Capacity Planning: Use health metrics for long-term planning.</li> </ol>"},{"location":"analysis-views/health-dashboard/#related-views","title":"Related Views","text":"<ul> <li>Resource Efficiency</li> <li>Security Analysis</li> <li>Cluster Overview</li> </ul>"},{"location":"analysis-views/namespace-analysis/","title":"Namespace Analysis","text":"<p>The Namespace Analysis view provides detailed insights into individual namespaces within your Kubernetes cluster, helping you understand resource usage, security, and organization at the namespace level.</p>"},{"location":"analysis-views/namespace-analysis/#overview","title":"Overview","text":"<p>This analysis examines:</p> <ul> <li>Resource Utilization: Per-namespace resource consumption</li> <li>Workload Distribution: Applications and services within each namespace</li> <li>Security Posture: Namespace-specific security configurations</li> <li>Cost Allocation: Resource costs attributed to each namespace</li> <li>Compliance Status: Policy adherence per namespace</li> </ul>"},{"location":"analysis-views/namespace-analysis/#key-metrics","title":"Key Metrics","text":""},{"location":"analysis-views/namespace-analysis/#resource-usage-by-namespace","title":"Resource Usage by Namespace","text":"<ul> <li>CPU and memory consumption</li> <li>Storage utilization</li> <li>Network traffic</li> <li>Pod counts and density</li> </ul>"},{"location":"analysis-views/namespace-analysis/#workload-analysis","title":"Workload Analysis","text":"<ul> <li>Deployment types and versions</li> <li>Service exposure patterns</li> <li>ConfigMap and Secret usage</li> <li>Persistent volume claims</li> </ul>"},{"location":"analysis-views/namespace-analysis/#security-assessment","title":"Security Assessment","text":"<ul> <li>RBAC configurations</li> <li>Network policies</li> <li>Pod security standards</li> <li>Service account usage</li> </ul>"},{"location":"analysis-views/namespace-analysis/#namespace-comparison","title":"Namespace Comparison","text":""},{"location":"analysis-views/namespace-analysis/#resource-efficiency-comparison","title":"Resource Efficiency Comparison","text":"<pre><code># Compare resource efficiency across namespaces\nk8s-analyzer analyze --view namespace-analysis --compare-efficiency\n\n# Example output format:\nNamespace     CPU Usage    Memory Usage    Storage    Efficiency Score\nproduction    75%          68%             85%        B+\nstaging       45%          52%             60%        C+\ndevelopment   25%          30%             40%        A-\n</code></pre>"},{"location":"analysis-views/namespace-analysis/#cost-analysis","title":"Cost Analysis","text":"<ul> <li>Per-namespace cost breakdown</li> <li>Resource cost trends</li> <li>Cost optimization opportunities</li> <li>Budget allocation recommendations</li> </ul>"},{"location":"analysis-views/namespace-analysis/#multi-tenant-analysis","title":"Multi-Tenant Analysis","text":""},{"location":"analysis-views/namespace-analysis/#tenant-isolation","title":"Tenant Isolation","text":"<ul> <li>Resource quotas and limits</li> <li>Network segmentation</li> <li>RBAC isolation effectiveness</li> <li>Storage isolation</li> </ul>"},{"location":"analysis-views/namespace-analysis/#fair-share-analysis","title":"Fair Share Analysis","text":"<ul> <li>Resource allocation fairness</li> <li>Usage versus allocation ratios</li> <li>Over/under-utilized namespaces</li> <li>Capacity planning per tenant</li> </ul>"},{"location":"analysis-views/namespace-analysis/#usage-examples","title":"Usage Examples","text":"<pre><code># Analyze all namespaces\nk8s-analyzer analyze --view namespace-analysis\n\n# Focus on specific namespace\nk8s-analyzer analyze --view namespace-analysis --namespace production\n\n# Compare multiple namespaces\nk8s-analyzer analyze --view namespace-analysis --namespaces prod,staging,dev\n\n# Generate namespace report\nk8s-analyzer report --template namespace-summary --namespace production\n</code></pre>"},{"location":"analysis-views/namespace-analysis/#namespace-optimization","title":"Namespace Optimization","text":""},{"location":"analysis-views/namespace-analysis/#right-sizing-recommendations","title":"Right-sizing Recommendations","text":"<ul> <li>Resource quota adjustments</li> <li>Limit range optimizations</li> <li>Pod density improvements</li> <li>Storage allocation tuning</li> </ul>"},{"location":"analysis-views/namespace-analysis/#security-enhancements","title":"Security Enhancements","text":"<ul> <li>RBAC tightening suggestions</li> <li>Network policy recommendations</li> <li>Security context improvements</li> <li>Secret management optimizations</li> </ul>"},{"location":"analysis-views/namespace-analysis/#monitoring-and-alerting","title":"Monitoring and Alerting","text":""},{"location":"analysis-views/namespace-analysis/#key-performance-indicators","title":"Key Performance Indicators","text":"<ul> <li>Resource utilization thresholds</li> <li>Pod failure rates</li> <li>Service availability metrics</li> <li>Security violation counts</li> </ul>"},{"location":"analysis-views/namespace-analysis/#automated-policies","title":"Automated Policies","text":"<pre><code># Example namespace policy\napiVersion: v1\nkind: ResourceQuota\nmetadata:\n  name: production-quota\n  namespace: production\nspec:\n  hard:\n    requests.cpu: \"20\"\n    requests.memory: 40Gi\n    limits.cpu: \"40\"\n    limits.memory: 80Gi\n    persistentvolumeclaims: \"10\"\n</code></pre>"},{"location":"analysis-views/namespace-analysis/#governance-and-compliance","title":"Governance and Compliance","text":""},{"location":"analysis-views/namespace-analysis/#policy-enforcement","title":"Policy Enforcement","text":"<ul> <li>Resource governance policies</li> <li>Security compliance checks</li> <li>Naming convention adherence</li> <li>Label and annotation standards</li> </ul>"},{"location":"analysis-views/namespace-analysis/#audit-trail","title":"Audit Trail","text":"<ul> <li>Namespace modification history</li> <li>Resource creation/deletion events</li> <li>Security event correlation</li> <li>Compliance status tracking</li> </ul>"},{"location":"analysis-views/namespace-analysis/#integration-points","title":"Integration Points","text":""},{"location":"analysis-views/namespace-analysis/#cost-management","title":"Cost Management","text":"<ul> <li>Chargeback and showback reporting</li> <li>Budget tracking and alerts</li> <li>Cost center allocation</li> <li>Resource utilization billing</li> </ul>"},{"location":"analysis-views/namespace-analysis/#cicd-integration","title":"CI/CD Integration","text":"<ul> <li>Namespace provisioning automation</li> <li>Resource quota management</li> <li>Security policy deployment</li> <li>Compliance validation</li> </ul>"},{"location":"analysis-views/namespace-analysis/#troubleshooting","title":"Troubleshooting","text":""},{"location":"analysis-views/namespace-analysis/#common-issues","title":"Common Issues","text":"<ul> <li>Resource exhaustion symptoms</li> <li>Network connectivity problems</li> <li>Security policy conflicts</li> <li>Storage mounting issues</li> </ul>"},{"location":"analysis-views/namespace-analysis/#diagnostic-commands","title":"Diagnostic Commands","text":"<pre><code># Namespace health check\nk8s-analyzer diagnose --namespace production\n\n# Resource bottleneck analysis\nk8s-analyzer analyze --view namespace-analysis --bottlenecks\n\n# Security audit\nk8s-analyzer security-scan --namespace production\n</code></pre>"},{"location":"analysis-views/namespace-analysis/#related-views","title":"Related Views","text":"<ul> <li>Cluster Overview</li> <li>Security Analysis</li> <li>Resource Efficiency</li> <li>Health Dashboard</li> </ul>"},{"location":"analysis-views/overview/","title":"\ud83d\udcca Analysis Views Overview","text":"<p>K8s-reporter provides multiple specialized analysis views, each designed to provide insights into different aspects of your Kubernetes cluster. This guide explains each view and how to use them effectively.</p>"},{"location":"analysis-views/overview/#available-views","title":"Available Views","text":""},{"location":"analysis-views/overview/#cluster-overview","title":"\ud83d\udcca Cluster Overview","text":"<p>Purpose: High-level cluster health and resource distribution</p> <p>Key Metrics: - Total resources and namespaces - Health ratio percentage - Resource type distribution - Top namespaces by resource count - Issues summary</p> <p>Use Cases: - Daily cluster health checks - Executive dashboards - Initial cluster assessment - Resource planning</p> <p>Key Features: - Resource distribution pie charts - Health metrics with visual indicators - Top namespaces ranking - Quick issue identification</p>"},{"location":"analysis-views/overview/#security-analysis","title":"\ud83d\udd12 Security Analysis","text":"<p>Purpose: Security posture assessment and RBAC analysis</p> <p>Key Metrics: - Service account usage patterns - Pod security context evaluation - Privileged container detection - RBAC permissions analysis - ConfigMaps and Secrets overview</p> <p>Use Cases: - Security audits - Compliance reporting - Vulnerability assessment - RBAC optimization</p> <p>Key Features: - Security recommendations - Privileged pod identification - Service account analysis - Configuration security assessment</p>"},{"location":"analysis-views/overview/#namespace-analysis","title":"\ud83c\udff7\ufe0f Namespace Analysis","text":"<p>Purpose: Detailed per-namespace resource breakdown</p> <p>Key Metrics: - Resource count per namespace - Health distribution by namespace - Resource types within namespaces - Namespace-specific issues</p> <p>Use Cases: - Multi-tenant cluster management - Team-based resource allocation - Namespace-level troubleshooting - Resource quota planning</p> <p>Key Features: - Interactive namespace selection - Per-namespace health metrics - Resource type distribution - Cross-namespace comparison</p>"},{"location":"analysis-views/overview/#health-dashboard","title":"\u2764\ufe0f Health Dashboard","text":"<p>Purpose: Resource health monitoring and issue tracking</p> <p>Key Metrics: - Health status distribution - Resources with issues - Health trends over time - Issue categorization</p> <p>Use Cases: - Continuous monitoring - Incident response - Health trend analysis - Proactive maintenance</p> <p>Key Features: - Real-time health monitoring - Issue categorization and filtering - Health trend visualization - Detailed issue descriptions</p>"},{"location":"analysis-views/overview/#relationship-analysis","title":"\ud83d\udd17 Relationship Analysis","text":"<p>Purpose: Resource dependency mapping and relationship visualization</p> <p>Key Metrics: - Resource relationship counts - Relationship type distribution - Dependency chains - Orphaned resources</p> <p>Use Cases: - Architecture understanding - Impact analysis - Dependency mapping - Change planning</p> <p>Key Features: - Interactive relationship matrix - Network graph visualization - Relationship type filtering - Dependency chain analysis</p>"},{"location":"analysis-views/overview/#resource-efficiency","title":"\u26a1 Resource Efficiency","text":"<p>Purpose: Resource optimization and efficiency analysis</p> <p>Key Metrics: - Pods without resource requests - Pods without resource limits - Resource coverage percentages - Optimization opportunities</p> <p>Use Cases: - Resource optimization - Cost management - Performance tuning - Capacity planning</p> <p>Key Features: - Severity classification - Automated recommendations - Resource coverage metrics - Export capabilities for remediation</p>"},{"location":"analysis-views/overview/#storage-analysis","title":"\ud83d\udcbe Storage Analysis","text":"<p>Purpose: Storage consumption and capacity tracking</p> <p>Key Metrics: - Total storage consumption - Storage class distribution - Volume status tracking - Per-namespace storage usage</p> <p>Use Cases: - Capacity planning - Storage optimization - Cost management - Storage class analysis</p> <p>Key Features: - Storage consumption charts - Capacity utilization metrics - Storage class breakdown - Volume status monitoring</p>"},{"location":"analysis-views/overview/#temporal-analysis","title":"\u23f0 Temporal Analysis","text":"<p>Purpose: Resource lifecycle and creation pattern analysis</p> <p>Key Metrics: - Resource age distribution - Creation timeline patterns - Most active namespaces - Lifecycle statistics</p> <p>Use Cases: - Resource lifecycle management - Creation pattern analysis - Cleanup planning - Activity monitoring</p> <p>Key Features: - Age-based categorization - Timeline visualizations - Creation pattern analysis - Lifecycle statistics</p>"},{"location":"analysis-views/overview/#label-analysis-new-in-v079","title":"\ud83c\udff7\ufe0f Label Analysis (New in v0.7.9)","text":"<p>Purpose: Comprehensive labeling governance and quality assessment</p> <p>Key Metrics: - Label coverage percentage and quality scoring - Common labels identification and usage patterns - Multi-label resource analysis with statistical insights - Orphaned resource detection without proper labels</p> <p>Use Cases: - Labeling governance and compliance - Resource organization and categorization - Cleanup and standardization initiatives - Application discovery and inventory</p> <p>Key Features: - Label coverage metrics and quality scoring - Interactive label filtering and search - Orphaned resource identification - Label usage pattern analysis - Export functionality for governance reports</p>"},{"location":"analysis-views/overview/#application-view-new-in-v079","title":"\ud83d\ude80 Application View (New in v0.7.9)","text":"<p>Purpose: Application-centric cluster analysis using Kubernetes labels</p> <p>Key Metrics: - Total applications discovered via standard labels - Application health status and resource breakdowns - Orphaned resources without application labels - Label coverage percentage for applications</p> <p>Use Cases: - Application portfolio management - Resource governance and ownership - Development team reporting - Application lifecycle tracking</p> <p>Key Features: - Automatic application discovery using standard Kubernetes labels - Application health and resource breakdowns - Orphaned resource identification and labeling recommendations - Detailed per-application resource inventory - Interactive label-based filtering and analysis - Export functionality for application reports</p>"},{"location":"analysis-views/overview/#navigation-and-filtering","title":"Navigation and Filtering","text":""},{"location":"analysis-views/overview/#common-filters-available-across-views","title":"Common Filters Available Across Views","text":"<p>Namespace Filter: - Filter data by specific namespaces - \"All\" option to view cluster-wide data - Dynamically populated based on available data</p> <p>Resource Type Filter: - Focus on specific Kubernetes resource types - Supports all detected resource kinds - Useful for targeted analysis</p> <p>Health Status Filter: - Show only healthy, warning, or error resources - Helps focus on problematic areas - Supports multiple status selection</p>"},{"location":"analysis-views/overview/#view-specific-features","title":"View-Specific Features","text":"<p>Each view provides specialized filtering and interaction options:</p> <ul> <li>Interactive Charts: Click legends to toggle data series</li> <li>Hover Tooltips: Detailed information on data points</li> <li>Export Functions: Download filtered data as CSV</li> <li>Search Capabilities: Find specific resources by name</li> <li>Drill-down Options: Navigate from summary to detailed views</li> </ul>"},{"location":"analysis-views/overview/#best-practices","title":"Best Practices","text":""},{"location":"analysis-views/overview/#daily-operations","title":"Daily Operations","text":"<ol> <li>Start with Cluster Overview for general health assessment</li> <li>Use Health Dashboard to identify immediate issues</li> <li>Check Resource Efficiency for optimization opportunities</li> <li>Review Security Analysis for compliance monitoring</li> </ol>"},{"location":"analysis-views/overview/#incident-response","title":"Incident Response","text":"<ol> <li>Health Dashboard - Identify resources with issues</li> <li>Namespace Analysis - Scope the impact to specific namespaces</li> <li>Relationship Analysis - Understand dependency impacts</li> <li>Temporal Analysis - Check recent changes</li> </ol>"},{"location":"analysis-views/overview/#capacity-planning","title":"Capacity Planning","text":"<ol> <li>Storage Analysis - Monitor storage consumption trends</li> <li>Resource Efficiency - Identify optimization opportunities</li> <li>Namespace Analysis - Plan resource allocation</li> <li>Cluster Overview - Assess overall growth patterns</li> </ol>"},{"location":"analysis-views/overview/#security-audits","title":"Security Audits","text":"<ol> <li>Security Analysis - Comprehensive security assessment</li> <li>Namespace Analysis - Per-tenant security review</li> <li>Relationship Analysis - Understand access patterns</li> <li>Resource Efficiency - Identify security-relevant misconfigurations</li> </ol>"},{"location":"analysis-views/overview/#data-export-and-integration","title":"Data Export and Integration","text":""},{"location":"analysis-views/overview/#export-options","title":"Export Options","text":"<p>Each view supports data export functionality: - CSV Export: Raw data for external analysis - Report Generation: Formatted reports for stakeholders - API Integration: Programmatic access to data</p>"},{"location":"analysis-views/overview/#integration-patterns","title":"Integration Patterns","text":"<pre><code># Automated report generation\nk8s-reporter --database cluster.db --headless --export-reports\n\n# Custom dashboard integration\nk8s-reporter --database cluster.db --api-mode\n</code></pre>"},{"location":"analysis-views/overview/#customization","title":"Customization","text":""},{"location":"analysis-views/overview/#view-configuration","title":"View Configuration","text":"<p>Views can be customized through: - Filter presets for common use cases - Custom metric thresholds - Personalized dashboard layouts - Scheduled report generation</p>"},{"location":"analysis-views/overview/#adding-custom-views","title":"Adding Custom Views","text":"<p>Developers can extend the analysis capabilities by: 1. Creating new view modules 2. Implementing custom analysis functions 3. Adding specialized visualizations 4. Integrating with external data sources</p>"},{"location":"analysis-views/overview/#performance-considerations","title":"Performance Considerations","text":""},{"location":"analysis-views/overview/#large-clusters","title":"Large Clusters","text":"<ul> <li>Use namespace filtering to reduce data volume</li> <li>Implement pagination for large result sets</li> <li>Cache expensive computations</li> <li>Use efficient database queries</li> </ul>"},{"location":"analysis-views/overview/#real-time-monitoring","title":"Real-time Monitoring","text":"<ul> <li>Implement data refresh mechanisms</li> <li>Use efficient update strategies</li> <li>Monitor memory and CPU usage</li> <li>Optimize rendering performance</li> </ul>"},{"location":"analysis-views/overview/#troubleshooting","title":"Troubleshooting","text":""},{"location":"analysis-views/overview/#common-issues","title":"Common Issues","text":"<p>Slow Loading: - Check database size and query complexity - Use filters to reduce data volume - Verify system resources</p> <p>Missing Data: - Verify database integrity - Check k8s-analyzer export completeness - Validate filter settings</p> <p>Visualization Issues: - Check browser compatibility - Verify JavaScript enablement - Test with different browsers</p>"},{"location":"analysis-views/overview/#future-enhancements","title":"Future Enhancements","text":""},{"location":"analysis-views/overview/#planned-features","title":"Planned Features","text":"<ul> <li>Custom Dashboard Builder: User-defined views</li> <li>Advanced Analytics: Machine learning insights</li> <li>Real-time Monitoring: Live cluster connection</li> <li>Multi-cluster Views: Comparative analysis</li> <li>Alert Integration: Notification systems</li> </ul>"},{"location":"analysis-views/overview/#community-contributions","title":"Community Contributions","text":"<ul> <li>Custom view templates</li> <li>Specialized analysis functions</li> <li>Industry-specific dashboards</li> <li>Integration plugins</li> </ul>"},{"location":"analysis-views/overview/#support-and-resources","title":"Support and Resources","text":"<ul> <li>Documentation: Comprehensive guides for each view</li> <li>Examples: Sample dashboards and use cases</li> <li>Community: User discussions and best practices</li> <li>Development: Contribution guidelines and API reference</li> </ul>"},{"location":"analysis-views/relationship-analysis/","title":"Relationship Analysis","text":"<p>The Relationship Analysis provides a comprehensive view of the dependencies and relationships in your Kubernetes cluster.</p>"},{"location":"analysis-views/relationship-analysis/#overview","title":"Overview","text":"<p>This view allows you to:</p> <ul> <li>Visualize: Display the interconnected components within a cluster</li> <li>Analyze: Understand the impact of changes across components</li> <li>Plan: Optimize deployment strategies and testing approaches</li> </ul>"},{"location":"analysis-views/relationship-analysis/#components-and-dependencies","title":"Components and Dependencies","text":""},{"location":"analysis-views/relationship-analysis/#visualization-metrics","title":"Visualization Metrics","text":"<ul> <li>Service Dependencies: Understand how services interact</li> <li>Pod Relationships: Track pod-to-pod communications</li> <li>Storage Dependencies: Map PV to PVC relationships</li> </ul>"},{"location":"analysis-views/relationship-analysis/#dependency-mapping","title":"Dependency Mapping","text":"<pre><code>graph LR;\n    A[Service A] --&gt; B[Service B];\n    B --&gt; C[Database];\n    A --&gt; C;</code></pre>"},{"location":"analysis-views/relationship-analysis/#best-practices","title":"Best Practices","text":""},{"location":"analysis-views/relationship-analysis/#change-management","title":"Change Management","text":"<ol> <li>Impact Analysis: Evaluate the potential effects of changes</li> <li>Testing Strategies: Prioritize tests based on dependencies</li> <li>Resource Allocation: Distribute resources based on dependency criticality</li> </ol>"},{"location":"analysis-views/relationship-analysis/#visual-toolkit","title":"Visual Toolkit","text":"<ul> <li>Use tools like Mermaid for diagrammatic representation</li> <li>Grafana dashboards for visualizing component interconnectivity</li> </ul>"},{"location":"analysis-views/relationship-analysis/#integration","title":"Integration","text":""},{"location":"analysis-views/relationship-analysis/#cicd-pipelines","title":"CI/CD Pipelines","text":"<ul> <li>Visual representations and dependencies</li> <li>Automated change impact analysis</li> </ul>"},{"location":"analysis-views/relationship-analysis/#monitoring","title":"Monitoring","text":"<ul> <li>Alerts on critical dependency changes</li> <li>Performance metrics relativity</li> </ul>"},{"location":"analysis-views/relationship-analysis/#usage","title":"Usage","text":"<pre><code>k8s-analyzer analyze --view relationship-analysis\n</code></pre>"},{"location":"analysis-views/relationship-analysis/#related-views","title":"Related Views","text":"<ul> <li>Cluster Overview</li> <li>Security Analysis</li> <li>Resource Efficiency</li> <li>Temporal Analysis</li> </ul>"},{"location":"analysis-views/resource-efficiency/","title":"Resource Efficiency","text":"<p>The Resource Efficiency analysis helps optimize your Kubernetes cluster's resource utilization by identifying inefficiencies and providing optimization recommendations.</p>"},{"location":"analysis-views/resource-efficiency/#overview","title":"Overview","text":"<p>This analysis examines:</p> <ul> <li>Resource Utilization: CPU, memory, and storage usage patterns</li> <li>Right-sizing Opportunities: Over/under-provisioned workloads</li> <li>Cost Optimization: Resource allocation vs. actual usage</li> <li>Performance Bottlenecks: Resource constraints affecting performance</li> <li>Waste Identification: Unused or underutilized resources</li> </ul>"},{"location":"analysis-views/resource-efficiency/#key-metrics","title":"Key Metrics","text":""},{"location":"analysis-views/resource-efficiency/#utilization-analysis","title":"Utilization Analysis","text":"<ul> <li>CPU utilization trends over time</li> <li>Memory usage patterns and spikes</li> <li>Storage consumption and growth</li> <li>Network bandwidth utilization</li> </ul>"},{"location":"analysis-views/resource-efficiency/#resource-requests-vs-usage","title":"Resource Requests vs. Usage","text":"<ul> <li>Over-requested resources</li> <li>Under-requested resources leading to throttling</li> <li>Request/limit ratios analysis</li> <li>Quality of Service (QoS) class distribution</li> </ul>"},{"location":"analysis-views/resource-efficiency/#efficiency-scores","title":"Efficiency Scores","text":"<ul> <li>Cluster Efficiency Score: Overall resource utilization rating</li> <li>Workload Efficiency: Per-application resource efficiency</li> <li>Node Efficiency: Per-node resource utilization</li> <li>Cost Efficiency: Resource cost vs. value analysis</li> </ul>"},{"location":"analysis-views/resource-efficiency/#optimization-recommendations","title":"Optimization Recommendations","text":""},{"location":"analysis-views/resource-efficiency/#right-sizing-suggestions","title":"Right-sizing Suggestions","text":"<pre><code># Example optimization recommendation\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: example-app\nspec:\n  template:\n    spec:\n      containers:\n      - name: app\n        resources:\n          requests:\n            cpu: \"200m\"      # Recommended: reduce from 500m\n            memory: \"256Mi\"  # Recommended: reduce from 512Mi\n          limits:\n            cpu: \"400m\"      # Recommended: reduce from 1000m\n            memory: \"512Mi\"  # Keep current limit\n</code></pre>"},{"location":"analysis-views/resource-efficiency/#workload-optimization","title":"Workload Optimization","text":"<ul> <li>Vertical Pod Autoscaler (VPA) recommendations</li> <li>Horizontal Pod Autoscaler (HPA) configuration</li> <li>Node sizing optimization</li> <li>Storage class selection guidance</li> </ul>"},{"location":"analysis-views/resource-efficiency/#cost-analysis","title":"Cost Analysis","text":""},{"location":"analysis-views/resource-efficiency/#resource-costing","title":"Resource Costing","text":"<ul> <li>Per-workload resource costs</li> <li>Idle resource costs</li> <li>Over-provisioning costs</li> <li>Potential savings identification</li> </ul>"},{"location":"analysis-views/resource-efficiency/#budget-optimization","title":"Budget Optimization","text":"<ul> <li>Resource budget allocation</li> <li>Cost alerts and thresholds</li> <li>Multi-cluster cost comparison</li> <li>Reserved capacity recommendations</li> </ul>"},{"location":"analysis-views/resource-efficiency/#usage","title":"Usage","text":"<pre><code># Full resource efficiency analysis\nk8s-analyzer analyze --view resource-efficiency\n\n# Focus on specific namespace\nk8s-analyzer analyze --view resource-efficiency --namespace production\n\n# Generate optimization report\nk8s-analyzer report --template resource-optimization\n\n# Export recommendations\nk8s-analyzer optimize --format yaml &gt; recommendations.yaml\n</code></pre>"},{"location":"analysis-views/resource-efficiency/#implementation-guide","title":"Implementation Guide","text":""},{"location":"analysis-views/resource-efficiency/#applying-recommendations","title":"Applying Recommendations","text":"<ol> <li>Review the efficiency analysis results</li> <li>Validate recommendations in staging environment</li> <li>Implement changes gradually</li> <li>Monitor impact on performance and costs</li> <li>Iterate based on new usage patterns</li> </ol>"},{"location":"analysis-views/resource-efficiency/#monitoring-efficiency","title":"Monitoring Efficiency","text":"<ul> <li>Set up regular efficiency assessments</li> <li>Create alerts for efficiency thresholds</li> <li>Track efficiency trends over time</li> <li>Integrate with cost management tools</li> </ul>"},{"location":"analysis-views/resource-efficiency/#integration","title":"Integration","text":""},{"location":"analysis-views/resource-efficiency/#monitoring-tools","title":"Monitoring Tools","text":"<ul> <li>Prometheus for metrics collection</li> <li>Grafana for visualization</li> <li>Cost management platforms</li> <li>Cloud provider billing APIs</li> </ul>"},{"location":"analysis-views/resource-efficiency/#automation","title":"Automation","text":"<ul> <li>GitOps workflows for recommendation deployment</li> <li>CI/CD pipeline integration</li> <li>Automated right-sizing policies</li> <li>Scheduled efficiency reports</li> </ul>"},{"location":"analysis-views/resource-efficiency/#related-views","title":"Related Views","text":"<ul> <li>Cluster Overview</li> <li>Temporal Analysis</li> <li>Health Dashboard</li> </ul>"},{"location":"analysis-views/security-analysis/","title":"Security Analysis","text":"<p>The Security Analysis view provides comprehensive security assessment of your Kubernetes cluster, identifying potential vulnerabilities and compliance issues.</p>"},{"location":"analysis-views/security-analysis/#overview","title":"Overview","text":"<p>This analysis focuses on:</p> <ul> <li>RBAC Analysis: Role-based access control configuration</li> <li>Pod Security: Security contexts and policies</li> <li>Network Security: Network policies and ingress/egress rules</li> <li>Secrets Management: Secret usage and security</li> <li>Image Security: Container image vulnerabilities</li> <li>Compliance: Adherence to security best practices</li> </ul>"},{"location":"analysis-views/security-analysis/#security-checks","title":"Security Checks","text":""},{"location":"analysis-views/security-analysis/#rbac-assessment","title":"RBAC Assessment","text":"<ul> <li>Service account permissions</li> <li>ClusterRole and Role bindings</li> <li>Excessive privileges identification</li> <li>Service account token usage</li> </ul>"},{"location":"analysis-views/security-analysis/#pod-security-standards","title":"Pod Security Standards","text":"<ul> <li>Security contexts validation</li> <li>Privileged containers detection</li> <li>Root user execution</li> <li>Capability assignments</li> <li>Volume mount security</li> </ul>"},{"location":"analysis-views/security-analysis/#network-security","title":"Network Security","text":"<ul> <li>Network policy coverage</li> <li>Ingress/egress rules analysis</li> <li>Service exposure assessment</li> <li>Pod-to-pod communication security</li> </ul>"},{"location":"analysis-views/security-analysis/#secrets-and-configmaps","title":"Secrets and ConfigMaps","text":"<ul> <li>Secret exposure risks</li> <li>ConfigMap security</li> <li>Environment variable injection</li> <li>Volume mount security</li> </ul>"},{"location":"analysis-views/security-analysis/#security-scoring","title":"Security Scoring","text":"<p>The security analysis provides:</p> <ul> <li>Overall Security Score: Aggregate security rating</li> <li>Category Scores: Detailed scoring per security domain</li> <li>Risk Assessment: High, medium, and low-risk findings</li> <li>Compliance Status: Standards adherence (CIS, NSA/CISA, etc.)</li> </ul>"},{"location":"analysis-views/security-analysis/#usage","title":"Usage","text":"<pre><code># Full security analysis\nk8s-analyzer analyze --view security-analysis\n\n# Focus on specific security domain\nk8s-analyzer analyze --view security-analysis --filter rbac\n\n# Generate security report\nk8s-analyzer report --template security-summary\n</code></pre>"},{"location":"analysis-views/security-analysis/#remediation-guidance","title":"Remediation Guidance","text":"<p>Each security finding includes:</p> <ul> <li>Description: What the issue is</li> <li>Impact: Potential security implications</li> <li>Remediation: Step-by-step fix instructions</li> <li>References: Links to security best practices</li> </ul>"},{"location":"analysis-views/security-analysis/#integration-with-security-tools","title":"Integration with Security Tools","text":"<p>The security analysis can integrate with:</p> <ul> <li>Falco for runtime security</li> <li>OPA Gatekeeper for policy enforcement</li> <li>Twistlock/Prisma for image scanning</li> <li>Aqua Security for comprehensive protection</li> </ul>"},{"location":"analysis-views/security-analysis/#related-views","title":"Related Views","text":"<ul> <li>Cluster Overview</li> <li>Health Dashboard</li> <li>Namespace Analysis</li> </ul>"},{"location":"analysis-views/storage-analysis/","title":"Storage Analysis","text":"<p>The Storage Analysis view provides comprehensive insights into your Kubernetes cluster's storage usage, performance, and optimization opportunities.</p>"},{"location":"analysis-views/storage-analysis/#overview","title":"Overview","text":"<p>This analysis covers:</p> <ul> <li>Storage Utilization: Volume usage across the cluster</li> <li>Performance Metrics: I/O patterns and bottlenecks</li> <li>Storage Classes: Usage and optimization recommendations</li> <li>Persistent Volume Claims: Allocation and efficiency</li> <li>Cost Analysis: Storage costs and optimization opportunities</li> </ul>"},{"location":"analysis-views/storage-analysis/#key-components","title":"Key Components","text":""},{"location":"analysis-views/storage-analysis/#storage-utilization","title":"Storage Utilization","text":"<ul> <li>Total storage capacity and usage</li> <li>Per-namespace storage consumption</li> <li>Volume usage trends over time</li> <li>Storage growth projections</li> </ul>"},{"location":"analysis-views/storage-analysis/#persistent-volumes-pvs-and-claims-pvcs","title":"Persistent Volumes (PVs) and Claims (PVCs)","text":"<ul> <li>PV/PVC pairing and status</li> <li>Unused or orphaned volumes</li> <li>Reclaim policy analysis</li> <li>Storage class distribution</li> </ul>"},{"location":"analysis-views/storage-analysis/#performance-analysis","title":"Performance Analysis","text":"<ul> <li>I/O throughput metrics</li> <li>Latency measurements</li> <li>Storage bottleneck identification</li> <li>Performance per storage class</li> </ul>"},{"location":"analysis-views/storage-analysis/#storage-classes-analysis","title":"Storage Classes Analysis","text":""},{"location":"analysis-views/storage-analysis/#available-storage-classes","title":"Available Storage Classes","text":"<pre><code># Example storage class analysis output\napiVersion: v1\nkind: List\nitems:\n- class: fast-ssd\n  provisioner: kubernetes.io/aws-ebs\n  usage: 45%\n  cost_per_gb: $0.20\n  performance: high\n  recommended_for: [databases, high-iops-workloads]\n\n- class: standard\n  provisioner: kubernetes.io/aws-ebs\n  usage: 78%\n  cost_per_gb: $0.10\n  performance: medium\n  recommended_for: [general-workloads, development]\n</code></pre>"},{"location":"analysis-views/storage-analysis/#optimization-recommendations","title":"Optimization Recommendations","text":"<ul> <li>Right-sizing volume requests</li> <li>Storage class migration suggestions</li> <li>Unused volume cleanup</li> <li>Cost-performance optimization</li> </ul>"},{"location":"analysis-views/storage-analysis/#volume-lifecycle-management","title":"Volume Lifecycle Management","text":""},{"location":"analysis-views/storage-analysis/#volume-status-tracking","title":"Volume Status Tracking","text":"<ul> <li>Bound: Volumes successfully claimed</li> <li>Available: Unbound volumes ready for use</li> <li>Released: Volumes released but not reclaimed</li> <li>Failed: Volumes in error state</li> </ul>"},{"location":"analysis-views/storage-analysis/#cleanup-opportunities","title":"Cleanup Opportunities","text":"<ul> <li>Orphaned PVs without PVCs</li> <li>Released volumes pending cleanup</li> <li>Over-provisioned storage requests</li> <li>Unused volumes in development environments</li> </ul>"},{"location":"analysis-views/storage-analysis/#storage-cost-analysis","title":"Storage Cost Analysis","text":""},{"location":"analysis-views/storage-analysis/#cost-breakdown","title":"Cost Breakdown","text":"<ul> <li>Storage costs by namespace</li> <li>Storage class cost comparison</li> <li>Growth-based cost projections</li> <li>Waste identification and potential savings</li> </ul>"},{"location":"analysis-views/storage-analysis/#budget-optimization","title":"Budget Optimization","text":"<pre><code># Generate storage cost report\nk8s-analyzer analyze --view storage-analysis --cost-report\n\n# Identify optimization opportunities\nk8s-analyzer optimize --storage --savings-report\n</code></pre>"},{"location":"analysis-views/storage-analysis/#performance-monitoring","title":"Performance Monitoring","text":""},{"location":"analysis-views/storage-analysis/#io-metrics","title":"I/O Metrics","text":"<ul> <li>Read/write IOPS</li> <li>Throughput measurements</li> <li>Queue depths and wait times</li> <li>Storage latency percentiles</li> </ul>"},{"location":"analysis-views/storage-analysis/#bottleneck-analysis","title":"Bottleneck Analysis","text":"<ul> <li>High I/O wait workloads</li> <li>Storage-constrained applications</li> <li>Network storage performance issues</li> <li>Node-local vs. remote storage performance</li> </ul>"},{"location":"analysis-views/storage-analysis/#usage-examples","title":"Usage Examples","text":"<pre><code># Comprehensive storage analysis\nk8s-analyzer analyze --view storage-analysis\n\n# Focus on specific namespace\nk8s-analyzer analyze --view storage-analysis --namespace production\n\n# Performance-focused analysis\nk8s-analyzer analyze --view storage-analysis --metrics io-performance\n\n# Generate cleanup recommendations\nk8s-analyzer storage cleanup --dry-run\n</code></pre>"},{"location":"analysis-views/storage-analysis/#monitoring-integration","title":"Monitoring Integration","text":""},{"location":"analysis-views/storage-analysis/#prometheus-metrics","title":"Prometheus Metrics","text":"<pre><code># Storage utilization query examples\nkubelet_volume_stats_used_bytes / kubelet_volume_stats_capacity_bytes\n\n# PVC usage by namespace\nsum(kubelet_volume_stats_used_bytes) by (namespace, persistentvolumeclaim)\n</code></pre>"},{"location":"analysis-views/storage-analysis/#grafana-dashboards","title":"Grafana Dashboards","text":"<ul> <li>Storage utilization trends</li> <li>PV/PVC status overview</li> <li>Performance metrics visualization</li> <li>Cost tracking dashboards</li> </ul>"},{"location":"analysis-views/storage-analysis/#maintenance-recommendations","title":"Maintenance Recommendations","text":""},{"location":"analysis-views/storage-analysis/#regular-tasks","title":"Regular Tasks","text":"<ol> <li>Volume Cleanup: Remove unused PVs and PVCs</li> <li>Capacity Planning: Monitor growth trends</li> <li>Performance Tuning: Optimize storage classes</li> <li>Cost Optimization: Right-size storage requests</li> </ol>"},{"location":"analysis-views/storage-analysis/#automated-policies","title":"Automated Policies","text":"<ul> <li>PVC expansion policies</li> <li>Automated cleanup schedules</li> <li>Storage quota management</li> <li>Performance-based auto-scaling</li> </ul>"},{"location":"analysis-views/storage-analysis/#related-views","title":"Related Views","text":"<ul> <li>Resource Efficiency</li> <li>Cluster Overview</li> <li>Temporal Analysis</li> </ul>"},{"location":"analysis-views/temporal-analysis/","title":"Temporal Analysis","text":"<p>The Temporal Analysis view provides insights into time-based trends and behaviors in your Kubernetes cluster.</p>"},{"location":"analysis-views/temporal-analysis/#overview","title":"Overview","text":"<p>This analysis focuses on:</p> <ul> <li>Time Series Analysis: Metrics collected over time</li> <li>Behavioral Patterns: Weekly/daily patterns in cluster usage</li> <li>Temporal Anomalies: Short-term abnormal behaviors</li> <li>Trend Forecasting: Long-term trends prediction</li> </ul>"},{"location":"analysis-views/temporal-analysis/#key-components","title":"Key Components","text":""},{"location":"analysis-views/temporal-analysis/#time-series-metrics","title":"Time Series Metrics","text":"<ul> <li>CPU and memory usage over time</li> <li>Network traffic patterns</li> <li>Persistent storage usage</li> <li>Pod creation and deletion rates</li> </ul>"},{"location":"analysis-views/temporal-analysis/#patterns-and-trends","title":"Patterns and Trends","text":"<ul> <li>Daily Patterns: Usage starts, peaks, and ends</li> <li>Example: Increased usage during work hours</li> <li>Weekly Trends: Weekly recurring patterns</li> <li>Example: Increased weekend batch processing</li> </ul>"},{"location":"analysis-views/temporal-analysis/#anomaly-detection","title":"Anomaly Detection","text":"<ul> <li>Sudden spikes in usage</li> <li>Unexpected drops in resource consumption</li> <li>Anomalies in pod lifecycle events</li> </ul>"},{"location":"analysis-views/temporal-analysis/#forecasting-and-predictions","title":"Forecasting and Predictions","text":"<ul> <li>CPU and memory usage forecasting</li> <li>Storage needs prediction</li> <li>Network demand forecasts</li> </ul>"},{"location":"analysis-views/temporal-analysis/#usage-examples","title":"Usage Examples","text":"<pre><code># Perform temporal analysis\nk8s-analyzer analyze --view temporal-analysis\n\n# Focus on specific metrics\nk8s-analyzer analyze --view temporal-analysis --metrics cpu,network\n\n# Create trend forecast reports\nk8s-analyzer forecast --output report.csv\n</code></pre>"},{"location":"analysis-views/temporal-analysis/#integration","title":"Integration","text":""},{"location":"analysis-views/temporal-analysis/#monitoring-tools","title":"Monitoring Tools","text":"<ul> <li>Prometheus for long-term metrics storage</li> <li>Grafana for time series visualization</li> <li>ML algorithms for anomaly detection and prediction</li> </ul>"},{"location":"analysis-views/temporal-analysis/#automating-forecasts","title":"Automating Forecasts","text":"<ul> <li>CI/CD pipeline integration for scheduled forecasts</li> <li>Integration with resource management for proactive scaling</li> <li>Alerts based on trend deviations and anomalies</li> </ul>"},{"location":"analysis-views/temporal-analysis/#best-practices","title":"Best Practices","text":""},{"location":"analysis-views/temporal-analysis/#metrics-collection","title":"Metrics Collection","text":"<ol> <li>Granular Data: Collect detailed metrics for accuracy</li> <li>Diverse Metrics: Cover CPU, memory, network, and storage</li> <li>Long-Term Retention: Store historical data for trend identification</li> </ol>"},{"location":"analysis-views/temporal-analysis/#data-usage","title":"Data Usage","text":"<ol> <li>Visualize: Use dashboards for real-time insights</li> <li>Automate: Utilize CI/CD for trend-based decisions</li> <li>Analyze: Regularly review and adapt resource allocations</li> </ol>"},{"location":"analysis-views/temporal-analysis/#related-views","title":"Related Views","text":"<ul> <li>Resource Efficiency</li> <li>Storage Analysis</li> <li>Health Dashboard</li> </ul>"},{"location":"analyzer/cli-reference/","title":"\ud83d\udccb k8s-analyzer CLI Reference","text":"<p>Complete command-line interface reference for the k8s-analyzer tool.</p>"},{"location":"analyzer/cli-reference/#global-options","title":"Global Options","text":"<p>All commands support these global options:</p> <pre><code>--verbose, -v        Enable verbose logging\n--help              Show help message and exit\n--version           Show version information\n</code></pre>"},{"location":"analyzer/cli-reference/#commands-overview","title":"Commands Overview","text":"Command Description <code>parse</code> Parse kubectl export files and extract resources <code>analyze</code> Parse and analyze with relationship mapping <code>report</code> Generate comprehensive HTML analysis report <code>graph</code> Display resource relationship graph <code>validate</code> Validate resource configurations <code>sqlite</code> Export data to SQLite database <code>csv</code> Export data to CSV files <code>scan</code> Parse directory of files <code>batch-analyze</code> Full directory analysis <code>export-multiple-sqlite</code> Export multiple files to SQLite <code>export-directory-sqlite</code> Export entire directory to SQLite <code>query-db</code> Query existing SQLite database <code>db-summary</code> Database statistics <code>export-csv</code> Export database to CSV"},{"location":"analyzer/cli-reference/#command-details","title":"Command Details","text":""},{"location":"analyzer/cli-reference/#parse","title":"<code>parse</code>","text":"<p>Parse kubectl export files and extract resources.</p> <p>Syntax: <pre><code>k8s-analyzer parse [OPTIONS] FILE\n</code></pre></p> <p>Arguments: - <code>FILE</code> - Path to kubectl export file (JSON/YAML)</p> <p>Options: - <code>--additional, -a FILES</code> - Additional files to merge - <code>--output, -o PATH</code> - Output file path (JSON format) - <code>--verbose, -v</code> - Enable verbose logging</p> <p>Examples: <pre><code># Basic parsing\nk8s-analyzer parse cluster-export.json\n\n# Parse with additional files\nk8s-analyzer parse main.json -a pods.json services.json\n\n# Parse and save output\nk8s-analyzer parse cluster-export.yaml -o parsed-resources.json\n</code></pre></p>"},{"location":"analyzer/cli-reference/#analyze","title":"<code>analyze</code>","text":"<p>Parse and analyze kubectl exports with relationship mapping.</p> <p>Syntax: <pre><code>k8s-analyzer analyze [OPTIONS] FILE\n</code></pre></p> <p>Arguments: - <code>FILE</code> - Path to kubectl export file (JSON/YAML)</p> <p>Options: - <code>--additional, -a FILES</code> - Additional files to merge - <code>--output, -o PATH</code> - Output file path (JSON format) - <code>--namespace, -n NAMESPACE</code> - Filter by namespace - <code>--include-kinds KINDS</code> - Include only specified resource kinds - <code>--exclude-kinds KINDS</code> - Exclude specified resource kinds - <code>--verbose, -v</code> - Enable verbose logging</p> <p>Examples: <pre><code># Full cluster analysis\nk8s-analyzer analyze cluster-export.json\n\n# Analyze specific namespace\nk8s-analyzer analyze cluster-export.json -n production\n\n# Analyze with kind filtering\nk8s-analyzer analyze cluster-export.json --include-kinds Pod,Service,Deployment\n\n# Save analysis results\nk8s-analyzer analyze cluster-export.json -o analysis-results.json\n</code></pre></p>"},{"location":"analyzer/cli-reference/#report","title":"<code>report</code>","text":"<p>Generate comprehensive HTML analysis report.</p> <p>Syntax: <pre><code>k8s-analyzer report [OPTIONS] FILE\n</code></pre></p> <p>Arguments: - <code>FILE</code> - Path to kubectl export file (JSON/YAML)</p> <p>Options: - <code>--additional, -a FILES</code> - Additional files to merge - <code>--output, -o PATH</code> - Output HTML report path (default: cluster-report.html) - <code>--template TEMPLATE</code> - Custom report template - <code>--include-graphs</code> - Include relationship graphs in report - <code>--verbose, -v</code> - Enable verbose logging</p> <p>Examples: <pre><code># Generate basic report\nk8s-analyzer report cluster-export.json\n\n# Custom output location\nk8s-analyzer report cluster-export.json -o reports/cluster-analysis.html\n\n# Report with graphs\nk8s-analyzer report cluster-export.json --include-graphs\n</code></pre></p>"},{"location":"analyzer/cli-reference/#graph","title":"<code>graph</code>","text":"<p>Display resource relationship graph.</p> <p>Syntax: <pre><code>k8s-analyzer graph [OPTIONS] FILE\n</code></pre></p> <p>Arguments: - <code>FILE</code> - Path to kubectl export file (JSON/YAML)</p> <p>Options: - <code>--additional, -a FILES</code> - Additional files to merge - <code>--namespace, -n NAMESPACE</code> - Filter by namespace - <code>--type, -t TYPE</code> - Filter by resource type - <code>--output-format FORMAT</code> - Output format (text, dot, svg) - <code>--max-depth DEPTH</code> - Maximum relationship depth - <code>--verbose, -v</code> - Enable verbose logging</p> <p>Examples: <pre><code># Display relationship graph\nk8s-analyzer graph cluster-export.json\n\n# Filter by namespace\nk8s-analyzer graph cluster-export.json -n default\n\n# Filter by resource type\nk8s-analyzer graph cluster-export.json -t Pod\n\n# Export as DOT format\nk8s-analyzer graph cluster-export.json --output-format dot &gt; graph.dot\n</code></pre></p>"},{"location":"analyzer/cli-reference/#validate","title":"<code>validate</code>","text":"<p>Validate resource configurations and identify issues.</p> <p>Syntax: <pre><code>k8s-analyzer validate [OPTIONS] FILE\n</code></pre></p> <p>Arguments: - <code>FILE</code> - Path to kubectl export file (JSON/YAML)</p> <p>Options: - <code>--additional, -a FILES</code> - Additional files to merge - <code>--rules-file FILE</code> - Custom validation rules file - <code>--severity LEVEL</code> - Minimum severity level (info, warning, error) - <code>--output-format FORMAT</code> - Output format (text, json, yaml) - <code>--verbose, -v</code> - Enable verbose logging</p> <p>Examples: <pre><code># Basic validation\nk8s-analyzer validate cluster-export.json\n\n# Show only errors\nk8s-analyzer validate cluster-export.json --severity error\n\n# Output as JSON\nk8s-analyzer validate cluster-export.json --output-format json\n</code></pre></p>"},{"location":"analyzer/cli-reference/#sqlite","title":"<code>sqlite</code>","text":"<p>Export data to SQLite database.</p> <p>Syntax: <pre><code>k8s-analyzer sqlite [OPTIONS] FILE\n</code></pre></p> <p>Arguments: - <code>FILE</code> - Path to kubectl export file (JSON/YAML)</p> <p>Options: - <code>--output, -o DATABASE</code> - Output SQLite database path - <code>--replace-existing</code> - Replace existing database - <code>--batch-size SIZE</code> - Batch processing size (default: 100) - <code>--include-relationships</code> - Include relationship analysis - <code>--compress</code> - Compress database - <code>--verbose, -v</code> - Enable verbose logging</p> <p>Examples: <pre><code># Export to SQLite\nk8s-analyzer sqlite cluster-export.json --output cluster.db\n\n# Replace existing database\nk8s-analyzer sqlite cluster-export.json -o cluster.db --replace-existing\n\n# Custom batch size for large clusters\nk8s-analyzer sqlite large-cluster.json -o large.db --batch-size 50\n</code></pre></p>"},{"location":"analyzer/cli-reference/#csv","title":"<code>csv</code>","text":"<p>Export data to CSV files.</p> <p>Syntax: <pre><code>k8s-analyzer csv [OPTIONS] FILE\n</code></pre></p> <p>Arguments: - <code>FILE</code> - Path to kubectl export file (JSON/YAML)</p> <p>Options: - <code>--output-dir, -o DIRECTORY</code> - Output directory for CSV files - <code>--separate-files</code> - Create separate files per resource type - <code>--include-relationships</code> - Include relationships CSV - <code>--flatten-spec</code> - Flatten spec fields into columns - <code>--verbose, -v</code> - Enable verbose logging</p> <p>Examples: <pre><code># Export to CSV directory\nk8s-analyzer csv cluster-export.json --output-dir ./csv-reports\n\n# Separate files per resource type\nk8s-analyzer csv cluster-export.json -o ./reports --separate-files\n\n# Include relationships\nk8s-analyzer csv cluster-export.json -o ./reports --include-relationships\n</code></pre></p>"},{"location":"analyzer/cli-reference/#scan","title":"<code>scan</code>","text":"<p>Parse directory of Kubernetes files.</p> <p>Syntax: <pre><code>k8s-analyzer scan [OPTIONS] DIRECTORY\n</code></pre></p> <p>Arguments: - <code>DIRECTORY</code> - Directory containing Kubernetes files</p> <p>Options: - <code>--recursive, -r</code> - Scan subdirectories recursively - <code>--pattern PATTERN</code> - File pattern to match (default: .yaml,.yml,*.json) - <code>--output, -o PATH</code> - Output file path - <code>--exclude-dirs DIRS</code> - Directories to exclude - <code>--verbose, -v</code> - Enable verbose logging</p> <p>Examples: <pre><code># Scan directory\nk8s-analyzer scan ./manifests\n\n# Recursive scan\nk8s-analyzer scan ./k8s-configs --recursive\n\n# Custom pattern\nk8s-analyzer scan ./configs --pattern \"*.yaml\"\n\n# Exclude directories\nk8s-analyzer scan ./all-configs --exclude-dirs .git,node_modules\n</code></pre></p>"},{"location":"analyzer/cli-reference/#batch-analyze","title":"<code>batch-analyze</code>","text":"<p>Full directory analysis with relationships.</p> <p>Syntax: <pre><code>k8s-analyzer batch-analyze [OPTIONS] DIRECTORY\n</code></pre></p> <p>Arguments: - <code>DIRECTORY</code> - Directory containing Kubernetes files</p> <p>Options: - <code>--recursive, -r</code> - Scan subdirectories recursively - <code>--output, -o PATH</code> - Output analysis file - <code>--parallel-jobs JOBS</code> - Number of parallel processing jobs - <code>--chunk-size SIZE</code> - Files per processing chunk - <code>--verbose, -v</code> - Enable verbose logging</p> <p>Examples: <pre><code># Batch analyze directory\nk8s-analyzer batch-analyze ./manifests --output batch-results.json\n\n# Parallel processing\nk8s-analyzer batch-analyze ./large-configs --parallel-jobs 4\n\n# Custom chunk size\nk8s-analyzer batch-analyze ./configs --chunk-size 10\n</code></pre></p>"},{"location":"analyzer/cli-reference/#export-multiple-sqlite","title":"<code>export-multiple-sqlite</code>","text":"<p>Export multiple files to SQLite database.</p> <p>Syntax: <pre><code>k8s-analyzer export-multiple-sqlite [OPTIONS] FILES...\n</code></pre></p> <p>Arguments: - <code>FILES...</code> - Multiple kubectl export files</p> <p>Options: - <code>--database, -d DATABASE</code> - Output SQLite database path - <code>--replace-existing</code> - Replace existing database - <code>--batch-size SIZE</code> - Batch processing size - <code>--merge-strategy STRATEGY</code> - How to handle conflicts (merge, replace, skip) - <code>--verbose, -v</code> - Enable verbose logging</p> <p>Examples: <pre><code># Export multiple files\nk8s-analyzer export-multiple-sqlite file1.json file2.yaml -d combined.db\n\n# Replace existing database\nk8s-analyzer export-multiple-sqlite *.json -d cluster.db --replace-existing\n\n# Custom merge strategy\nk8s-analyzer export-multiple-sqlite cluster1.json cluster2.json \\\n  -d multi-cluster.db --merge-strategy merge\n</code></pre></p>"},{"location":"analyzer/cli-reference/#export-directory-sqlite","title":"<code>export-directory-sqlite</code>","text":"<p>Export entire directory to SQLite database.</p> <p>Syntax: <pre><code>k8s-analyzer export-directory-sqlite [OPTIONS] DIRECTORY DATABASE\n</code></pre></p> <p>Arguments: - <code>DIRECTORY</code> - Directory containing Kubernetes files - <code>DATABASE</code> - Output SQLite database path</p> <p>Options: - <code>--recursive, -r</code> - Process subdirectories recursively - <code>--pattern PATTERN</code> - File pattern to match - <code>--batch-size SIZE</code> - Batch processing size - <code>--replace-existing</code> - Replace existing database - <code>--exclude-dirs DIRS</code> - Directories to exclude - <code>--verbose, -v</code> - Enable verbose logging</p> <p>Examples: <pre><code># Export directory to SQLite\nk8s-analyzer export-directory-sqlite ./manifests cluster.db\n\n# Recursive with custom pattern\nk8s-analyzer export-directory-sqlite ./configs cluster.db \\\n  --recursive --pattern \"*.yaml\"\n\n# Large directory with batching\nk8s-analyzer export-directory-sqlite ./large-cluster cluster.db \\\n  --batch-size 50 --replace-existing\n</code></pre></p>"},{"location":"analyzer/cli-reference/#query-db","title":"<code>query-db</code>","text":"<p>Query existing SQLite database.</p> <p>Syntax: <pre><code>k8s-analyzer query-db [OPTIONS] DATABASE\n</code></pre></p> <p>Arguments: - <code>DATABASE</code> - Path to SQLite database</p> <p>Options: - <code>--sql QUERY</code> - SQL query to execute - <code>--kind KIND</code> - Filter by resource kind - <code>--namespace NAMESPACE</code> - Filter by namespace - <code>--health-status STATUS</code> - Filter by health status - <code>--output-format FORMAT</code> - Output format (table, json, csv) - <code>--limit LIMIT</code> - Limit number of results - <code>--verbose, -v</code> - Enable verbose logging</p> <p>Examples: <pre><code># Query by resource kind\nk8s-analyzer query-db cluster.db --kind Pod\n\n# Query by namespace\nk8s-analyzer query-db cluster.db --namespace production\n\n# Custom SQL query\nk8s-analyzer query-db cluster.db --sql \"SELECT * FROM resources WHERE kind='Service'\"\n\n# Output as JSON\nk8s-analyzer query-db cluster.db --kind ConfigMap --output-format json\n</code></pre></p>"},{"location":"analyzer/cli-reference/#db-summary","title":"<code>db-summary</code>","text":"<p>Get database statistics and summary.</p> <p>Syntax: <pre><code>k8s-analyzer db-summary [OPTIONS] DATABASE\n</code></pre></p> <p>Arguments: - <code>DATABASE</code> - Path to SQLite database</p> <p>Options: - <code>--detailed</code> - Show detailed statistics - <code>--output-format FORMAT</code> - Output format (table, json, yaml) - <code>--include-schema</code> - Include database schema information - <code>--verbose, -v</code> - Enable verbose logging</p> <p>Examples: <pre><code># Basic summary\nk8s-analyzer db-summary cluster.db\n\n# Detailed statistics\nk8s-analyzer db-summary cluster.db --detailed\n\n# JSON output\nk8s-analyzer db-summary cluster.db --output-format json\n\n# Include schema\nk8s-analyzer db-summary cluster.db --include-schema\n</code></pre></p>"},{"location":"analyzer/cli-reference/#export-csv","title":"<code>export-csv</code>","text":"<p>Export SQLite database to CSV files.</p> <p>Syntax: <pre><code>k8s-analyzer export-csv [OPTIONS] DATABASE DIRECTORY\n</code></pre></p> <p>Arguments: - <code>DATABASE</code> - Path to SQLite database - <code>DIRECTORY</code> - Output directory for CSV files</p> <p>Options: - <code>--tables TABLES</code> - Specific tables to export (comma-separated) - <code>--include-relationships</code> - Include relationships table - <code>--flatten-json</code> - Flatten JSON columns - <code>--delimiter DELIMITER</code> - CSV delimiter (default: comma) - <code>--verbose, -v</code> - Enable verbose logging</p> <p>Examples: <pre><code># Export all tables\nk8s-analyzer export-csv cluster.db ./csv-export\n\n# Export specific tables\nk8s-analyzer export-csv cluster.db ./exports --tables resources,relationships\n\n# Custom delimiter\nk8s-analyzer export-csv cluster.db ./exports --delimiter \";\"\n\n# Flatten JSON columns\nk8s-analyzer export-csv cluster.db ./exports --flatten-json\n</code></pre></p>"},{"location":"analyzer/cli-reference/#environment-variables","title":"Environment Variables","text":"<p>Configure k8s-analyzer behavior using environment variables:</p> <pre><code># Output configuration\nexport K8S_ANALYZER_OUTPUT_DIR=\"./analysis\"\nexport K8S_ANALYZER_LOG_LEVEL=\"INFO\"\n\n# Performance tuning\nexport K8S_ANALYZER_BATCH_SIZE=\"100\"\nexport K8S_ANALYZER_PARALLEL_JOBS=\"4\"\n\n# Database configuration\nexport K8S_ANALYZER_DB_TIMEOUT=\"30\"\nexport K8S_ANALYZER_DB_PRAGMA=\"journal_mode=WAL\"\n</code></pre>"},{"location":"analyzer/cli-reference/#exit-codes","title":"Exit Codes","text":"<p>k8s-analyzer uses the following exit codes:</p> <ul> <li><code>0</code> - Success</li> <li><code>1</code> - General error</li> <li><code>2</code> - Invalid arguments</li> <li><code>3</code> - File not found</li> <li><code>4</code> - Parse error</li> <li><code>5</code> - Database error</li> <li><code>6</code> - Permission error</li> </ul>"},{"location":"analyzer/cli-reference/#performance-tips","title":"Performance Tips","text":""},{"location":"analyzer/cli-reference/#large-clusters","title":"Large Clusters","text":"<pre><code># Use batch processing\nk8s-analyzer sqlite large-cluster.json -o large.db --batch-size 50\n\n# Parallel processing for directories\nk8s-analyzer batch-analyze ./configs --parallel-jobs 4\n</code></pre>"},{"location":"analyzer/cli-reference/#memory-optimization","title":"Memory Optimization","text":"<pre><code># Process files individually\nk8s-analyzer sqlite pods.json -o pods.db\nk8s-analyzer sqlite services.json -o services.db\n\n# Use streaming for very large files\nk8s-analyzer parse huge-cluster.json --stream-processing\n</code></pre>"},{"location":"analyzer/cli-reference/#database-optimization","title":"Database Optimization","text":"<pre><code># Enable compression\nk8s-analyzer sqlite cluster.json -o cluster.db --compress\n\n# Optimize database after creation\nsqlite3 cluster.db \"VACUUM; ANALYZE;\"\n</code></pre>"},{"location":"analyzer/cli-reference/#common-patterns","title":"Common Patterns","text":""},{"location":"analyzer/cli-reference/#daily-cluster-analysis","title":"Daily Cluster Analysis","text":"<pre><code>#!/bin/bash\nDATE=$(date +%Y-%m-%d)\nkubectl get all,pv,pvc,configmaps,secrets -A -o json &gt; \"cluster-${DATE}.json\"\nk8s-analyzer sqlite \"cluster-${DATE}.json\" -o \"analysis-${DATE}.db\" --replace-existing\nk8s-analyzer report \"cluster-${DATE}.json\" -o \"report-${DATE}.html\"\n</code></pre>"},{"location":"analyzer/cli-reference/#multi-environment-analysis","title":"Multi-Environment Analysis","text":"<pre><code># Analyze multiple environments\nk8s-analyzer export-multiple-sqlite \\\n  dev-cluster.json staging-cluster.json prod-cluster.json \\\n  -d multi-env.db --replace-existing\n\n# Generate comparative report\nk8s-analyzer query-db multi-env.db --sql \"\n  SELECT namespace, kind, COUNT(*) as count \n  FROM resources \n  GROUP BY namespace, kind \n  ORDER BY namespace, count DESC\"\n</code></pre>"},{"location":"analyzer/cli-reference/#continuous-integration","title":"Continuous Integration","text":"<pre><code># In CI pipeline\nk8s-analyzer validate manifests/ --severity error --output-format json &gt; validation-results.json\nif [ $? -ne 0 ]; then\n  echo \"Validation failed\"\n  exit 1\nfi\n</code></pre>"},{"location":"analyzer/cli-reference/#troubleshooting","title":"Troubleshooting","text":""},{"location":"analyzer/cli-reference/#common-issues","title":"Common Issues","text":"<p>File Not Found: <pre><code># Check file exists and is readable\nls -la cluster-export.json\nfile cluster-export.json\n</code></pre></p> <p>Parse Errors: <pre><code># Validate JSON/YAML syntax\njq . cluster-export.json &gt; /dev/null\nyamllint cluster-export.yaml\n</code></pre></p> <p>Database Errors: <pre><code># Check database integrity\nsqlite3 cluster.db \"PRAGMA integrity_check;\"\n\n# Repair database if needed\nsqlite3 cluster.db \"VACUUM;\"\n</code></pre></p> <p>Memory Issues: <pre><code># Use smaller batch sizes\nk8s-analyzer sqlite large-cluster.json -o large.db --batch-size 25\n\n# Monitor memory usage\ntime k8s-analyzer analyze cluster.json\n</code></pre></p> <p>For more troubleshooting help, see the Troubleshooting Guide.</p>"},{"location":"analyzer/data-models/","title":"\ud83d\udccb k8s-analyzer Data Models","text":"<p>This document describes the data models and structures used by k8s-analyzer for representing Kubernetes resources, relationships, and analysis results.</p>"},{"location":"analyzer/data-models/#core-data-models","title":"Core Data Models","text":""},{"location":"analyzer/data-models/#kubernetesresource","title":"KubernetesResource","text":"<p>The primary model representing a Kubernetes resource.</p> <pre><code>class KubernetesResource(BaseModel):\n    api_version: str\n    kind: str\n    metadata: ResourceMetadata\n    spec: Dict[str, Any] = Field(default_factory=dict)\n    status: Optional[Dict[str, Any]] = None\n    relationships: List[ResourceRelationship] = Field(default_factory=list)\n    health_status: ResourceStatus = ResourceStatus.UNKNOWN\n    issues: List[str] = Field(default_factory=list)\n</code></pre> <p>Fields: - <code>api_version</code>: Kubernetes API version (e.g., \"v1\", \"apps/v1\") - <code>kind</code>: Resource type (e.g., \"Pod\", \"Service\", \"Deployment\") - <code>metadata</code>: Resource metadata including name, namespace, labels, etc. - <code>spec</code>: Resource specification as defined in Kubernetes - <code>status</code>: Current status of the resource (optional) - <code>relationships</code>: List of relationships to other resources - <code>health_status</code>: Computed health status - <code>issues</code>: List of identified configuration issues</p> <p>Properties: - <code>ref</code>: Returns a ResourceReference for this resource - <code>full_name</code>: Returns namespace/name or just name for cluster-scoped resources</p>"},{"location":"analyzer/data-models/#resourcemetadata","title":"ResourceMetadata","text":"<p>Contains Kubernetes resource metadata.</p> <pre><code>class ResourceMetadata(BaseModel):\n    name: str\n    namespace: Optional[str] = None\n    uid: Optional[str] = None\n    resource_version: Optional[str] = None\n    generation: Optional[int] = None\n    creation_timestamp: Optional[datetime] = None\n    deletion_timestamp: Optional[datetime] = None\n    labels: Dict[str, str] = Field(default_factory=dict)\n    annotations: Dict[str, str] = Field(default_factory=dict)\n    owner_references: List[Dict[str, Any]] = Field(default_factory=list)\n    finalizers: List[str] = Field(default_factory=list)\n</code></pre> <p>Key Fields: - <code>name</code>: Resource name (required) - <code>namespace</code>: Namespace (None for cluster-scoped resources) - <code>uid</code>: Unique identifier assigned by Kubernetes - <code>creation_timestamp</code>: When the resource was created - <code>labels</code>: Key-value pairs for resource identification - <code>annotations</code>: Key-value pairs for additional metadata - <code>owner_references</code>: References to resources that own this resource</p>"},{"location":"analyzer/data-models/#resourcereference","title":"ResourceReference","text":"<p>Lightweight reference to a Kubernetes resource.</p> <pre><code>class ResourceReference(BaseModel):\n    api_version: str\n    kind: str\n    name: str\n    namespace: Optional[str] = None\n    uid: Optional[str] = None\n</code></pre> <p>Usage: - Used in relationships to reference target resources - Provides string representation and hashing for collections - Enables efficient lookups and comparisons</p>"},{"location":"analyzer/data-models/#resourcerelationship","title":"ResourceRelationship","text":"<p>Represents a relationship between two Kubernetes resources.</p> <pre><code>class ResourceRelationship(BaseModel):\n    source: ResourceReference\n    target: ResourceReference\n    relationship_type: RelationshipType\n    direction: RelationshipDirection = RelationshipDirection.OUTBOUND\n    metadata: Dict[str, Any] = Field(default_factory=dict)\n</code></pre> <p>Fields: - <code>source</code>: Source resource reference - <code>target</code>: Target resource reference - <code>relationship_type</code>: Type of relationship (see RelationshipType enum) - <code>direction</code>: Direction of the relationship - <code>metadata</code>: Additional relationship metadata</p>"},{"location":"analyzer/data-models/#enumerations","title":"Enumerations","text":""},{"location":"analyzer/data-models/#relationshiptype","title":"RelationshipType","text":"<p>Defines the types of relationships between resources.</p> <pre><code>class RelationshipType(str, Enum):\n    OWNS = \"owns\"              # Resource owns another (Deployment owns ReplicaSet)\n    USES = \"uses\"              # Resource uses another (Pod uses ConfigMap)\n    EXPOSES = \"exposes\"        # Resource exposes another (Service exposes Pod)\n    BINDS = \"binds\"            # Resource binds to another (PVC binds to PV)\n    REFERENCES = \"references\"   # Resource references another (Pod references ServiceAccount)\n    DEPENDS_ON = \"depends_on\"   # Resource depends on another (Pod depends on Node)\n    MANAGES = \"manages\"         # Resource manages another (ReplicaSet manages Pods)\n    SELECTS = \"selects\"         # Resource selects another (Service selects Pods)\n</code></pre>"},{"location":"analyzer/data-models/#relationshipdirection","title":"RelationshipDirection","text":"<p>Indicates the direction of a relationship.</p> <pre><code>class RelationshipDirection(str, Enum):\n    OUTBOUND = \"outbound\"       # Relationship points away from source\n    INBOUND = \"inbound\"         # Relationship points toward source\n    BIDIRECTIONAL = \"bidirectional\"  # Relationship works both ways\n</code></pre>"},{"location":"analyzer/data-models/#resourcestatus","title":"ResourceStatus","text":"<p>Represents the health status of a resource.</p> <pre><code>class ResourceStatus(str, Enum):\n    HEALTHY = \"healthy\"     # Resource is functioning correctly\n    WARNING = \"warning\"     # Resource has issues but is functional\n    ERROR = \"error\"         # Resource has critical issues\n    UNKNOWN = \"unknown\"     # Resource status cannot be determined\n</code></pre>"},{"location":"analyzer/data-models/#container-data-models","title":"Container Data Models","text":""},{"location":"analyzer/data-models/#clusterstate","title":"ClusterState","text":"<p>Represents the complete analyzed state of a Kubernetes cluster.</p> <pre><code>class ClusterState(BaseModel):\n    resources: List[KubernetesResource] = Field(default_factory=list)\n    relationships: List[ResourceRelationship] = Field(default_factory=list)\n    analysis_timestamp: datetime = Field(default_factory=datetime.now)\n    cluster_info: Dict[str, Any] = Field(default_factory=dict)\n    summary: Dict[str, Any] = Field(default_factory=dict)\n</code></pre> <p>Methods: - <code>add_resource(resource)</code>: Add a resource to the cluster state - <code>get_resources_by_kind(kind)</code>: Get all resources of a specific kind - <code>get_resource_by_ref(ref)</code>: Find a resource by its reference - <code>get_namespaces()</code>: Get all unique namespaces in the cluster - <code>generate_summary()</code>: Generate cluster analysis summary</p>"},{"location":"analyzer/data-models/#entity-relationship-schema","title":"Entity-Relationship Schema","text":"<p>Below is an Entity-Relationship diagram that highlights the primary data models and their connections within k8s-analyzer. This schema helps to visualize how different Kubernetes resources relate to each other and supports deep analysis of the cluster. The ER diagram showcases relationships like ownership, usage, and dependencies between resources.</p>"},{"location":"analyzer/data-models/#er-diagram-overview","title":"ER Diagram Overview","text":"<pre><code>erDiagram\n    KubernetesResource {\n        string api_version\n        string kind\n        json spec\n        json status\n        string health_status\n        string-array issues\n    }\n\n    ResourceMetadata {\n        string name\n        string namespace\n        string uid\n        string resource_version\n        int generation\n        datetime creation_timestamp\n        datetime deletion_timestamp\n        json labels\n        json annotations\n        json owner_references\n        string-array finalizers\n    }\n\n    ResourceRelationship {\n        string relationship_type\n        string direction\n        json metadata\n        datetime created_at\n    }\n\n    ResourceReference {\n        string api_version\n        string kind\n        string name\n        string namespace\n        string uid\n    }\n\n    ClusterState {\n        datetime analysis_timestamp\n        json cluster_info\n        json summary\n    }\n\n    %% Relationships\n    KubernetesResource ||--|| ResourceMetadata : has\n    KubernetesResource ||--o{ ResourceRelationship : source\n    KubernetesResource ||--o{ ResourceRelationship : target\n    ResourceRelationship ||--|| ResourceReference : source_ref\n    ResourceRelationship ||--|| ResourceReference : target_ref\n    ClusterState ||--o{ KubernetesResource : contains\n    ClusterState ||--o{ ResourceRelationship : tracks</code></pre>"},{"location":"analyzer/data-models/#resources-table","title":"Resources Table","text":"<p>Stores all Kubernetes resources with their metadata and analysis results.</p> <pre><code>CREATE TABLE resources (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    uid TEXT UNIQUE,\n    name TEXT NOT NULL,\n    namespace TEXT,\n    kind TEXT NOT NULL,\n    api_version TEXT NOT NULL,\n    health_status TEXT NOT NULL,\n    issues TEXT,  -- JSON array of issue descriptions\n    labels TEXT,  -- JSON object of labels\n    annotations TEXT,  -- JSON object of annotations\n    spec TEXT,    -- JSON object of resource spec\n    status TEXT,  -- JSON object of resource status\n    creation_timestamp DATETIME,\n    deletion_timestamp DATETIME,\n    resource_version TEXT,\n    generation INTEGER,\n    owner_references TEXT,  -- JSON array of owner references\n    finalizers TEXT,  -- JSON array of finalizers\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\n);\n</code></pre> <p>Indexes: <pre><code>CREATE INDEX idx_resources_kind ON resources (kind);\nCREATE INDEX idx_resources_namespace ON resources (namespace);\nCREATE INDEX idx_resources_health_status ON resources (health_status);\nCREATE INDEX idx_resources_creation_timestamp ON resources (creation_timestamp);\nCREATE UNIQUE INDEX idx_resources_uid ON resources (uid);\n</code></pre></p>"},{"location":"analyzer/data-models/#relationships-table","title":"Relationships Table","text":"<p>Stores relationships between resources.</p> <pre><code>CREATE TABLE relationships (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    source_uid TEXT NOT NULL,\n    source_kind TEXT NOT NULL,\n    source_name TEXT NOT NULL,\n    source_namespace TEXT,\n    target_uid TEXT,\n    target_kind TEXT NOT NULL,\n    target_name TEXT NOT NULL,\n    target_namespace TEXT,\n    target_resource TEXT NOT NULL,  -- Full target reference\n    relationship_type TEXT NOT NULL,\n    direction TEXT NOT NULL DEFAULT 'outbound',\n    strength REAL DEFAULT 1.0,\n    metadata TEXT,  -- JSON object of relationship metadata\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (source_uid) REFERENCES resources (uid)\n);\n</code></pre> <p>Indexes: <pre><code>CREATE INDEX idx_relationships_source_uid ON relationships (source_uid);\nCREATE INDEX idx_relationships_target_resource ON relationships (target_resource);\nCREATE INDEX idx_relationships_type ON relationships (relationship_type);\n</code></pre></p>"},{"location":"analyzer/data-models/#resource-health-history-table","title":"Resource Health History Table","text":"<p>Tracks changes in resource health over time.</p> <pre><code>CREATE TABLE resource_health_history (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    resource_uid TEXT NOT NULL,\n    health_status TEXT NOT NULL,\n    issues TEXT,  -- JSON array of issues at this point in time\n    timestamp DATETIME NOT NULL,\n    analysis_run_id TEXT,  -- Optional: link to analysis run\n    FOREIGN KEY (resource_uid) REFERENCES resources (uid)\n);\n</code></pre>"},{"location":"analyzer/data-models/#analysis-summary-table","title":"Analysis Summary Table","text":"<p>Stores high-level analysis metadata and statistics.</p> <pre><code>CREATE TABLE analysis_summary (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    analysis_timestamp DATETIME NOT NULL,\n    analysis_duration_seconds REAL,\n    total_resources INTEGER NOT NULL,\n    total_relationships INTEGER NOT NULL,\n    health_summary TEXT,  -- JSON object with health statistics\n    resource_types TEXT,  -- JSON object with resource type counts\n    namespace_summary TEXT,  -- JSON object with namespace statistics\n    cluster_info TEXT,  -- JSON object with cluster metadata\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n);\n</code></pre>"},{"location":"analyzer/data-models/#relationship-detection-logic","title":"Relationship Detection Logic","text":""},{"location":"analyzer/data-models/#ownership-relationships","title":"Ownership Relationships","text":"<p>Detected through <code>metadata.ownerReferences</code>:</p> <pre><code>def detect_ownership_relationships(resource: KubernetesResource) -&gt; List[ResourceRelationship]:\n    relationships = []\n    for owner_ref in resource.metadata.owner_references:\n        target = ResourceReference(\n            api_version=owner_ref.get(\"apiVersion\"),\n            kind=owner_ref.get(\"kind\"),\n            name=owner_ref.get(\"name\"),\n            namespace=resource.metadata.namespace,\n            uid=owner_ref.get(\"uid\")\n        )\n        relationships.append(ResourceRelationship(\n            source=resource.ref,\n            target=target,\n            relationship_type=RelationshipType.OWNS,\n            direction=RelationshipDirection.INBOUND\n        ))\n    return relationships\n</code></pre>"},{"location":"analyzer/data-models/#usage-relationships","title":"Usage Relationships","text":"<p>Detected through spec analysis:</p> <pre><code>def detect_usage_relationships(resource: KubernetesResource) -&gt; List[ResourceRelationship]:\n    relationships = []\n\n    if resource.kind == \"Pod\":\n        # ConfigMap usage\n        for volume in resource.spec.get(\"volumes\", []):\n            if \"configMap\" in volume:\n                configmap_name = volume[\"configMap\"][\"name\"]\n                target = ResourceReference(\n                    api_version=\"v1\",\n                    kind=\"ConfigMap\",\n                    name=configmap_name,\n                    namespace=resource.metadata.namespace\n                )\n                relationships.append(ResourceRelationship(\n                    source=resource.ref,\n                    target=target,\n                    relationship_type=RelationshipType.USES\n                ))\n\n        # Secret usage\n        for volume in resource.spec.get(\"volumes\", []):\n            if \"secret\" in volume:\n                secret_name = volume[\"secret\"][\"secretName\"]\n                target = ResourceReference(\n                    api_version=\"v1\",\n                    kind=\"Secret\",\n                    name=secret_name,\n                    namespace=resource.metadata.namespace\n                )\n                relationships.append(ResourceRelationship(\n                    source=resource.ref,\n                    target=target,\n                    relationship_type=RelationshipType.USES\n                ))\n\n    return relationships\n</code></pre>"},{"location":"analyzer/data-models/#service-selection-relationships","title":"Service Selection Relationships","text":"<p>Detected through label selectors:</p> <pre><code>def detect_service_relationships(service: KubernetesResource) -&gt; List[ResourceRelationship]:\n    relationships = []\n\n    if service.kind == \"Service\":\n        selector = service.spec.get(\"selector\", {})\n        if selector:\n            # This creates a conceptual relationship\n            # Actual pod matching would require cluster state\n            relationships.append(ResourceRelationship(\n                source=service.ref,\n                target=ResourceReference(\n                    api_version=\"v1\",\n                    kind=\"Pod\",\n                    name=\"*\",  # Wildcard for selector-based relationship\n                    namespace=service.metadata.namespace\n                ),\n                relationship_type=RelationshipType.SELECTS,\n                metadata={\"selector\": selector}\n            ))\n\n    return relationships\n</code></pre>"},{"location":"analyzer/data-models/#health-assessment-logic","title":"Health Assessment Logic","text":""},{"location":"analyzer/data-models/#resource-health-evaluation","title":"Resource Health Evaluation","text":"<pre><code>def assess_resource_health(resource: KubernetesResource) -&gt; Tuple[ResourceStatus, List[str]]:\n    issues = []\n    status = ResourceStatus.HEALTHY\n\n    # Check for deletion timestamp\n    if resource.metadata.deletion_timestamp:\n        issues.append(\"Resource is being deleted\")\n        status = ResourceStatus.WARNING\n\n    # Pod-specific health checks\n    if resource.kind == \"Pod\":\n        pod_status = resource.status.get(\"phase\")\n        if pod_status == \"Failed\":\n            issues.append(\"Pod is in Failed state\")\n            status = ResourceStatus.ERROR\n        elif pod_status == \"Pending\":\n            issues.append(\"Pod is in Pending state\")\n            status = ResourceStatus.WARNING\n\n        # Check container statuses\n        container_statuses = resource.status.get(\"containerStatuses\", [])\n        for container_status in container_statuses:\n            if not container_status.get(\"ready\", False):\n                issues.append(f\"Container {container_status.get('name')} is not ready\")\n                status = max(status, ResourceStatus.WARNING)\n\n            waiting_state = container_status.get(\"state\", {}).get(\"waiting\")\n            if waiting_state:\n                reason = waiting_state.get(\"reason\", \"Unknown\")\n                issues.append(f\"Container {container_status.get('name')} is waiting: {reason}\")\n                if reason in [\"ImagePullBackOff\", \"CrashLoopBackOff\"]:\n                    status = ResourceStatus.ERROR\n\n    # Service-specific health checks\n    elif resource.kind == \"Service\":\n        if not resource.spec.get(\"selector\"):\n            issues.append(\"Service has no selector\")\n            status = ResourceStatus.WARNING\n\n    # ConfigMap/Secret size checks\n    elif resource.kind in [\"ConfigMap\", \"Secret\"]:\n        data = resource.data or {}\n        total_size = sum(len(str(v)) for v in data.values())\n        if total_size &gt; 1048576:  # 1MB\n            issues.append(f\"{resource.kind} is large ({total_size} bytes)\")\n            status = ResourceStatus.WARNING\n\n    return status, issues\n</code></pre>"},{"location":"analyzer/data-models/#data-validation","title":"Data Validation","text":""},{"location":"analyzer/data-models/#pydantic-validators","title":"Pydantic Validators","text":"<pre><code>from pydantic import validator\n\nclass KubernetesResource(BaseModel):\n    # ... fields ...\n\n    @validator('kind')\n    def validate_kind(cls, v):\n        valid_kinds = [\n            'Pod', 'Service', 'ConfigMap', 'Secret', 'PersistentVolume',\n            'PersistentVolumeClaim', 'Deployment', 'ReplicaSet', 'StatefulSet',\n            'DaemonSet', 'Job', 'CronJob', 'Ingress', 'ServiceAccount',\n            'Role', 'RoleBinding', 'ClusterRole', 'ClusterRoleBinding'\n        ]\n        if v not in valid_kinds:\n            raise ValueError(f'Unsupported resource kind: {v}')\n        return v\n\n    @validator('api_version')\n    def validate_api_version(cls, v):\n        if not v or '/' not in v and v not in ['v1']:\n            if not v.startswith(('v1', 'apps/', 'extensions/', 'networking.k8s.io/', 'rbac.authorization.k8s.io/')):\n                raise ValueError(f'Invalid API version: {v}')\n        return v\n</code></pre>"},{"location":"analyzer/data-models/#usage-examples","title":"Usage Examples","text":""},{"location":"analyzer/data-models/#creating-a-resource","title":"Creating a Resource","text":"<pre><code>from k8s_analyzer.models import KubernetesResource, ResourceMetadata, ResourceStatus\n\n# Create a Pod resource\npod = KubernetesResource(\n    api_version=\"v1\",\n    kind=\"Pod\",\n    metadata=ResourceMetadata(\n        name=\"my-pod\",\n        namespace=\"default\",\n        labels={\"app\": \"my-app\"}\n    ),\n    spec={\n        \"containers\": [{\n            \"name\": \"app\",\n            \"image\": \"nginx:latest\"\n        }]\n    },\n    health_status=ResourceStatus.HEALTHY\n)\n</code></pre>"},{"location":"analyzer/data-models/#adding-relationships","title":"Adding Relationships","text":"<pre><code>from k8s_analyzer.models import ResourceRelationship, RelationshipType, ResourceReference\n\n# Create a ConfigMap reference\nconfigmap_ref = ResourceReference(\n    api_version=\"v1\",\n    kind=\"ConfigMap\",\n    name=\"app-config\",\n    namespace=\"default\"\n)\n\n# Add usage relationship\nrelationship = ResourceRelationship(\n    source=pod.ref,\n    target=configmap_ref,\n    relationship_type=RelationshipType.USES\n)\n\npod.relationships.append(relationship)\n</code></pre>"},{"location":"analyzer/data-models/#querying-cluster-state","title":"Querying Cluster State","text":"<pre><code># Find all pods\npods = cluster_state.get_resources_by_kind(\"Pod\")\n\n# Find pods with issues\nproblematic_pods = [\n    pod for pod in pods \n    if pod.health_status in [ResourceStatus.WARNING, ResourceStatus.ERROR]\n]\n\n# Get all namespaces\nnamespaces = cluster_state.get_namespaces()\n\n# Generate summary\nsummary = cluster_state.generate_summary()\nprint(f\"Total resources: {summary['total_resources']}\")\nprint(f\"Resource types: {summary['resource_type_distribution']}\")\n</code></pre> <p>This data model documentation provides a comprehensive understanding of how k8s-analyzer structures and processes Kubernetes data for analysis and reporting.</p>"},{"location":"analyzer/examples/","title":"\ud83d\ude80 k8s-analyzer Examples","text":"<p>This document provides comprehensive examples and use cases for k8s-analyzer, demonstrating real-world scenarios and common workflows.</p>"},{"location":"analyzer/examples/#quick-start-examples","title":"Quick Start Examples","text":""},{"location":"analyzer/examples/#basic-analysis","title":"Basic Analysis","text":"<pre><code># Analyze current cluster\nk8s-analyzer analyze\n\n# Parse local YAML files and analyze\nk8s-analyzer parse ./manifests/ --output cluster-state.json\nk8s-analyzer analyze cluster-state.json --output analysis.json\n\n# Generate a comprehensive report\nk8s-analyzer report analysis.json --format html --output cluster-report.html\n</code></pre>"},{"location":"analyzer/examples/#single-command-workflow","title":"Single Command Workflow","text":"<pre><code># Complete analysis from YAML files to HTML report\nk8s-analyzer parse ./k8s-manifests/ | \\\nk8s-analyzer analyze --stdin | \\\nk8s-analyzer report --stdin --format html --output production-cluster-analysis.html\n</code></pre>"},{"location":"analyzer/examples/#real-world-scenarios","title":"Real-World Scenarios","text":""},{"location":"analyzer/examples/#1-production-cluster-health-check","title":"1. Production Cluster Health Check","text":"<p>Scenario: Daily health assessment of a production Kubernetes cluster.</p> <pre><code>#!/bin/bash\n# production-health-check.sh\n\nDATE=$(date +%Y-%m-%d)\nREPORT_DIR=\"./reports/$DATE\"\nmkdir -p \"$REPORT_DIR\"\n\necho \"\ud83d\udd0d Starting production cluster health check for $DATE\"\n\n# 1. Analyze current cluster state\nk8s-analyzer analyze \\\n    --output \"$REPORT_DIR/cluster-analysis.json\" \\\n    --verbose\n\n# 2. Generate HTML dashboard\nk8s-analyzer report \"$REPORT_DIR/cluster-analysis.json\" \\\n    --format html \\\n    --output \"$REPORT_DIR/health-dashboard.html\" \\\n    --include-graphs\n\n# 3. Export to SQLite for historical tracking\nk8s-analyzer sqlite \"$REPORT_DIR/cluster-analysis.json\" \\\n    --database \"./historical/cluster-health.db\" \\\n    --table-prefix \"prod_$DATE\"\n\n# 4. Generate CSV for spreadsheet analysis\nk8s-analyzer csv \"$REPORT_DIR/cluster-analysis.json\" \\\n    --output \"$REPORT_DIR/resources.csv\" \\\n    --include-relationships\n\n# 5. Check for critical issues\nCRITICAL_ISSUES=$(jq '.resources[] | select(.health_status == \"error\") | length' \"$REPORT_DIR/cluster-analysis.json\")\n\nif [ \"$CRITICAL_ISSUES\" -gt 0 ]; then\n    echo \"\u26a0\ufe0f  Found $CRITICAL_ISSUES critical issues!\"\n\n    # Generate focused report on critical issues\n    k8s-analyzer report \"$REPORT_DIR/cluster-analysis.json\" \\\n        --format json \\\n        --filter \"health_status=error\" \\\n        --output \"$REPORT_DIR/critical-issues.json\"\n\n    # Send alert (integrate with your alerting system)\n    curl -X POST \"https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK\" \\\n        -H 'Content-type: application/json' \\\n        --data \"{\\\"text\\\":\\\"\ud83d\udea8 Production cluster has $CRITICAL_ISSUES critical issues. Check: $REPORT_DIR/health-dashboard.html\\\"}\"\nfi\n\necho \"\u2705 Health check complete. Dashboard: $REPORT_DIR/health-dashboard.html\"\n</code></pre>"},{"location":"analyzer/examples/#2-multi-environment-comparison","title":"2. Multi-Environment Comparison","text":"<p>Scenario: Compare configurations across development, staging, and production environments.</p> <pre><code>#!/bin/bash\n# multi-env-analysis.sh\n\nENVIRONMENTS=(\"dev\" \"staging\" \"prod\")\nBASE_DIR=\"./environment-analysis\"\nmkdir -p \"$BASE_DIR\"\n\nfor ENV in \"${ENVIRONMENTS[@]}\"; do\n    echo \"\ud83d\udd0d Analyzing $ENV environment\"\n\n    # Switch kubectl context\n    kubectl config use-context \"$ENV-cluster\"\n\n    # Analyze environment\n    k8s-analyzer analyze \\\n        --namespace-filter \"app-*\" \\\n        --output \"$BASE_DIR/$ENV-analysis.json\"\n\n    # Generate environment-specific report\n    k8s-analyzer report \"$BASE_DIR/$ENV-analysis.json\" \\\n        --format html \\\n        --output \"$BASE_DIR/$ENV-report.html\" \\\n        --title \"$ENV Environment Analysis\"\ndone\n\n# Generate comparison report\necho \"\ud83d\udcca Generating comparison report\"\npython3 &lt;&lt; EOF\nimport json\nimport pandas as pd\n\nenvironments = ['dev', 'staging', 'prod']\ncomparison_data = []\n\nfor env in environments:\n    with open(f'$BASE_DIR/{env}-analysis.json', 'r') as f:\n        data = json.load(f)\n\n    summary = data.get('summary', {})\n    comparison_data.append({\n        'Environment': env,\n        'Total Resources': summary.get('total_resources', 0),\n        'Healthy': summary.get('health_distribution', {}).get('healthy', 0),\n        'Warning': summary.get('health_distribution', {}).get('warning', 0),\n        'Error': summary.get('health_distribution', {}).get('error', 0),\n        'Namespaces': len(summary.get('namespaces', [])),\n        'Resource Types': len(summary.get('resource_type_distribution', {}))\n    })\n\ndf = pd.DataFrame(comparison_data)\ndf.to_csv('$BASE_DIR/environment-comparison.csv', index=False)\nprint(\"Comparison saved to environment-comparison.csv\")\nEOF\n</code></pre>"},{"location":"analyzer/examples/#3-application-dependency-mapping","title":"3. Application Dependency Mapping","text":"<p>Scenario: Map dependencies for a specific application across namespaces.</p> <pre><code>#!/bin/bash\n# app-dependency-analysis.sh\n\nAPP_NAME=\"ecommerce-app\"\nOUTPUT_DIR=\"./dependency-analysis/$APP_NAME\"\nmkdir -p \"$OUTPUT_DIR\"\n\necho \"\ud83d\udd17 Analyzing dependencies for $APP_NAME\"\n\n# 1. Parse all manifests related to the app\nfind ./manifests/ -name \"*$APP_NAME*\" -type f \\( -name \"*.yaml\" -o -name \"*.yml\" \\) | \\\nk8s-analyzer parse --from-stdin --output \"$OUTPUT_DIR/app-resources.json\"\n\n# 2. Analyze the parsed resources\nk8s-analyzer analyze \"$OUTPUT_DIR/app-resources.json\" \\\n    --output \"$OUTPUT_DIR/app-analysis.json\" \\\n    --focus-on-relationships\n\n# 3. Generate dependency graph\nk8s-analyzer graph \"$OUTPUT_DIR/app-analysis.json\" \\\n    --output \"$OUTPUT_DIR/dependency-graph.dot\" \\\n    --format dot \\\n    --include-external-dependencies\n\n# Convert DOT to SVG for viewing\nif command -v dot &amp;&gt; /dev/null; then\n    dot -Tsvg \"$OUTPUT_DIR/dependency-graph.dot\" -o \"$OUTPUT_DIR/dependency-graph.svg\"\n    echo \"\ud83d\udcca Dependency graph: $OUTPUT_DIR/dependency-graph.svg\"\nfi\n\n# 4. Generate focused report\nk8s-analyzer report \"$OUTPUT_DIR/app-analysis.json\" \\\n    --format html \\\n    --output \"$OUTPUT_DIR/dependency-report.html\" \\\n    --title \"$APP_NAME Dependency Analysis\" \\\n    --include-relationships \\\n    --include-graphs\n\n# 5. Export relationship data for further analysis\njq '.relationships[] | select(.metadata.app_name == \"'$APP_NAME'\")' \\\n    \"$OUTPUT_DIR/app-analysis.json\" &gt; \"$OUTPUT_DIR/app-relationships.json\"\n\necho \"\u2705 Dependency analysis complete for $APP_NAME\"\necho \"\ud83d\udccb Report: $OUTPUT_DIR/dependency-report.html\"\necho \"\ud83d\udd17 Relationships: $OUTPUT_DIR/app-relationships.json\"\n</code></pre>"},{"location":"analyzer/examples/#4-security-compliance-scan","title":"4. Security Compliance Scan","text":"<p>Scenario: Scan cluster for security best practices and compliance issues.</p> <pre><code>#!/bin/bash\n# security-compliance-scan.sh\n\nSCAN_DATE=$(date +%Y-%m-%d_%H-%M-%S)\nSECURITY_DIR=\"./security-scans/$SCAN_DATE\"\nmkdir -p \"$SECURITY_DIR\"\n\necho \"\ud83d\udd12 Starting security compliance scan\"\n\n# 1. Analyze cluster with security focus\nk8s-analyzer analyze \\\n    --output \"$SECURITY_DIR/cluster-analysis.json\" \\\n    --include-security-checks \\\n    --verbose\n\n# 2. Extract security-related issues\njq '.resources[] | select(.issues | length &gt; 0) | {\n    name: .metadata.name,\n    namespace: .metadata.namespace,\n    kind: .kind,\n    issues: .issues,\n    security_score: .security_score // \"unknown\"\n}' \"$SECURITY_DIR/cluster-analysis.json\" &gt; \"$SECURITY_DIR/security-issues.json\"\n\n# 3. Check for common security misconfigurations\npython3 &lt;&lt; 'EOF'\nimport json\nimport sys\n\nwith open(f\"$SECURITY_DIR/cluster-analysis.json\") as f:\n    data = json.load(f)\n\nsecurity_findings = {\n    \"privileged_containers\": [],\n    \"no_resource_limits\": [],\n    \"default_service_accounts\": [],\n    \"hostnetwork_pods\": [],\n    \"root_users\": [],\n    \"no_security_context\": []\n}\n\nfor resource in data.get('resources', []):\n    if resource['kind'] == 'Pod':\n        spec = resource.get('spec', {})\n        containers = spec.get('containers', [])\n\n        # Check for privileged containers\n        for container in containers:\n            security_context = container.get('securityContext', {})\n            if security_context.get('privileged', False):\n                security_findings['privileged_containers'].append({\n                    'name': resource['metadata']['name'],\n                    'namespace': resource['metadata']['namespace'],\n                    'container': container['name']\n                })\n\n            # Check for missing resource limits\n            if 'resources' not in container or 'limits' not in container.get('resources', {}):\n                security_findings['no_resource_limits'].append({\n                    'name': resource['metadata']['name'],\n                    'namespace': resource['metadata']['namespace'],\n                    'container': container['name']\n                })\n\n        # Check for hostNetwork\n        if spec.get('hostNetwork', False):\n            security_findings['hostnetwork_pods'].append({\n                'name': resource['metadata']['name'],\n                'namespace': resource['metadata']['namespace']\n            })\n\n        # Check for default service account usage\n        service_account = spec.get('serviceAccountName', 'default')\n        if service_account == 'default':\n            security_findings['default_service_accounts'].append({\n                'name': resource['metadata']['name'],\n                'namespace': resource['metadata']['namespace']\n            })\n\nwith open(f\"$SECURITY_DIR/security-findings.json\", 'w') as f:\n    json.dump(security_findings, f, indent=2)\n\n# Generate summary\ntotal_issues = sum(len(v) for v in security_findings.values())\nprint(f\"\ud83d\udd0d Security scan complete. Found {total_issues} potential issues.\")\n\nfor category, findings in security_findings.items():\n    if findings:\n        print(f\"  - {category.replace('_', ' ').title()}: {len(findings)} issues\")\nEOF\n\n# 4. Generate security report\nk8s-analyzer report \"$SECURITY_DIR/cluster-analysis.json\" \\\n    --format html \\\n    --output \"$SECURITY_DIR/security-report.html\" \\\n    --title \"Security Compliance Scan - $SCAN_DATE\" \\\n    --filter \"health_status=warning,error\" \\\n    --include-security-recommendations\n\necho \"\u2705 Security scan complete\"\necho \"\ud83d\udccb Report: $SECURITY_DIR/security-report.html\"\necho \"\ud83d\udd0d Findings: $SECURITY_DIR/security-findings.json\"\n</code></pre>"},{"location":"analyzer/examples/#5-migration-planning","title":"5. Migration Planning","text":"<p>Scenario: Analyze resources before a major cluster migration or upgrade.</p> <pre><code>#!/bin/bash\n# migration-planning.sh\n\nMIGRATION_ID=\"v1.28-upgrade-$(date +%Y%m%d)\"\nMIGRATION_DIR=\"./migrations/$MIGRATION_ID\"\nmkdir -p \"$MIGRATION_DIR\"\n\necho \"\ud83d\udccb Planning migration: $MIGRATION_ID\"\n\n# 1. Full cluster analysis\nk8s-analyzer analyze \\\n    --output \"$MIGRATION_DIR/pre-migration-state.json\" \\\n    --include-deprecated-apis \\\n    --include-version-compatibility\n\n# 2. Identify deprecated APIs\njq '.resources[] | select(.api_version | test(\"v1beta1|extensions/v1beta1\")) | {\n    name: .metadata.name,\n    namespace: .metadata.namespace,\n    kind: .kind,\n    api_version: .api_version,\n    replacement_api: .migration_info.replacement_api // \"manual_check_required\"\n}' \"$MIGRATION_DIR/pre-migration-state.json\" &gt; \"$MIGRATION_DIR/deprecated-apis.json\"\n\n# 3. Check for version compatibility issues\npython3 &lt;&lt; 'EOF'\nimport json\n\nwith open(f\"$MIGRATION_DIR/pre-migration-state.json\") as f:\n    data = json.load(f)\n\ncompatibility_issues = []\ntarget_version = \"1.28\"\n\nfor resource in data.get('resources', []):\n    api_version = resource.get('api_version', '')\n    kind = resource.get('kind', '')\n\n    # Check for known compatibility issues\n    issues = []\n\n    if api_version == \"extensions/v1beta1\" and kind == \"Ingress\":\n        issues.append(\"Ingress extensions/v1beta1 removed in v1.22, use networking.k8s.io/v1\")\n\n    if api_version == \"v1beta1\" and kind in [\"CronJob\"]:\n        issues.append(f\"{kind} v1beta1 deprecated, use batch/v1\")\n\n    if resource.get('spec', {}).get('containers'):\n        for container in resource['spec']['containers']:\n            image = container.get('image', '')\n            if ':latest' in image:\n                issues.append(f\"Container {container['name']} uses ':latest' tag, pin to specific version\")\n\n    if issues:\n        compatibility_issues.append({\n            'resource': f\"{resource['metadata']['namespace']}/{resource['metadata']['name']}\",\n            'kind': kind,\n            'api_version': api_version,\n            'issues': issues\n        })\n\nwith open(f\"$MIGRATION_DIR/compatibility-issues.json\", 'w') as f:\n    json.dump(compatibility_issues, f, indent=2)\n\nprint(f\"Found {len(compatibility_issues)} compatibility issues\")\nEOF\n\n# 4. Generate migration checklist\ncat &gt; \"$MIGRATION_DIR/migration-checklist.md\" &lt;&lt; 'EOF'\n# Migration Checklist for $MIGRATION_ID\n\n## Pre-Migration Steps\n- [ ] Backup current cluster state\n- [ ] Review deprecated APIs (see deprecated-apis.json)\n- [ ] Update manifests with compatibility issues\n- [ ] Test applications in staging environment\n- [ ] Prepare rollback plan\n\n## API Version Updates Required\nEOF\n\njq -r '.[] | \"- [ ] Update \\(.kind) \\(.resource) from \\(.api_version)\"' \\\n    \"$MIGRATION_DIR/deprecated-apis.json\" &gt;&gt; \"$MIGRATION_DIR/migration-checklist.md\"\n\ncat &gt;&gt; \"$MIGRATION_DIR/migration-checklist.md\" &lt;&lt; 'EOF'\n\n## Post-Migration Verification\n- [ ] Verify all pods are running\n- [ ] Check service connectivity\n- [ ] Validate persistent volume claims\n- [ ] Run application health checks\n- [ ] Monitor cluster metrics\n\n## Resources\n- Pre-migration state: pre-migration-state.json\n- Compatibility issues: compatibility-issues.json\n- Deprecated APIs: deprecated-apis.json\nEOF\n\n# 5. Generate pre-migration report\nk8s-analyzer report \"$MIGRATION_DIR/pre-migration-state.json\" \\\n    --format html \\\n    --output \"$MIGRATION_DIR/pre-migration-report.html\" \\\n    --title \"Pre-Migration Analysis - $MIGRATION_ID\" \\\n    --include-migration-recommendations\n\necho \"\u2705 Migration planning complete\"\necho \"\ud83d\udccb Checklist: $MIGRATION_DIR/migration-checklist.md\"\necho \"\ud83d\udcca Report: $MIGRATION_DIR/pre-migration-report.html\"\n</code></pre>"},{"location":"analyzer/examples/#cicd-integration-examples","title":"CI/CD Integration Examples","text":""},{"location":"analyzer/examples/#1-github-actions-workflow","title":"1. GitHub Actions Workflow","text":"<pre><code># .github/workflows/k8s-analysis.yml\nname: Kubernetes Analysis\n\non:\n  pull_request:\n    paths:\n      - 'k8s/**'\n      - 'manifests/**'\n  push:\n    branches: [main]\n\njobs:\n  analyze:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Setup k8s-analyzer\n        run: |\n          curl -LO https://github.com/your-org/k8s-analyzer/releases/latest/download/k8s-analyzer-linux\n          chmod +x k8s-analyzer-linux\n          sudo mv k8s-analyzer-linux /usr/local/bin/k8s-analyzer\n\n      - name: Analyze Kubernetes manifests\n        run: |\n          k8s-analyzer parse ./k8s/ --output cluster-state.json\n          k8s-analyzer analyze cluster-state.json --output analysis.json\n          k8s-analyzer validate analysis.json --strict\n\n      - name: Generate report\n        run: |\n          k8s-analyzer report analysis.json --format html --output k8s-analysis-report.html\n          k8s-analyzer csv analysis.json --output resources.csv\n\n      - name: Upload artifacts\n        uses: actions/upload-artifact@v3\n        with:\n          name: k8s-analysis-results\n          path: |\n            k8s-analysis-report.html\n            resources.csv\n            analysis.json\n\n      - name: Comment PR with summary\n        if: github.event_name == 'pull_request'\n        uses: actions/github-script@v6\n        with:\n          script: |\n            const fs = require('fs');\n            const analysis = JSON.parse(fs.readFileSync('analysis.json'));\n            const summary = analysis.summary;\n\n            const comment = `## \ud83d\udd0d Kubernetes Analysis Results\n\n            **Resources Analyzed:** ${summary.total_resources}\n            **Health Status:**\n            - \u2705 Healthy: ${summary.health_distribution.healthy || 0}\n            - \u26a0\ufe0f Warning: ${summary.health_distribution.warning || 0}\n            - \u274c Error: ${summary.health_distribution.error || 0}\n\n            **Resource Types:** ${Object.keys(summary.resource_type_distribution).join(', ')}\n\n            [\ud83d\udcca View Full Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;\n\n            github.rest.issues.createComment({\n              issue_number: context.issue.number,\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              body: comment\n            });\n</code></pre>"},{"location":"analyzer/examples/#2-gitlab-cicd-pipeline","title":"2. GitLab CI/CD Pipeline","text":"<pre><code># .gitlab-ci.yml\nstages:\n  - analyze\n  - report\n  - deploy\n\nvariables:\n  K8S_ANALYZER_VERSION: \"latest\"\n\nk8s-analysis:\n  stage: analyze\n  image: alpine:latest\n  before_script:\n    - apk add --no-cache curl jq\n    - curl -LO https://github.com/your-org/k8s-analyzer/releases/latest/download/k8s-analyzer-linux\n    - chmod +x k8s-analyzer-linux\n    - mv k8s-analyzer-linux /usr/local/bin/k8s-analyzer\n  script:\n    - k8s-analyzer parse ./manifests/ --output cluster-state.json\n    - k8s-analyzer analyze cluster-state.json --output analysis.json\n    - k8s-analyzer validate analysis.json\n    - k8s-analyzer report analysis.json --format html --output k8s-report.html\n    - |\n      CRITICAL_ISSUES=$(jq '.resources[] | select(.health_status == \"error\") | length' analysis.json)\n      if [ \"$CRITICAL_ISSUES\" -gt 0 ]; then\n        echo \"\u274c Found $CRITICAL_ISSUES critical issues!\"\n        exit 1\n      fi\n  artifacts:\n    reports:\n      junit: analysis.json\n    paths:\n      - k8s-report.html\n      - analysis.json\n    expire_in: 1 week\n  only:\n    changes:\n      - manifests/**/*\n      - k8s/**/*\n</code></pre>"},{"location":"analyzer/examples/#advanced-use-cases","title":"Advanced Use Cases","text":""},{"location":"analyzer/examples/#1-automated-resource-optimization","title":"1. Automated Resource Optimization","text":"<pre><code>#!/bin/bash\n# resource-optimization.sh\n\necho \"\ud83d\udd27 Starting resource optimization analysis\"\n\n# Analyze current resource usage\nk8s-analyzer analyze --include-resource-usage --output current-state.json\n\n# Generate optimization recommendations\npython3 &lt;&lt; 'EOF'\nimport json\n\nwith open('current-state.json') as f:\n    data = json.load(f)\n\nrecommendations = []\n\nfor resource in data.get('resources', []):\n    if resource['kind'] == 'Pod':\n        containers = resource.get('spec', {}).get('containers', [])\n\n        for container in containers:\n            requests = container.get('resources', {}).get('requests', {})\n            limits = container.get('resources', {}).get('limits', {})\n\n            # Check for over-provisioning\n            if 'memory' in requests and 'memory' in limits:\n                memory_ratio = int(limits['memory'].rstrip('Mi')) / int(requests['memory'].rstrip('Mi'))\n                if memory_ratio &gt; 4:\n                    recommendations.append({\n                        'type': 'memory_optimization',\n                        'resource': f\"{resource['metadata']['namespace']}/{resource['metadata']['name']}\",\n                        'container': container['name'],\n                        'current_ratio': memory_ratio,\n                        'recommendation': 'Consider reducing memory limits or increasing requests'\n                    })\n\n            # Check for missing resource specifications\n            if not requests:\n                recommendations.append({\n                    'type': 'missing_requests',\n                    'resource': f\"{resource['metadata']['namespace']}/{resource['metadata']['name']}\",\n                    'container': container['name'],\n                    'recommendation': 'Add resource requests for better scheduling'\n                })\n\nwith open('optimization-recommendations.json', 'w') as f:\n    json.dump(recommendations, f, indent=2)\n\nprint(f\"Generated {len(recommendations)} optimization recommendations\")\nEOF\n\nk8s-analyzer report current-state.json \\\n    --format html \\\n    --output optimization-report.html \\\n    --title \"Resource Optimization Analysis\" \\\n    --include-recommendations\n</code></pre>"},{"location":"analyzer/examples/#2-compliance-monitoring","title":"2. Compliance Monitoring","text":"<pre><code>#!/bin/bash\n# compliance-monitoring.sh\n\nCOMPLIANCE_STANDARDS=(\"pci-dss\" \"sox\" \"hipaa\")\nDATE=$(date +%Y-%m-%d)\n\nfor STANDARD in \"${COMPLIANCE_STANDARDS[@]}\"; do\n    echo \"\ud83d\udccb Checking $STANDARD compliance\"\n\n    k8s-analyzer analyze \\\n        --compliance-standard \"$STANDARD\" \\\n        --output \"compliance-$STANDARD-$DATE.json\"\n\n    # Generate compliance report\n    k8s-analyzer report \"compliance-$STANDARD-$DATE.json\" \\\n        --format html \\\n        --output \"compliance-$STANDARD-report-$DATE.html\" \\\n        --title \"$STANDARD Compliance Report\" \\\n        --include-compliance-details\n\n    # Export violations for tracking\n    jq '.compliance_violations // []' \"compliance-$STANDARD-$DATE.json\" \\\n        &gt; \"violations-$STANDARD-$DATE.json\"\ndone\n\n# Generate combined compliance dashboard\nk8s-analyzer report compliance-*-$DATE.json \\\n    --format html \\\n    --output \"combined-compliance-dashboard-$DATE.html\" \\\n    --title \"Multi-Standard Compliance Dashboard\"\n</code></pre>"},{"location":"analyzer/examples/#3-disaster-recovery-planning","title":"3. Disaster Recovery Planning","text":"<pre><code>#!/bin/bash\n# disaster-recovery-analysis.sh\n\necho \"\ud83d\udd04 Analyzing cluster for disaster recovery planning\"\n\n# Full cluster state capture\nk8s-analyzer analyze \\\n    --include-persistent-volumes \\\n    --include-secrets \\\n    --include-configmaps \\\n    --output dr-baseline.json\n\n# Identify critical resources\njq '.resources[] | select(\n    (.metadata.labels.critical == \"true\") or \n    (.metadata.annotations.\"backup.priority\" == \"high\") or\n    (.kind == \"PersistentVolumeClaim\")\n) | {\n    name: .metadata.name,\n    namespace: .metadata.namespace,\n    kind: .kind,\n    priority: (.metadata.annotations.\"backup.priority\" // \"medium\"),\n    dependencies: [.relationships[].target.name]\n}' dr-baseline.json &gt; critical-resources.json\n\n# Generate backup strategy\npython3 &lt;&lt; 'EOF'\nimport json\n\nwith open('dr-baseline.json') as f:\n    data = json.load(f)\n\nbackup_plan = {\n    \"immediate_backup\": [],\n    \"daily_backup\": [],\n    \"weekly_backup\": []\n}\n\nfor resource in data.get('resources', []):\n    priority = resource.get('metadata', {}).get('annotations', {}).get('backup.priority', 'low')\n\n    backup_item = {\n        'name': resource['metadata']['name'],\n        'namespace': resource['metadata']['namespace'],\n        'kind': resource['kind'],\n        'dependencies': [rel['target']['name'] for rel in resource.get('relationships', [])]\n    }\n\n    if priority == 'critical':\n        backup_plan['immediate_backup'].append(backup_item)\n    elif priority == 'high':\n        backup_plan['daily_backup'].append(backup_item)\n    else:\n        backup_plan['weekly_backup'].append(backup_item)\n\nwith open('backup-plan.json', 'w') as f:\n    json.dump(backup_plan, f, indent=2)\nEOF\n\n# Generate DR report\nk8s-analyzer report dr-baseline.json \\\n    --format html \\\n    --output dr-analysis-report.html \\\n    --title \"Disaster Recovery Analysis\" \\\n    --include-backup-recommendations\n\necho \"\u2705 DR analysis complete\"\necho \"\ud83d\udccb Critical resources: critical-resources.json\"\necho \"\ud83d\udd04 Backup plan: backup-plan.json\"\necho \"\ud83d\udcca DR Report: dr-analysis-report.html\"\n</code></pre>"},{"location":"analyzer/examples/#custom-scripts-and-integrations","title":"Custom Scripts and Integrations","text":""},{"location":"analyzer/examples/#1-slack-integration","title":"1. Slack Integration","text":"<pre><code>#!/bin/bash\n# slack-integration.sh\n\nSLACK_WEBHOOK_URL=\"https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK\"\n\n# Analyze cluster\nk8s-analyzer analyze --output daily-analysis.json\n\n# Extract summary\nTOTAL_RESOURCES=$(jq '.summary.total_resources' daily-analysis.json)\nERROR_COUNT=$(jq '.summary.health_distribution.error // 0' daily-analysis.json)\nWARNING_COUNT=$(jq '.summary.health_distribution.warning // 0' daily-analysis.json)\n\n# Prepare Slack message\nif [ \"$ERROR_COUNT\" -gt 0 ]; then\n    STATUS=\"\ud83d\udea8 CRITICAL\"\n    COLOR=\"danger\"\nelif [ \"$WARNING_COUNT\" -gt 0 ]; then\n    STATUS=\"\u26a0\ufe0f WARNING\"\n    COLOR=\"warning\"\nelse\n    STATUS=\"\u2705 HEALTHY\"\n    COLOR=\"good\"\nfi\n\ncurl -X POST \"$SLACK_WEBHOOK_URL\" \\\n    -H 'Content-type: application/json' \\\n    --data \"{\n        \\\"attachments\\\": [{\n            \\\"color\\\": \\\"$COLOR\\\",\n            \\\"title\\\": \\\"Daily Cluster Health Report\\\",\n            \\\"fields\\\": [\n                {\\\"title\\\": \\\"Status\\\", \\\"value\\\": \\\"$STATUS\\\", \\\"short\\\": true},\n                {\\\"title\\\": \\\"Total Resources\\\", \\\"value\\\": \\\"$TOTAL_RESOURCES\\\", \\\"short\\\": true},\n                {\\\"title\\\": \\\"Errors\\\", \\\"value\\\": \\\"$ERROR_COUNT\\\", \\\"short\\\": true},\n                {\\\"title\\\": \\\"Warnings\\\", \\\"value\\\": \\\"$WARNING_COUNT\\\", \\\"short\\\": true}\n            ],\n            \\\"footer\\\": \\\"k8s-analyzer\\\",\n            \\\"ts\\\": $(date +%s)\n        }]\n    }\"\n</code></pre>"},{"location":"analyzer/examples/#2-prometheus-metrics-export","title":"2. Prometheus Metrics Export","text":"<pre><code>#!/bin/bash\n# prometheus-metrics.sh\n\n# Analyze cluster and extract metrics\nk8s-analyzer analyze --output metrics-analysis.json\n\n# Convert to Prometheus format\npython3 &lt;&lt; 'EOF'\nimport json\nfrom datetime import datetime\n\nwith open('metrics-analysis.json') as f:\n    data = json.load(f)\n\ntimestamp = int(datetime.now().timestamp() * 1000)\nsummary = data.get('summary', {})\n\nmetrics = [\n    f\"k8s_analyzer_total_resources {summary.get('total_resources', 0)} {timestamp}\",\n    f\"k8s_analyzer_healthy_resources {summary.get('health_distribution', {}).get('healthy', 0)} {timestamp}\",\n    f\"k8s_analyzer_warning_resources {summary.get('health_distribution', {}).get('warning', 0)} {timestamp}\",\n    f\"k8s_analyzer_error_resources {summary.get('health_distribution', {}).get('error', 0)} {timestamp}\",\n    f\"k8s_analyzer_total_namespaces {len(summary.get('namespaces', []))} {timestamp}\"\n]\n\n# Add per-namespace metrics\nfor ns, count in summary.get('namespace_distribution', {}).items():\n    safe_ns = ns.replace('-', '_').replace('.', '_')\n    metrics.append(f\"k8s_analyzer_namespace_resources{{namespace=\\\"{ns}\\\"}} {count} {timestamp}\")\n\nwith open('k8s_analyzer_metrics.prom', 'w') as f:\n    f.write('\\n'.join(metrics))\n\nprint(\"Metrics exported to k8s_analyzer_metrics.prom\")\nEOF\n\n# Push to Prometheus Pushgateway (if available)\nif command -v curl &amp;&gt; /dev/null &amp;&amp; [ -n \"$PUSHGATEWAY_URL\" ]; then\n    curl -X POST \"$PUSHGATEWAY_URL/metrics/job/k8s_analyzer\" \\\n        --data-binary @k8s_analyzer_metrics.prom\nfi\n</code></pre> <p>This comprehensive examples document demonstrates various real-world scenarios and use cases for k8s-analyzer, from basic analysis to complex CI/CD integrations and custom monitoring solutions.</p>"},{"location":"analyzer/overview/","title":"\ud83d\udd0d k8s-analyzer Overview","text":"<p>The <code>k8s-analyzer</code> is a command-line tool designed to provide deep insight into Kubernetes cluster resources, relationships, and configurations. It extracts, analyzes, and maps Kubernetes resources, providing outputs in various formats for further analysis and visualization.</p>"},{"location":"analyzer/overview/#key-features","title":"Key Features","text":"<ul> <li>Multi-source Data Collection: Supports parsing from <code>kubectl</code> exports, YAML files, and directories.</li> <li>Resource Relationship Mapping: Automatically detects dependencies and connections between resources.</li> <li>Health Assessment: Evaluates health status and identifies configuration issues.</li> <li>Flexible Output Formats: Exports results to JSON, SQLite, and CSV.</li> <li>Comprehensive Command Suite: Includes commands for parsing, analyzing, graphing, and exporting data.</li> </ul>"},{"location":"analyzer/overview/#functional-flow","title":"Functional Flow","text":"<ol> <li>Input Layer: Accepts JSON/YAML from <code>kubectl</code> or other defined sources.</li> <li>Parser Layer: Converts input files into structured data models.</li> <li>Data Model Layer: Creates data models for resources and relationships.</li> <li>Analysis Layer: Maps relationships and conducts health assessments.</li> <li>Output Layer: Exports data to JSON, SQLite, CSV, and HTML formats.</li> </ol>"},{"location":"analyzer/overview/#cli-commands","title":"CLI Commands","text":""},{"location":"analyzer/overview/#basic-commands","title":"Basic Commands","text":"<ul> <li><code>parse [file]</code>: Parse resource data from file.</li> <li><code>analyze [file]</code>: Analyze resources and relationships.</li> <li><code>report [file]</code>: Generate comprehensive HTML analysis report.</li> <li><code>validate [file]</code>: Validate resource configurations.</li> </ul>"},{"location":"analyzer/overview/#export-commands","title":"Export Commands","text":"<ul> <li><code>export_sqlite [file] [db]</code>: Export data to SQLite database.</li> <li><code>export_csv [file] [dir]</code>: Export data to CSV files.</li> </ul>"},{"location":"analyzer/overview/#example-usage","title":"Example Usage","text":"<pre><code># Parse and analyze a cluster export\nk8s-analyzer parse cluster-export.json\nk8s-analyzer analyze cluster-export.json\n\n# Export to a SQLite database\nk8s-analyzer export_sqlite cluster-export.json cluster-analysis.db\n\n# Generate an HTML report\nk8s-analyzer report cluster-export.json --output cluster-report.html\n</code></pre>"},{"location":"analyzer/overview/#advanced-use-cases","title":"Advanced Use Cases","text":""},{"location":"analyzer/overview/#batch-processing","title":"Batch Processing","text":"<pre><code># Analyze all YAML files in a directory\nk8s-analyzer batch-analyze ./manifests --output batch-report.json\n\n# Export an entire directory to SQLite\nk8s-analyzer export_directory_sqlite ./manifests cluster.db\n</code></pre>"},{"location":"analyzer/overview/#namespace-filtering","title":"Namespace Filtering","text":"<pre><code># Analyze resources in a specific namespace\nk8s-analyzer analyze cluster-export.json --namespace production\n</code></pre>"},{"location":"analyzer/overview/#health-and-compliance","title":"Health and Compliance","text":"<pre><code># Validate overall configuration health\nk8s-analyzer validate cluster-export.json\n\n# Generate compliance report\nk8s-analyzer report cluster-export.json --output compliance-report.html\n</code></pre>"},{"location":"analyzer/overview/#supported-resource-types","title":"Supported Resource Types","text":"<ul> <li>Pod - Running workloads</li> <li>Service - Network endpoints</li> <li>ConfigMap - Configuration data</li> <li>PersistentVolumeClaim - Storage requests</li> <li>Ingress - External access</li> <li>ServiceAccount - Pod identity and authentication</li> </ul>"},{"location":"analyzer/overview/#development-workflow","title":"Development Workflow","text":"<pre><code># Clone the repository\ngit clone https://github.com/k8s-tools/k8s-analyzer.git\ncd k8s-analyzer\n\n# Install development dependencies\nuv sync --extras dev\n\n# Run tests\nuv run pytest\n\n# Format and lint code\nuv run black src tests\nuv run flake8 src tests\n</code></pre>"},{"location":"analyzer/overview/#contributing","title":"Contributing","text":"<p>We welcome contributions! Here's how to get started:</p> <ol> <li>Fork the repository and clone your fork.</li> <li>Create a feature branch for your changes.</li> <li>Develop and test your features.</li> <li>Submit a pull request to merge your changes.</li> </ol>"},{"location":"deployment/cicd/","title":"CI/CD Integration","text":"<p>This guide covers integrating K8s Tools into continuous integration and continuous deployment (CI/CD) pipelines using GitHub Actions, Jenkins, and GitLab CI.</p>"},{"location":"deployment/cicd/#overview","title":"Overview","text":"<p>CI/CD integration provides:</p> <ul> <li>Automation: Streamlined workflows from code commit to deployment</li> <li>Consistency: Reproducible environments and deployments</li> <li>Monitoring and Feedback: Real-time insights through automated tests and reports</li> </ul>"},{"location":"deployment/cicd/#github-actions","title":"GitHub Actions","text":""},{"location":"deployment/cicd/#setting-up-github-actions","title":"Setting Up GitHub Actions","text":"<p>Create a workflow file in <code>.github/workflows/ci.yml</code>:</p> <pre><code>name: K8s Tools CI\n\non: [push, pull_request]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: '3.x'\n    - name: Install Dependencies\n      run: |\n        pip install uv\n        uv sync --dev\n    - name: Run Tests\n      run: |\n        pytest --cov=.\n\n  deploy:\n    runs-on: ubuntu-latest\n    needs: build\n    steps:\n    - name: Deploy to K8s\n      run: |\n        kubectl apply -f k8s-tools-deployment.yaml\n</code></pre>"},{"location":"deployment/cicd/#triggers-and-conditions","title":"Triggers and Conditions","text":"<ul> <li>Push: Run on every push to main</li> <li>Pull Request: Validate changes in PRs</li> <li>Scheduled: Use cron for scheduled runs</li> </ul>"},{"location":"deployment/cicd/#jenkins-pipeline","title":"Jenkins Pipeline","text":""},{"location":"deployment/cicd/#creating-a-jenkinsfile","title":"Creating a Jenkinsfile","text":"<p>Create <code>Jenkinsfile</code> in the root of your repository:</p> <pre><code>pipeline {\n    agent any\n    stages {\n        stage('Build') {\n            steps {\n                sh 'uv sync --dev'\n            }\n        }\n        stage('Test') {\n            steps {\n                sh 'pytest --cov=.'\n            }\n        }\n        stage('Deploy') {\n            steps {\n                sh 'kubectl apply -f k8s-tools-deployment.yaml'\n            }\n        }\n    }\n    post {\n        success {\n            echo 'Pipeline successfully completed.'\n        }\n        failure {\n            echo 'Pipeline failed.'\n        }\n    }\n}\n</code></pre>"},{"location":"deployment/cicd/#configuring-jenkins","title":"Configuring Jenkins","text":"<ol> <li>Install Plugins: GitHub, Kubernetes CLI</li> <li>Configure Credentials: Setup kubeconfig for deployment</li> <li>Create Pipelines: Use the Jenkinsfile above</li> </ol>"},{"location":"deployment/cicd/#gitlab-cicd","title":"GitLab CI/CD","text":""},{"location":"deployment/cicd/#example-gitlab-ciyml","title":"Example .gitlab-ci.yml","text":"<p>Create <code>.gitlab-ci.yml</code> in the root of your repository:</p> <pre><code>stages:\n  - build\n  - test\n  - deploy\n\nvariables:\n  KUBECONFIG: /kube/config\n\nbuild:\n  stage: build\n  image: python:3.11\n  script:\n    - pip install uv\n    - uv sync --dev\n\nunit_tests:\n  stage: test\n  image: python:3.11\n  script:\n    - pytest --cov=.\n\ndeploy:\n  stage: deploy\n  image: registry.gitlab.com/gitlab-org/cloud-build\n  script:\n    - kubectl apply -f k8s-tools-deployment.yaml\n</code></pre>"},{"location":"deployment/cicd/#environment-management","title":"Environment Management","text":""},{"location":"deployment/cicd/#secrets-management","title":"Secrets Management","text":"<ul> <li>GitHub Secrets: Manage sensitive data in GitHub Actions</li> <li>Jenkins Credentials: Securely store kubeconfig and other secrets</li> <li>GitLab Variables: Store environment-specific configurations</li> </ul>"},{"location":"deployment/cicd/#dependency-management","title":"Dependency Management","text":"<p>Use dependency management tools to ensure reproducibility:</p> <ul> <li>pipx: Isolated Python version management</li> <li>uv: Fast and consistent dependency installation</li> </ul>"},{"location":"deployment/cicd/#monitoring-and-alerts","title":"Monitoring and Alerts","text":""},{"location":"deployment/cicd/#real-time-monitoring","title":"Real-Time Monitoring","text":"<p>Integrate with monitoring solutions to track deployment status:</p> <ul> <li>Prometheus/Grafana: Visualize deployment metrics</li> <li>Slack Notifications: Receive alerts via Slack for build/deployments</li> </ul>"},{"location":"deployment/cicd/#status-dashboards","title":"Status Dashboards","text":"<p>Create custom dashboards in Jenkins and GitLab to report CI/CD status:</p> <ul> <li>Build Status: Track latest build state</li> <li>Test Coverage: Ensure sufficient test coverage</li> <li>Deployment Success: Confirm successful deployments</li> </ul>"},{"location":"deployment/cicd/#best-practices","title":"Best Practices","text":"<ol> <li>Reusable Workflows: Modularize CI/CD scripts</li> <li>Parallel Stages: Optimize build/test times</li> <li>Rollback Plans: Prepare for easy rollback in deployments</li> <li>Continuous Improvement: Keep pipelines updated</li> </ol>"},{"location":"deployment/cicd/#related-documentation","title":"Related Documentation","text":"<ul> <li>Setup Guide</li> <li>Kubernetes Deployment</li> <li>Docker Deployment</li> </ul>"},{"location":"deployment/docker/","title":"Docker Deployment","text":"<p>This guide covers running K8s Tools using Docker containers, including building custom images and deployment strategies.</p>"},{"location":"deployment/docker/#overview","title":"Overview","text":"<p>Docker deployment provides:</p> <ul> <li>Isolated Environment: Clean runtime environment</li> <li>Consistent Execution: Same behavior across platforms</li> <li>Easy Distribution: Simple image sharing and deployment</li> <li>CI/CD Integration: Seamless pipeline integration</li> </ul>"},{"location":"deployment/docker/#quick-start","title":"Quick Start","text":""},{"location":"deployment/docker/#using-pre-built-images","title":"Using Pre-built Images","text":"<p>Pull and run the official K8s Tools Docker image:</p> <pre><code># Pull the latest image\ndocker pull k8stools/k8s-tools:latest\n\n# Run cluster analysis\ndocker run --rm \\\n  -v ~/.kube:/root/.kube:ro \\\n  -v $(pwd)/reports:/app/reports \\\n  k8stools/k8s-tools:latest analyze --view cluster-overview\n</code></pre>"},{"location":"deployment/docker/#available-tags","title":"Available Tags","text":"<ul> <li><code>latest</code>: Latest stable release</li> <li><code>v1.0.0</code>: Specific version tags</li> <li><code>dev</code>: Development builds (bleeding edge)</li> </ul>"},{"location":"deployment/docker/#building-custom-images","title":"Building Custom Images","text":""},{"location":"deployment/docker/#basic-dockerfile","title":"Basic Dockerfile","text":"<pre><code>FROM python:3.11-slim\n\n# Install system dependencies\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    git \\\n    curl \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Set working directory\nWORKDIR /app\n\n# Install uv for fast dependency management\nRUN pip install uv\n\n# Copy project files\nCOPY pyproject.toml uv.lock ./\nCOPY src/ src/\nCOPY README.md ./\n\n# Install dependencies and application\nRUN uv sync --no-dev\nRUN uv pip install -e .\n\n# Create non-root user\nRUN useradd -m -u 1000 k8stools\nUSER k8stools\n\n# Set entry point\nENTRYPOINT [\"k8s-analyzer\"]\nCMD [\"--help\"]\n</code></pre>"},{"location":"deployment/docker/#multi-stage-build","title":"Multi-stage Build","text":"<pre><code># Build stage\nFROM python:3.11-slim as builder\n\nWORKDIR /app\nRUN pip install uv\n\nCOPY pyproject.toml uv.lock ./\nCOPY src/ src/\nRUN uv sync --no-dev\n\n# Runtime stage\nFROM python:3.11-slim\n\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    curl \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/* \\\n    &amp;&amp; useradd -m -u 1000 k8stools\n\nWORKDIR /app\nCOPY --from=builder /app/.venv /app/.venv\nCOPY --from=builder /app/src /app/src\n\nUSER k8stools\nENV PATH=\"/app/.venv/bin:$PATH\"\n\nENTRYPOINT [\"k8s-analyzer\"]\n</code></pre>"},{"location":"deployment/docker/#building-the-image","title":"Building the Image","text":"<pre><code># Build with default tag\ndocker build -t k8s-tools .\n\n# Build with specific tag\ndocker build -t k8s-tools:v1.0.0 .\n\n# Build with build arguments\ndocker build \\\n  --build-arg PYTHON_VERSION=3.11 \\\n  -t k8s-tools:python3.11 .\n</code></pre>"},{"location":"deployment/docker/#running-containers","title":"Running Containers","text":""},{"location":"deployment/docker/#basic-usage","title":"Basic Usage","text":"<pre><code># Simple cluster analysis\ndocker run --rm \\\n  -v ~/.kube:/root/.kube:ro \\\n  k8s-tools analyze\n\n# With custom configuration\ndocker run --rm \\\n  -v ~/.kube:/root/.kube:ro \\\n  -v $(pwd)/config.yaml:/app/config.yaml:ro \\\n  k8s-tools analyze --config /app/config.yaml\n</code></pre>"},{"location":"deployment/docker/#volume-mounts","title":"Volume Mounts","text":""},{"location":"deployment/docker/#kubeconfig-mount","title":"Kubeconfig Mount","text":"<pre><code># Read-only kubeconfig mount\n-v ~/.kube:/root/.kube:ro\n\n# Custom kubeconfig location\n-v /path/to/kubeconfig:/app/kubeconfig:ro\n</code></pre>"},{"location":"deployment/docker/#output-directory","title":"Output Directory","text":"<pre><code># Mount output directory\n-v $(pwd)/reports:/app/reports\n\n# With specific permissions\n-v $(pwd)/reports:/app/reports:Z  # SELinux\n</code></pre>"},{"location":"deployment/docker/#configuration-files","title":"Configuration Files","text":"<pre><code># Configuration file\n-v $(pwd)/config.yaml:/app/config.yaml:ro\n\n# Configuration directory\n-v $(pwd)/configs:/app/configs:ro\n</code></pre>"},{"location":"deployment/docker/#environment-variables","title":"Environment Variables","text":"<pre><code># Set log level\ndocker run --rm \\\n  -e LOG_LEVEL=DEBUG \\\n  -v ~/.kube:/root/.kube:ro \\\n  k8s-tools analyze\n\n# Override kubeconfig path\ndocker run --rm \\\n  -e KUBECONFIG=/app/kubeconfig \\\n  -v ~/.kube/config:/app/kubeconfig:ro \\\n  k8s-tools analyze\n</code></pre>"},{"location":"deployment/docker/#docker-compose","title":"Docker Compose","text":""},{"location":"deployment/docker/#basic-compose-file","title":"Basic Compose File","text":"<pre><code># docker-compose.yml\nversion: '3.8'\n\nservices:\n  k8s-analyzer:\n    image: k8stools/k8s-tools:latest\n    volumes:\n      - ~/.kube:/root/.kube:ro\n      - ./reports:/app/reports\n      - ./config.yaml:/app/config.yaml:ro\n    environment:\n      - LOG_LEVEL=INFO\n    command: [\"analyze\", \"--config\", \"/app/config.yaml\"]\n\n  k8s-reporter:\n    image: k8stools/k8s-tools:latest\n    volumes:\n      - ./reports:/app/reports:ro\n      - ./output:/app/output\n    command: [\"report\", \"--input\", \"/app/reports\", \"--output\", \"/app/output\"]\n    depends_on:\n      - k8s-analyzer\n</code></pre>"},{"location":"deployment/docker/#running-with-compose","title":"Running with Compose","text":"<pre><code># Run analysis\ndocker-compose up k8s-analyzer\n\n# Run full pipeline\ndocker-compose up\n\n# Run in background\ndocker-compose up -d\n\n# View logs\ndocker-compose logs -f k8s-analyzer\n</code></pre>"},{"location":"deployment/docker/#advanced-configurations","title":"Advanced Configurations","text":""},{"location":"deployment/docker/#multi-cluster-analysis","title":"Multi-cluster Analysis","text":"<pre><code># docker-compose.multi-cluster.yml\nversion: '3.8'\n\nservices:\n  analyze-prod:\n    image: k8stools/k8s-tools:latest\n    volumes:\n      - ./kubeconfigs/prod-config:/root/.kube/config:ro\n      - ./reports/prod:/app/reports\n    command: [\"analyze\", \"--cluster\", \"production\"]\n\n  analyze-staging:\n    image: k8stools/k8s-tools:latest\n    volumes:\n      - ./kubeconfigs/staging-config:/root/.kube/config:ro\n      - ./reports/staging:/app/reports\n    command: [\"analyze\", \"--cluster\", \"staging\"]\n\n  consolidate-reports:\n    image: k8stools/k8s-tools:latest\n    volumes:\n      - ./reports:/app/reports:ro\n      - ./output:/app/output\n    command: [\"report\", \"--multi-cluster\", \"/app/reports\", \"--output\", \"/app/output\"]\n    depends_on:\n      - analyze-prod\n      - analyze-staging\n</code></pre>"},{"location":"deployment/docker/#scheduled-analysis","title":"Scheduled Analysis","text":"<pre><code># docker-compose.scheduled.yml\nversion: '3.8'\n\nservices:\n  scheduler:\n    image: k8stools/k8s-tools:latest\n    volumes:\n      - ~/.kube:/root/.kube:ro\n      - ./reports:/app/reports\n      - ./scripts:/app/scripts\n    environment:\n      - SCHEDULE=\"0 */4 * * *\"  # Every 4 hours\n    command: [\"/app/scripts/scheduled-analysis.sh\"]\n    restart: unless-stopped\n</code></pre>"},{"location":"deployment/docker/#security-considerations","title":"Security Considerations","text":""},{"location":"deployment/docker/#running-as-non-root","title":"Running as Non-root","text":"<pre><code># Create non-root user\nRUN useradd -m -u 1000 k8stools\nUSER k8stools\n</code></pre>"},{"location":"deployment/docker/#read-only-filesystem","title":"Read-only Filesystem","text":"<pre><code>docker run --rm \\\n  --read-only \\\n  -v ~/.kube:/root/.kube:ro \\\n  -v $(pwd)/tmp:/tmp \\\n  k8s-tools analyze\n</code></pre>"},{"location":"deployment/docker/#security-scanning","title":"Security Scanning","text":"<pre><code># Scan image for vulnerabilities\ndocker run --rm \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  aquasec/trivy image k8s-tools:latest\n</code></pre>"},{"location":"deployment/docker/#performance-optimization","title":"Performance Optimization","text":""},{"location":"deployment/docker/#resource-limits","title":"Resource Limits","text":"<pre><code>services:\n  k8s-analyzer:\n    image: k8stools/k8s-tools:latest\n    deploy:\n      resources:\n        limits:\n          cpus: '2.0'\n          memory: 4G\n        reservations:\n          cpus: '1.0'\n          memory: 2G\n</code></pre>"},{"location":"deployment/docker/#caching","title":"Caching","text":"<pre><code># Use build cache\nFROM python:3.11-slim\n\n# Cache dependencies separately\nCOPY pyproject.toml uv.lock ./\nRUN uv sync --no-dev\n\n# Copy source code last\nCOPY src/ src/\n</code></pre>"},{"location":"deployment/docker/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment/docker/#common-issues","title":"Common Issues","text":""},{"location":"deployment/docker/#permission-errors","title":"Permission Errors","text":"<pre><code># Fix ownership issues\ndocker run --rm \\\n  --user $(id -u):$(id -g) \\\n  -v ~/.kube:/root/.kube:ro \\\n  k8s-tools analyze\n</code></pre>"},{"location":"deployment/docker/#network-access","title":"Network Access","text":"<pre><code># Use host networking for cluster access\ndocker run --rm \\\n  --network host \\\n  -v ~/.kube:/root/.kube:ro \\\n  k8s-tools analyze\n</code></pre>"},{"location":"deployment/docker/#debugging","title":"Debugging","text":"<pre><code># Run with debug output\ndocker run --rm \\\n  -e LOG_LEVEL=DEBUG \\\n  -v ~/.kube:/root/.kube:ro \\\n  k8s-tools analyze --verbose\n\n# Interactive debugging\ndocker run -it --rm \\\n  -v ~/.kube:/root/.kube:ro \\\n  k8s-tools bash\n</code></pre>"},{"location":"deployment/docker/#cicd-integration","title":"CI/CD Integration","text":""},{"location":"deployment/docker/#github-actions","title":"GitHub Actions","text":"<pre><code># .github/workflows/analysis.yml\nname: Cluster Analysis\n\non:\n  schedule:\n    - cron: '0 6 * * *'  # Daily at 6 AM\n\njobs:\n  analyze:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Run K8s Analysis\n        run: |\n          docker run --rm \\\n            -v ${{ github.workspace }}/reports:/app/reports \\\n            -e KUBECONFIG_DATA=\"${{ secrets.KUBECONFIG }}\" \\\n            k8stools/k8s-tools:latest \\\n            sh -c 'echo \"$KUBECONFIG_DATA\" &gt; /tmp/kubeconfig &amp;&amp; k8s-analyzer analyze --kubeconfig /tmp/kubeconfig'\n\n      - name: Upload Reports\n        uses: actions/upload-artifact@v4\n        with:\n          name: cluster-reports\n          path: reports/\n</code></pre>"},{"location":"deployment/docker/#jenkins-pipeline","title":"Jenkins Pipeline","text":"<pre><code>pipeline {\n    agent any\n\n    stages {\n        stage('Cluster Analysis') {\n            steps {\n                sh '''\n                    docker run --rm \\\n                        -v \"${WORKSPACE}/reports:/app/reports\" \\\n                        -v ~/.kube:/root/.kube:ro \\\n                        k8stools/k8s-tools:latest analyze\n                '''\n            }\n        }\n\n        stage('Archive Reports') {\n            steps {\n                archiveArtifacts artifacts: 'reports/**/*'\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"deployment/docker/#best-practices","title":"Best Practices","text":""},{"location":"deployment/docker/#image-management","title":"Image Management","text":"<ol> <li>Use specific tags instead of <code>latest</code> in production</li> <li>Implement health checks for long-running containers</li> <li>Keep images small using multi-stage builds</li> <li>Scan for vulnerabilities regularly</li> <li>Use distroless images when possible</li> </ol>"},{"location":"deployment/docker/#configuration-management","title":"Configuration Management","text":"<ol> <li>Use environment variables for runtime configuration</li> <li>Mount configuration files as read-only volumes</li> <li>Validate configuration before running analysis</li> <li>Store sensitive data in secrets management systems</li> </ol>"},{"location":"deployment/docker/#monitoring","title":"Monitoring","text":"<pre><code># Container health check\ndocker run --rm \\\n  --health-cmd=\"k8s-analyzer --version\" \\\n  --health-interval=30s \\\n  k8s-tools analyze\n</code></pre>"},{"location":"deployment/docker/#related-documentation","title":"Related Documentation","text":"<ul> <li>Installation Guide</li> <li>Kubernetes Deployment</li> <li>CI/CD Integration</li> </ul> <p> RULE 9aelDXM62tUDmHUQUL8XlE RULE mHRxidOov0WLb90jeiS2uG </p>"},{"location":"deployment/installation/","title":"Installation","text":"<p>This document provides detailed instructions for installing K8s Tools, including system requirements, installation steps, and initial setup guidelines.</p>"},{"location":"deployment/installation/#system-requirements","title":"System Requirements","text":"<ul> <li>Operating System: Windows, macOS, or Linux</li> <li>Python Version: &gt;= 3.10</li> <li>Kubernetes Cluster: Version &gt;= 1.21 (for Kubernetes resources)</li> <li>Access: Ability to access the Kubernetes API server</li> </ul>"},{"location":"deployment/installation/#installation-options","title":"Installation Options","text":""},{"location":"deployment/installation/#using-pipx","title":"Using pipx","text":"<p>We recommend using pipx for isolated installations. If pipx is not installed, you can install it first:</p> <pre><code>python3 -m pip install --user pipx\npython3 -m pipx ensurepath\n</code></pre> <p>To install K8s Tools using pipx:</p> <pre><code>pipx install k8s-tools\n</code></pre>"},{"location":"deployment/installation/#using-pip","title":"Using pip","text":"<p>Alternatively, you can install K8s Tools directly with pip:</p> <pre><code>pip install k8s-tools\n</code></pre>"},{"location":"deployment/installation/#from-source","title":"From Source","text":"<p>To install from source, clone the repository and install using pip:</p> <pre><code>git clone https://github.com/k8s-tools/k8s-tools.git\ncd k8s-tools\npip install .\n</code></pre>"},{"location":"deployment/installation/#using-docker","title":"Using Docker","text":"<p>K8s Tools can also be run in a Docker container:</p> <pre><code># Pull Docker image\ndocker pull k8stools/k8s-tools\n\n# Run container\ndocker run -it --rm -v ~/.kube:/home/user/.kube k8stools/k8s-tools analyze\n</code></pre>"},{"location":"deployment/installation/#setup-and-configuration","title":"Setup and Configuration","text":""},{"location":"deployment/installation/#kubernetes-configuration","title":"Kubernetes Configuration","text":"<p>Ensure that your <code>kubeconfig</code> is set up correctly:</p> <ul> <li>By default, K8s Tools uses the kubeconfig located at <code>~/.kube/config</code></li> <li>You can specify a different kubeconfig path with the <code>--kubeconfig</code> option:</li> </ul> <pre><code>k8s-tools analyze --kubeconfig /path/to/config\n</code></pre>"},{"location":"deployment/installation/#environment-variables","title":"Environment Variables","text":"<p>You may set environment variables to customize behavior:</p> <ul> <li><code>K8S_TOOLS_CONFIG</code> - Path to the configuration file</li> <li><code>KUBECONFIG</code> - Override kubeconfig location</li> </ul>"},{"location":"deployment/installation/#pre-commit-hooks","title":"Pre-Commit Hooks","text":"<p>Set up pre-commit hooks for development:</p> <pre><code>pre-commit install\n</code></pre>"},{"location":"deployment/installation/#initial-testing","title":"Initial Testing","text":"<p>Run initial tests to verify installation:</p> <pre><code># Run unit tests\npytest\ntest/test_initialization.py\n\n# Check version\nk8s-tools --version\n</code></pre>"},{"location":"deployment/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment/installation/#common-issues","title":"Common Issues","text":"<ul> <li>Dependency Resolution: Conflicts with existing packages</li> <li> <p>Use <code>pip check</code> to identify conflicts</p> </li> <li> <p>Kubeconfig Errors: Issues with Kubernetes configuration</p> </li> <li>Ensure the correct context is set in kubeconfig</li> </ul>"},{"location":"deployment/installation/#getting-help","title":"Getting Help","text":"<ul> <li>Documentation: Refer to detailed usage guides and examples</li> <li>Community Support: Reach out via GitHub issues or discussions</li> </ul>"},{"location":"deployment/installation/#uninstallation","title":"Uninstallation","text":"<p>To remove K8s Tools:</p> <pre><code>pipx uninstall k8s-tools\n# or if installed with pip\npip uninstall k8s-tools\n</code></pre>"},{"location":"deployment/installation/#related-resources","title":"Related Resources","text":"<ul> <li>Quick Start Guide</li> <li>Changelog</li> <li>Usage Examples</li> </ul> <p>0citations1 0document1 0document_type1RULE0/document_type1 0document_id1mHRxidOov0WLb90jeiS2uG0/document_id1 0/document1 0document1 0document_type1RULE0/document_type1 0document_id1FtUk1rgWdKE6veAClNpAqC0/document_id1 0/document1 0/citations1</p>"},{"location":"deployment/kubernetes/","title":"Kubernetes Deployment [planned/on study]","text":"<p>This guide covers deploying K8s Tools on a Kubernetes cluster, including helm chart setup, configurations, and deployment strategies.</p>"},{"location":"deployment/kubernetes/#overview","title":"Overview","text":"<p>Kubernetes deployment provides:</p> <ul> <li>Scalability: Efficient resource utilization</li> <li>High Availability: Robustness and fault tolerance</li> <li>Integration: Seamless operation with other Kubernetes workloads</li> </ul>"},{"location":"deployment/kubernetes/#prerequisites","title":"Prerequisites","text":"<ul> <li>Kubernetes Cluster: Version 1.21+</li> <li>Helm: Version 3+</li> <li>kubectl: Configured to access the target cluster</li> </ul>"},{"location":"deployment/kubernetes/#helm-chart-deployment","title":"Helm Chart Deployment","text":""},{"location":"deployment/kubernetes/#adding-helm-repository","title":"Adding Helm Repository","text":"<p>Add the K8s Tools Helm repository:</p> <pre><code>helm repo add k8s-tools https://k8s-tools.github.io/helm-charts\nhelm repo update\n</code></pre>"},{"location":"deployment/kubernetes/#installing-the-chart","title":"Installing the Chart","text":"<p>Install the K8s Tools chart with default values:</p> <pre><code>helm install k8s-tools k8s-tools/k8s-tools --namespace tools\n</code></pre>"},{"location":"deployment/kubernetes/#customizing-values","title":"Customizing Values","text":"<p>Customize the deployment using a <code>values.yaml</code> file:</p> <pre><code>replicaCount: 1\nresourceLimits:\n  cpu: \"1000m\"\n  memory: \"512Mi\"\n\nservice:\n  type: NodePort\n  port: 8080\n  nodePort: 31000\n\nconfig:\n  kubeConfig: \"/config/kubeconfig\"\n\nfeatureFlags:\n  enableBatchProcessing: true\n</code></pre> <p>Apply the custom values:</p> <pre><code>helm upgrade k8s-tools k8s-tools/k8s-tools --namespace tools -f values.yaml\n</code></pre>"},{"location":"deployment/kubernetes/#deploying-with-manifests","title":"Deploying with Manifests","text":""},{"location":"deployment/kubernetes/#basic-deployment-manifest","title":"Basic Deployment Manifest","text":"<pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: k8s-tools\n  namespace: tools\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app: k8s-tools\n  template:\n    metadata:\n      labels:\n        app: k8s-tools\n    spec:\n      containers:\n      - name: k8s-tools\n        image: k8stools/k8s-tools:latest\n        ports:\n        - containerPort: 8080\n        resources:\n          limits:\n            cpu: \"500m\"\n            memory: \"256Mi\"\n        volumeMounts:\n        - name: kubeconfig\n          mountPath: /config\n      volumes:\n      - name: kubeconfig\n        configMap:\n          name: kube-config\n</code></pre>"},{"location":"deployment/kubernetes/#service-manifest","title":"Service Manifest","text":"<p>Expose the application using a LoadBalancer or NodePort:</p> <pre><code>apiVersion: v1\nkind: Service\nmetadata:\n  name: k8s-tools\n  namespace: tools\nspec:\n  type: LoadBalancer\n  ports:\n  - port: 8080\n    targetPort: 8080\n  selector:\n    app: k8s-tools\n</code></pre>"},{"location":"deployment/kubernetes/#creating-configmap","title":"Creating ConfigMap","text":"<p>Create a ConfigMap for configuration files:</p> <pre><code>apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: kube-config\n  namespace: tools\ndata:\n  kubeconfig: |\n    apiVersion: v1\n    kind: Config\n    clusters:\n    - cluster:\n        server: https://k8s.example.com:6443\n        certificate-authority-data: ...\n      name: example-cluster\n    contexts:\n    - context:\n        cluster: example-cluster\n        user: admin\n      name: example-context\n    current-context: example-context\n    users:\n    - name: admin\n      user:\n        client-certificate-data: ...\n        client-key-data: ...\n</code></pre> <p>Deploy the resources:</p> <pre><code>kubectl apply -f k8s-tools-deployment.yaml\nkubectl apply -f k8s-tools-service.yaml\nkubectl apply -f k8s-tools-configmap.yaml\n</code></pre>"},{"location":"deployment/kubernetes/#managing-deployments","title":"Managing Deployments","text":""},{"location":"deployment/kubernetes/#scaling","title":"Scaling","text":"<p>Scale the deployment using kubectl:</p> <pre><code>kubectl scale deployment/k8s-tools --replicas=5 -n tools\n</code></pre>"},{"location":"deployment/kubernetes/#rolling-updates","title":"Rolling Updates","text":"<p>Update the deployment incrementally:</p> <pre><code>kubectl rollout status deployment/k8s-tools -n tools\nkubectl set image deployment/k8s-tools k8s-tools=k8stools/k8s-tools:latest -n tools\n</code></pre>"},{"location":"deployment/kubernetes/#monitoring","title":"Monitoring","text":"<p>Monitor the deployment status and health:</p> <pre><code>kubectl get pods -n tools\nkubectl describe deployment/k8s-tools -n tools\nkubectl logs -l app=k8s-tools -n tools\n</code></pre>"},{"location":"deployment/kubernetes/#security-considerations","title":"Security Considerations","text":""},{"location":"deployment/kubernetes/#rbac","title":"RBAC","text":"<p>Ensure that the deployment has appropriate Role-Based Access Control (RBAC) settings:</p> <pre><code>apiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: tools-role\n  namespace: tools\nrules:\n- apiGroups: [\"\"]\n  resources: [\"pods\", \"services\"]\n  verbs: [\"get\", \"watch\", \"list\"]\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: tools-rolebinding\n  namespace: tools\nsubjects:\n- kind: ServiceAccount\n  name: default\n  namespace: tools\nroleRef:\n  kind: Role\n  name: tools-role\n  apiGroup: rbac.authorization.k8s.io\n</code></pre>"},{"location":"deployment/kubernetes/#network-policies","title":"Network Policies","text":"<p>Define network policies to restrict access:</p> <pre><code>apiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: allow-web\n  namespace: tools\nspec:\n  podSelector:\n    matchLabels:\n      app: k8s-tools\n  ingress:\n  - from:\n    - ipBlock:\n        cidr: 10.0.0.0/24\n</code></pre>"},{"location":"deployment/kubernetes/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment/kubernetes/#common-issues","title":"Common Issues","text":""},{"location":"deployment/kubernetes/#pod-failures","title":"Pod Failures","text":"<pre><code>kubectl describe pod POD_NAME -n tools\n\n# Check events and logs\nkubectl get events -n tools\nkubectl logs POD_NAME -n tools\n</code></pre>"},{"location":"deployment/kubernetes/#service-access","title":"Service Access","text":"<pre><code># Check service configuration\nkubectl get service k8s-tools -n tools\n\n# Describe the service\nkubectl describe service k8s-tools -n tools\n</code></pre>"},{"location":"deployment/kubernetes/#best-practices","title":"Best Practices","text":""},{"location":"deployment/kubernetes/#configuration-management","title":"Configuration Management","text":"<ol> <li>Use Helm: For advanced templating and configuration</li> <li>Version Control: Keep Kubernetes manifests and Helm charts in version control</li> <li>Environment Separation: Use different namespaces for test and production</li> </ol>"},{"location":"deployment/kubernetes/#monitoring-and-logging","title":"Monitoring and Logging","text":"<ol> <li>Integrate with Prometheus/Grafana: For metrics collection and visualization</li> <li>Use ELK Stack: For centralized logging</li> <li>Set Alerts: Use alerts for critical metrics</li> </ol>"},{"location":"deployment/kubernetes/#related-documentation","title":"Related Documentation","text":"<ul> <li>Docker Deployment</li> <li>CI/CD Integration</li> </ul>"},{"location":"development/api-reference/","title":"API Reference","text":"<p>This document provides a detailed reference for the K8s Tools API, covering the available functions, classes, and the overall interface design.</p>"},{"location":"development/api-reference/#overview","title":"Overview","text":"<p>K8s Tools API provides programmatic access for performing cluster analysis, reporting, and configuration management.</p>"},{"location":"development/api-reference/#modules","title":"Modules","text":""},{"location":"development/api-reference/#1-core-module","title":"1. Core Module","text":"<p>The core module provides essential utilities for configuration and error handling.</p>"},{"location":"development/api-reference/#key-classes-and-methods","title":"Key Classes and Methods","text":"<ul> <li>ConfigManager</li> <li><code>load_config()</code>: Load the configuration from file</li> <li> <p><code>get_setting(key)</code>: Retrieve specific settings</p> </li> <li> <p>Logger</p> </li> <li><code>get_logger(name)</code>: Obtain a logger instance</li> </ul>"},{"location":"development/api-reference/#2-analyzer-module","title":"2. Analyzer Module","text":"<p>The analyzer module performs the analysis of Kubernetes clusters by executing different views.</p>"},{"location":"development/api-reference/#key-classes-and-methods_1","title":"Key Classes and Methods","text":"<ul> <li>ClusterAnalyzer</li> <li><code>analyze(view)</code>: Execute analysis for the specified view</li> <li> <p><code>get_results()</code>: Retrieve analysis results</p> </li> <li> <p>AnalysisView</p> </li> <li><code>analyze(cluster_data)</code>: Method implemented by each view for analysis execution</li> </ul>"},{"location":"development/api-reference/#3-reporter-module","title":"3. Reporter Module","text":"<p>The reporter module generates reports in various formats from the analysis results.</p>"},{"location":"development/api-reference/#key-classes-and-methods_2","title":"Key Classes and Methods","text":"<ul> <li>Reporter</li> <li> <p><code>generate_report(data, format)</code>: Generate a report for the given data</p> </li> <li> <p>HTMLExporter</p> </li> <li> <p><code>export(data)</code>: Export to HTML format</p> </li> <li> <p>PDFExporter</p> </li> <li><code>export(data)</code>: Export to PDF format</li> </ul>"},{"location":"development/api-reference/#4-cli-module","title":"4. CLI Module","text":"<p>The CLI module offers command-line functionalities using Click framework.</p>"},{"location":"development/api-reference/#key-commands","title":"Key Commands","text":"<ul> <li>analyze</li> <li> <p><code>--view</code>: Specify the analysis view</p> </li> <li> <p>report</p> </li> <li><code>--format</code>: Choose the format for the report</li> </ul>"},{"location":"development/api-reference/#5-utilities-module","title":"5. Utilities Module","text":"<p>Utility functions that support various functionalities across modules.</p>"},{"location":"development/api-reference/#key-functions","title":"Key Functions","text":"<ul> <li>calculate_efficiency()</li> <li> <p>Calculate resource efficiency</p> </li> <li> <p>format_to_json(data)</p> </li> <li>Convert data to JSON format</li> </ul>"},{"location":"development/api-reference/#using-the-api","title":"Using the API","text":""},{"location":"development/api-reference/#initialization","title":"Initialization","text":"<p>To start using the API, first initialize the configuration and the main modules.</p> <pre><code>from k8s_tools.core.config import ConfigManager\nfrom k8s_tools.analyzer import ClusterAnalyzer\nfrom k8s_tools.reporter import Reporter\n\nconfig = ConfigManager().load_config()\nanalyzer = ClusterAnalyzer(config)\nreporter = Reporter()\n</code></pre>"},{"location":"development/api-reference/#performing-analysis","title":"Performing Analysis","text":"<p>You can perform an analysis for a specific view and then generate the report for the results.</p> <pre><code># Analyze the cluster for the 'security-analysis' view\nresult = analyzer.analyze(view='security-analysis')\n\n# Generate HTML report\nreport_html = reporter.generate_report(result, format='html')\n</code></pre>"},{"location":"development/api-reference/#error-handling","title":"Error Handling","text":"<p>Error handling across the API is consistent and uses structured logging for capturing exceptions.</p> <pre><code>try:\n    analyzer.analyze(view='resource-efficiency')\nexcept Exception as e:\n    logger.error(\"Analysis failed\", error=e)\n</code></pre>"},{"location":"development/api-reference/#additional-features","title":"Additional Features","text":""},{"location":"development/api-reference/#multi-cluster-support","title":"Multi-Cluster Support","text":"<p>The API supports analyzing multiple clusters by specifying the context in configuration.</p>"},{"location":"development/api-reference/#plugin-system","title":"Plugin System","text":"<p>The analysis views and exporters are extendable via plugins, allowing for custom implementations.</p>"},{"location":"development/api-reference/#api-documentation","title":"API Documentation","text":"<p>For detailed API usage, refer to the generated API documentation available in the <code>docs/</code> directory.</p>"},{"location":"development/api-reference/#example-generating-api-documentation","title":"Example: Generating API Documentation","text":"<p>Use MkDocs to generate and serve detailed API documentation.</p> <pre><code># Install MkDocs and dependencies\npip install mkdocs mkdocs-material\n\n# Serve API documentation locally\nmkdocs serve\n</code></pre>"},{"location":"development/api-reference/#best-practices","title":"Best Practices","text":"<ul> <li>Ensure configuration files are complete and accurate.</li> <li>Use plugins wisely to extend analysis capabilities.</li> <li>Monitor logs for any unexpected exceptions or errors.</li> </ul>"},{"location":"development/api-reference/#continuous-improvement","title":"Continuous Improvement","text":"<ul> <li>Keep updating the API with new features and improvements.</li> <li>Encourage feedback from users to enhance usability.</li> </ul>"},{"location":"development/api-reference/#related-resources","title":"Related Resources","text":"<ul> <li>Configuration Guide</li> <li>Analysis Views Overview</li> <li>Reporting Formats</li> </ul> <p>0citations1 0document1 0document_type1RULE0/document_type1 0document_id1mHRxidOov0WLb90jeiS2uG0/document_id1 0/document1 0document1 0document_type1RULE0/document_type1 0document_id1FtUk1rgWdKE6veAClNpAqC0/document_id1 0/document1 0/citations1</p>"},{"location":"development/architecture/","title":"Architecture","text":"<p>This document provides an overview of the K8s Tools architecture, including system design, component interactions, and implementation details.</p>"},{"location":"development/architecture/#system-overview","title":"System Overview","text":"<p>K8s Tools follows a modular architecture with clear separation of concerns:</p> <pre><code>graph TB\n    CLI[CLI Interface] --&gt; Core[Core Engine]\n    Core --&gt; Analyzer[K8s Analyzer]\n    Core --&gt; Reporter[K8s Reporter]\n\n    Analyzer --&gt; K8sAPI[Kubernetes API]\n    Analyzer --&gt; Metrics[Metrics Store]\n\n    Reporter --&gt; Templates[Template Engine]\n    Reporter --&gt; Exporters[Export Formats]\n\n    Metrics --&gt; Database[(Database)]\n    Templates --&gt; Output[Output Files]\n    Exporters --&gt; Output</code></pre>"},{"location":"development/architecture/#core-components","title":"Core Components","text":""},{"location":"development/architecture/#1-cli-interface-srccli","title":"1. CLI Interface (<code>src/cli/</code>)","text":"<p>The command-line interface built with Click provides the main entry point:</p> <ul> <li>Command Structure: Hierarchical commands (<code>analyze</code>, <code>report</code>, <code>configure</code>)</li> <li>Configuration Management: YAML-based configuration with CLI overrides</li> <li>Output Formatting: Multiple output formats (JSON, YAML, HTML, PDF)</li> </ul> <pre><code># CLI structure example\n@click.group()\ndef cli():\n    \"\"\"K8s Tools - Kubernetes Cluster Analysis and Reporting.\"\"\"\n    pass\n\n@cli.command()\n@click.option('--view', type=click.Choice(['cluster-overview', 'security']))\ndef analyze(view):\n    \"\"\"Analyze Kubernetes cluster.\"\"\"\n    pass\n</code></pre>"},{"location":"development/architecture/#2-core-engine-srccore","title":"2. Core Engine (<code>src/core/</code>)","text":"<p>The core engine orchestrates analysis and reporting:</p> <ul> <li>Configuration: Centralized configuration management</li> <li>Plugin System: Extensible analysis views and exporters</li> <li>Error Handling: Comprehensive error handling and recovery</li> <li>Logging: Structured logging with configurable levels</li> </ul>"},{"location":"development/architecture/#3-k8s-analyzer-srcanalyzer","title":"3. K8s Analyzer (<code>src/analyzer/</code>)","text":"<p>The analyzer component handles Kubernetes cluster analysis:</p>"},{"location":"development/architecture/#key-classes","title":"Key Classes","text":"<pre><code>class ClusterAnalyzer:\n    \"\"\"Main analyzer for Kubernetes clusters.\"\"\"\n\n    def __init__(self, client: K8sClient, config: Config):\n        self.client = client\n        self.config = config\n\n    def analyze(self, view: str) -&gt; AnalysisResult:\n        \"\"\"Perform cluster analysis for specified view.\"\"\"\n        pass\n\nclass AnalysisView(ABC):\n    \"\"\"Abstract base class for analysis views.\"\"\"\n\n    @abstractmethod\n    def analyze(self, cluster_data: ClusterData) -&gt; ViewResult:\n        \"\"\"Analyze cluster data and return view-specific results.\"\"\"\n        pass\n</code></pre>"},{"location":"development/architecture/#analysis-views","title":"Analysis Views","text":"<p>Each view implements specific analysis logic:</p> <ul> <li>Cluster Overview: High-level cluster metrics and status</li> <li>Security Analysis: Security posture and vulnerability assessment</li> <li>Resource Efficiency: Resource utilization and optimization</li> <li>Storage Analysis: Persistent volume and storage metrics</li> <li>Temporal Analysis: Time-series analysis and trends</li> </ul>"},{"location":"development/architecture/#4-k8s-reporter-srcreporter","title":"4. K8s Reporter (<code>src/reporter/</code>)","text":"<p>The reporter generates various output formats from analysis results:</p>"},{"location":"development/architecture/#reporter-architecture","title":"Reporter Architecture","text":"<pre><code>class Reporter:\n    \"\"\"Main reporting engine.\"\"\"\n\n    def __init__(self, template_engine: TemplateEngine):\n        self.template_engine = template_engine\n        self.exporters = {}\n\n    def generate_report(self, data: AnalysisResult, format: str) -&gt; str:\n        \"\"\"Generate report in specified format.\"\"\"\n        pass\n\nclass TemplateEngine:\n    \"\"\"Jinja2-based template engine for reports.\"\"\"\n\n    def render_template(self, template: str, data: dict) -&gt; str:\n        \"\"\"Render template with provided data.\"\"\"\n        pass\n</code></pre>"},{"location":"development/architecture/#export-formats","title":"Export Formats","text":"<ul> <li>HTML: Interactive dashboards with charts and tables</li> <li>PDF: Static reports for documentation</li> <li>JSON/YAML: Machine-readable data formats</li> <li>CSV: Tabular data for spreadsheet analysis</li> </ul>"},{"location":"development/architecture/#data-models","title":"Data Models","text":""},{"location":"development/architecture/#core-data-structures","title":"Core Data Structures","text":"<pre><code>@dataclass\nclass ClusterData:\n    \"\"\"Complete cluster data snapshot.\"\"\"\n    nodes: List[NodeData]\n    pods: List[PodData]\n    services: List[ServiceData]\n    deployments: List[DeploymentData]\n    namespaces: List[NamespaceData]\n    persistent_volumes: List[PVData]\n\n    @property\n    def total_nodes(self) -&gt; int:\n        return len(self.nodes)\n\n@dataclass\nclass AnalysisResult:\n    \"\"\"Result of cluster analysis.\"\"\"\n    view_name: str\n    timestamp: datetime\n    cluster_info: ClusterInfo\n    metrics: Dict[str, Any]\n    recommendations: List[Recommendation]\n    alerts: List[Alert]\n</code></pre>"},{"location":"development/architecture/#kubernetes-resource-models","title":"Kubernetes Resource Models","text":"<pre><code>@dataclass\nclass NodeData:\n    \"\"\"Kubernetes node information.\"\"\"\n    name: str\n    status: NodeStatus\n    capacity: ResourceCapacity\n    allocatable: ResourceCapacity\n    usage: ResourceUsage\n    conditions: List[NodeCondition]\n    labels: Dict[str, str]\n    taints: List[Taint]\n\n@dataclass\nclass PodData:\n    \"\"\"Kubernetes pod information.\"\"\"\n    name: str\n    namespace: str\n    status: PodStatus\n    containers: List[ContainerData]\n    resource_requests: ResourceRequests\n    resource_limits: ResourceLimits\n    node_name: str\n</code></pre>"},{"location":"development/architecture/#plugin-architecture","title":"Plugin Architecture","text":""},{"location":"development/architecture/#analysis-views-plugin-system","title":"Analysis Views Plugin System","text":"<pre><code>class AnalysisViewRegistry:\n    \"\"\"Registry for analysis view plugins.\"\"\"\n\n    def __init__(self):\n        self._views = {}\n\n    def register(self, name: str, view_class: Type[AnalysisView]):\n        \"\"\"Register an analysis view plugin.\"\"\"\n        self._views[name] = view_class\n\n    def get_view(self, name: str) -&gt; AnalysisView:\n        \"\"\"Get analysis view instance by name.\"\"\"\n        if name not in self._views:\n            raise ValueError(f\"Unknown view: {name}\")\n        return self._views[name]()\n\n# Usage\nregistry = AnalysisViewRegistry()\nregistry.register('security', SecurityAnalysisView)\nregistry.register('efficiency', ResourceEfficiencyView)\n</code></pre>"},{"location":"development/architecture/#exporter-plugin-system","title":"Exporter Plugin System","text":"<pre><code>class ExporterRegistry:\n    \"\"\"Registry for export format plugins.\"\"\"\n\n    def register_exporter(self, format: str, exporter: Exporter):\n        \"\"\"Register export format handler.\"\"\"\n        self.exporters[format] = exporter\n\n    def export(self, data: AnalysisResult, format: str) -&gt; bytes:\n        \"\"\"Export data in specified format.\"\"\"\n        return self.exporters[format].export(data)\n</code></pre>"},{"location":"development/architecture/#configuration-management","title":"Configuration Management","text":""},{"location":"development/architecture/#configuration-structure","title":"Configuration Structure","text":"<pre><code># config.yaml\ncluster:\n  name: \"production\"\n  kubeconfig: \"~/.kube/config\"\n  context: \"production-cluster\"\n\nanalysis:\n  views:\n    - cluster-overview\n    - security-analysis\n  metrics:\n    collection_interval: \"5m\"\n    retention_period: \"7d\"\n\noutput:\n  format: \"html\"\n  destination: \"./reports/\"\n  template: \"default\"\n\ndatabase:\n  url: \"sqlite:///k8s-tools.db\"\n  pool_size: 10\n</code></pre>"},{"location":"development/architecture/#configuration-loading","title":"Configuration Loading","text":"<pre><code>class ConfigManager:\n    \"\"\"Centralized configuration management.\"\"\"\n\n    def __init__(self, config_file: Optional[str] = None):\n        self.config_file = config_file or \"config.yaml\"\n        self._config = None\n\n    def load_config(self) -&gt; Config:\n        \"\"\"Load configuration from file and environment.\"\"\"\n        if not self._config:\n            self._config = self._load_from_file()\n            self._apply_env_overrides()\n        return self._config\n\n    def _load_from_file(self) -&gt; Dict:\n        \"\"\"Load configuration from YAML file.\"\"\"\n        with open(self.config_file, 'r') as f:\n            return yaml.safe_load(f)\n</code></pre>"},{"location":"development/architecture/#database-schema","title":"Database Schema","text":""},{"location":"development/architecture/#metrics-storage","title":"Metrics Storage","text":"<pre><code>-- Node metrics table\nCREATE TABLE node_metrics (\n    id SERIAL PRIMARY KEY,\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    node_name VARCHAR(255) NOT NULL,\n    cpu_capacity DECIMAL(10,2),\n    memory_capacity BIGINT,\n    cpu_usage DECIMAL(10,2),\n    memory_usage BIGINT,\n    pod_count INTEGER\n);\n\n-- Pod metrics table\nCREATE TABLE pod_metrics (\n    id SERIAL PRIMARY KEY,\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    pod_name VARCHAR(255) NOT NULL,\n    namespace VARCHAR(255) NOT NULL,\n    cpu_request DECIMAL(10,2),\n    memory_request BIGINT,\n    cpu_limit DECIMAL(10,2),\n    memory_limit BIGINT,\n    status VARCHAR(50)\n);\n</code></pre>"},{"location":"development/architecture/#security-considerations","title":"Security Considerations","text":""},{"location":"development/architecture/#authentication-and-authorization","title":"Authentication and Authorization","text":"<ul> <li>Kubernetes RBAC: Respects cluster RBAC policies</li> <li>Service Account: Runs with minimal required permissions</li> <li>Secret Management: Secure handling of sensitive data</li> </ul>"},{"location":"development/architecture/#data-privacy","title":"Data Privacy","text":"<ul> <li>Local Processing: Analysis performed locally when possible</li> <li>Data Anonymization: Option to anonymize cluster data</li> <li>Secure Storage: Encrypted storage for sensitive metrics</li> </ul>"},{"location":"development/architecture/#performance-optimization","title":"Performance Optimization","text":""},{"location":"development/architecture/#caching-strategy","title":"Caching Strategy","text":"<pre><code>class MetricsCache:\n    \"\"\"Cache for expensive Kubernetes API calls.\"\"\"\n\n    def __init__(self, ttl: int = 300):\n        self.ttl = ttl\n        self._cache = {}\n\n    @lru_cache(maxsize=128)\n    def get_nodes(self) -&gt; List[NodeData]:\n        \"\"\"Get cached node data.\"\"\"\n        return self._fetch_nodes()\n</code></pre>"},{"location":"development/architecture/#async-processing","title":"Async Processing","text":"<pre><code>async def analyze_cluster_async(analyzer: ClusterAnalyzer) -&gt; AnalysisResult:\n    \"\"\"Asynchronous cluster analysis.\"\"\"\n    tasks = []\n\n    # Parallel data collection\n    tasks.append(analyzer.collect_node_data())\n    tasks.append(analyzer.collect_pod_data())\n    tasks.append(analyzer.collect_service_data())\n\n    results = await asyncio.gather(*tasks)\n    return analyzer.process_results(results)\n</code></pre>"},{"location":"development/architecture/#testing-architecture","title":"Testing Architecture","text":""},{"location":"development/architecture/#test-structure","title":"Test Structure","text":"<pre><code>tests/\n\u251c\u2500\u2500 unit/           # Fast, isolated tests\n\u251c\u2500\u2500 integration/    # Component interaction tests\n\u251c\u2500\u2500 e2e/           # End-to-end workflow tests\n\u2514\u2500\u2500 fixtures/      # Test data and mocks\n</code></pre>"},{"location":"development/architecture/#mock-strategy","title":"Mock Strategy","text":"<ul> <li>Kubernetes API: Mock using <code>unittest.mock</code></li> <li>External Services: Use <code>responses</code> library</li> <li>File System: <code>tempfile</code> for temporary files</li> <li>Time: <code>freezegun</code> for time-based testing</li> </ul>"},{"location":"development/architecture/#deployment-patterns","title":"Deployment Patterns","text":""},{"location":"development/architecture/#standalone-tool","title":"Standalone Tool","text":"<ul> <li>PyPI Package: <code>pip install k8s-analyzer</code></li> <li>pipx Installation: Isolated installation</li> <li>Docker Container: Containerized execution</li> </ul>"},{"location":"development/architecture/#cicd-integration","title":"CI/CD Integration","text":"<ul> <li>GitHub Actions: Automated analysis in workflows</li> <li>Jenkins: Pipeline integration</li> <li>GitLab CI: Scheduled cluster analysis</li> </ul>"},{"location":"development/architecture/#monitoring-and-observability","title":"Monitoring and Observability","text":""},{"location":"development/architecture/#logging","title":"Logging","text":"<pre><code>import structlog\n\nlogger = structlog.get_logger(__name__)\n\ndef analyze_cluster(self, view: str):\n    logger.info(\n        \"Starting cluster analysis\",\n        view=view,\n        cluster=self.cluster_name\n    )\n</code></pre>"},{"location":"development/architecture/#metrics-collection","title":"Metrics Collection","text":"<ul> <li>Internal Metrics: Tool performance and usage</li> <li>Cluster Metrics: Kubernetes resource metrics</li> <li>Error Tracking: Exception monitoring and alerting</li> </ul>"},{"location":"development/architecture/#future-architecture-considerations","title":"Future Architecture Considerations","text":""},{"location":"development/architecture/#scalability","title":"Scalability","text":"<ul> <li>Multi-cluster Support: Analyze multiple clusters</li> <li>Distributed Processing: Scale analysis across nodes</li> <li>Real-time Updates: Live cluster monitoring</li> </ul>"},{"location":"development/architecture/#extensibility","title":"Extensibility","text":"<ul> <li>Custom Views: User-defined analysis views</li> <li>Plugin Marketplace: Community-contributed plugins</li> <li>API Endpoints: REST API for programmatic access</li> </ul>"},{"location":"development/architecture/#related-documentation","title":"Related Documentation","text":"<ul> <li>Development Setup</li> <li>Contributing Guidelines</li> <li>Testing Guide</li> </ul> <p> RULE mHRxidOov0WLb90jeiS2uG RULE FtUk1rgWdKE6veAClNpAqC </p>"},{"location":"development/contributing/","title":"Contributing","text":"<p>Thank you for your interest in contributing to K8s Tools! This guide will help you get started with development and contributions.</p>"},{"location":"development/contributing/#development-setup","title":"Development Setup","text":"<p>Before you begin, ensure you have completed the development setup.</p>"},{"location":"development/contributing/#contributing-guidelines","title":"Contributing Guidelines","text":""},{"location":"development/contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>We are committed to providing a welcoming and inclusive experience for everyone. Please read and follow our Code of Conduct.</p>"},{"location":"development/contributing/#getting-started","title":"Getting Started","text":"<ol> <li>Fork the repository on GitHub</li> <li>Clone your fork locally:    <pre><code>git clone https://github.com/your-username/k8s-tools.git\ncd k8s-tools\n</code></pre></li> <li>Create a feature branch:    <pre><code>git checkout -b feature/your-feature-name\n</code></pre></li> </ol>"},{"location":"development/contributing/#development-process","title":"Development Process","text":""},{"location":"development/contributing/#setting-up-development-environment","title":"Setting up Development Environment","text":"<pre><code># Install dependencies with uv\nuv sync --dev\n\n# Activate the virtual environment\nsource .venv/bin/activate\n\n# Install pre-commit hooks\npre-commit install\n</code></pre>"},{"location":"development/contributing/#code-standards","title":"Code Standards","text":"<ul> <li>Python Version: &gt;= 3.10 (as per project rules)</li> <li>Code Style: Follow PEP 8, enforced by pre-commit hooks</li> <li>Type Hints: Use type hints for all functions and methods</li> <li>Documentation: Document all public APIs and functions</li> </ul>"},{"location":"development/contributing/#commit-guidelines","title":"Commit Guidelines","text":"<p>We use conventional commits for consistent commit messages:</p> <pre><code># Format: type(scope): description\nfeat(analyzer): add new cluster analysis view\nfix(reporter): resolve dashboard rendering issue\ndocs(api): update CLI reference documentation\ntest(core): add unit tests for data models\n</code></pre> <p>Commit Types: - <code>feat</code>: New features - <code>fix</code>: Bug fixes - <code>docs</code>: Documentation updates - <code>test</code>: Adding or updating tests - <code>refactor</code>: Code refactoring - <code>style</code>: Code style changes - <code>ci</code>: CI/CD changes - <code>chore</code>: Maintenance tasks</p>"},{"location":"development/contributing/#testing","title":"Testing","text":""},{"location":"development/contributing/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\npytest\n\n# Run with coverage\npytest --cov=src --cov-report=html\n\n# Run specific test file\npytest tests/test_analyzer.py\n\n# Run tests with verbose output\npytest -v\n</code></pre>"},{"location":"development/contributing/#writing-tests","title":"Writing Tests","text":"<ul> <li>Write unit tests for all new functionality</li> <li>Place tests in the <code>tests/</code> directory</li> <li>Follow the naming convention: <code>test_*.py</code></li> <li>Use descriptive test names</li> </ul> <pre><code>def test_cluster_analysis_returns_valid_data():\n    \"\"\"Test that cluster analysis returns properly formatted data.\"\"\"\n    # Test implementation\n    pass\n</code></pre>"},{"location":"development/contributing/#documentation","title":"Documentation","text":""},{"location":"development/contributing/#building-documentation","title":"Building Documentation","text":"<pre><code># Install MkDocs dependencies\npip install mkdocs mkdocs-material\n\n# Serve documentation locally\nmkdocs serve\n\n# Build documentation\nmkdocs build\n</code></pre>"},{"location":"development/contributing/#documentation-guidelines","title":"Documentation Guidelines","text":"<ul> <li>Update relevant documentation when making changes</li> <li>Use clear, concise language</li> <li>Include code examples where appropriate</li> <li>Update API documentation for new features</li> </ul>"},{"location":"development/contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Create a Pull Request from your feature branch to <code>main</code></li> <li>Fill out the PR template with:</li> <li>Description of changes</li> <li>Type of change (bug fix, feature, docs, etc.)</li> <li>Testing performed</li> <li>Breaking changes (if any)</li> <li>Ensure CI passes - all tests and checks must pass</li> <li>Request review from maintainers</li> <li>Address feedback and update your PR as needed</li> </ol>"},{"location":"development/contributing/#pr-checklist","title":"PR Checklist","text":"<ul> <li> Code follows project style guidelines</li> <li> Self-review of code completed</li> <li> Tests added for new functionality</li> <li> Documentation updated as needed</li> <li> Changelog updated (if applicable)</li> <li> PR title follows conventional commit format</li> </ul>"},{"location":"development/contributing/#release-process","title":"Release Process","text":"<p>Releases are managed by maintainers and follow semantic versioning:</p> <ul> <li>Major (X.0.0): Breaking changes</li> <li>Minor (0.X.0): New features, backwards compatible</li> <li>Patch (0.0.X): Bug fixes, backwards compatible</li> </ul>"},{"location":"development/contributing/#getting-help","title":"Getting Help","text":"<ul> <li>GitHub Issues: For bug reports and feature requests</li> <li>GitHub Discussions: For questions and general discussion</li> <li>Discord/Slack: [Community channel link if available]</li> </ul>"},{"location":"development/contributing/#recognition","title":"Recognition","text":"<p>Contributors are recognized in: - GitHub contributors list - Release notes - Documentation credits</p> <p>Thank you for contributing to K8s Tools! \ud83c\udf89</p>"},{"location":"development/setup/","title":"\ud83d\udcbb Development Setup","text":"<p>This guide covers setting up a development environment for contributing to K8s Tools, including both k8s-analyzer and k8s-reporter components.</p>"},{"location":"development/setup/#prerequisites","title":"Prerequisites","text":"<p>Before starting development, ensure you have:</p> <ul> <li>Python 3.9+ installed</li> <li>Git for version control</li> <li>UV package manager (recommended)</li> <li>Node.js (for frontend tooling, if needed)</li> <li>Docker (for testing containerized deployments)</li> </ul>"},{"location":"development/setup/#development-environment-setup","title":"Development Environment Setup","text":""},{"location":"development/setup/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code># Clone the main repository\ngit clone https://github.com/k8s-tools/k8s-tools.git\ncd k8s-tools\n\n# Create your development branch\ngit checkout -b feature/your-feature-name\n</code></pre>"},{"location":"development/setup/#2-install-uv-package-manager","title":"2. Install UV Package Manager","text":"<pre><code># Install UV (macOS/Linux)\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# Or using Homebrew (macOS)\nbrew install uv\n\n# Or using pip\npip install uv\n</code></pre>"},{"location":"development/setup/#3-setup-k8s-analyzer-development","title":"3. Setup k8s-analyzer Development","text":"<pre><code># Navigate to k8s-analyzer directory\ncd k8s-analyzer\n\n# Install dependencies with development extras\nuv sync --all-extras\n\n# Verify installation\nuv run k8s-analyzer --help\n\n# Run tests\nuv run pytest\n\n# Run tests with coverage\nuv run pytest --cov=src/k8s_analyzer --cov-report=html\n</code></pre>"},{"location":"development/setup/#4-setup-k8s-reporter-development","title":"4. Setup k8s-reporter Development","text":"<pre><code># Navigate to k8s-reporter directory\ncd ../k8s-reporter\n\n# Install dependencies with development extras\nuv sync --all-extras\n\n# Verify installation\nuv run streamlit run src/k8s_reporter/app.py\n\n# Run tests\nuv run pytest\n\n# Run tests with coverage\nuv run pytest --cov=src/k8s_reporter --cov-report=html\n</code></pre>"},{"location":"development/setup/#project-structure","title":"Project Structure","text":"<pre><code>k8s-tools/\n\u251c\u2500\u2500 k8s-analyzer/           # CLI analysis tool\n\u2502   \u251c\u2500\u2500 src/k8s_analyzer/   # Source code\n\u2502   \u251c\u2500\u2500 tests/              # Test suite\n\u2502   \u251c\u2500\u2500 docs/               # Component documentation\n\u2502   \u2514\u2500\u2500 pyproject.toml      # Project configuration\n\u251c\u2500\u2500 k8s-reporter/           # Web dashboard\n\u2502   \u251c\u2500\u2500 src/k8s_reporter/   # Source code\n\u2502   \u251c\u2500\u2500 tests/              # Test suite\n\u2502   \u251c\u2500\u2500 docs/               # Component documentation\n\u2502   \u2514\u2500\u2500 pyproject.toml      # Project configuration\n\u251c\u2500\u2500 docs/                   # Global documentation\n\u251c\u2500\u2500 examples/               # Usage examples\n\u251c\u2500\u2500 Taskfile.yml           # Task automation\n\u251c\u2500\u2500 mkdocs.yml             # Documentation configuration\n\u2514\u2500\u2500 README.md              # Main project README\n</code></pre>"},{"location":"development/setup/#development-workflow","title":"Development Workflow","text":""},{"location":"development/setup/#code-quality-standards","title":"Code Quality Standards","text":"<p>Both projects use strict code quality standards:</p> <pre><code># Format code with Black\nuv run black src tests\n\n# Sort imports with isort\nuv run isort src tests\n\n# Lint code with flake8\nuv run flake8 src tests\n\n# Type checking with mypy\nuv run mypy src\n\n# Run all quality checks\nuv run pre-commit run --all-files\n</code></pre>"},{"location":"development/setup/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<p>Install pre-commit hooks to ensure code quality:</p> <pre><code># Install pre-commit\nuv run pre-commit install\n\n# Run on all files\nuv run pre-commit run --all-files\n</code></pre>"},{"location":"development/setup/#testing","title":"Testing","text":""},{"location":"development/setup/#k8s-analyzer-tests","title":"k8s-analyzer Tests","text":"<pre><code>cd k8s-analyzer\n\n# Run all tests\nuv run pytest\n\n# Run specific test file\nuv run pytest tests/test_parser.py\n\n# Run with verbose output\nuv run pytest -v\n\n# Run with coverage\nuv run pytest --cov=src/k8s_analyzer --cov-report=term-missing\n</code></pre>"},{"location":"development/setup/#k8s-reporter-tests","title":"k8s-reporter Tests","text":"<pre><code>cd k8s-reporter\n\n# Run all tests\nuv run pytest\n\n# Run specific test file\nuv run pytest tests/test_database.py\n\n# Run with coverage\nuv run pytest --cov=src/k8s_reporter --cov-report=html\n</code></pre>"},{"location":"development/setup/#creating-test-data","title":"Creating Test Data","text":"<p>For development and testing, you can generate test data:</p> <pre><code># Generate test cluster data\nkubectl create namespace test-namespace\nkubectl create deployment test-app --image=nginx -n test-namespace\nkubectl get all,pv,pvc,configmaps -n test-namespace -o json &gt; test-data.json\n\n# Use the test data\ncd k8s-analyzer\nuv run k8s-analyzer sqlite ../test-data.json --output test.db\n\ncd ../k8s-reporter\nuv run streamlit run src/k8s_reporter/app.py\n</code></pre>"},{"location":"development/setup/#making-changes","title":"Making Changes","text":""},{"location":"development/setup/#adding-new-features-to-k8s-analyzer","title":"Adding New Features to k8s-analyzer","text":"<ol> <li>Create new module in <code>src/k8s_analyzer/</code></li> <li>Add tests in <code>tests/</code></li> <li>Update CLI in <code>cli.py</code> if needed</li> <li>Add documentation in appropriate docs</li> </ol> <p>Example: <pre><code># src/k8s_analyzer/new_feature.py\ndef new_analysis_function(cluster_state):\n    \"\"\"New analysis functionality.\"\"\"\n    # Implementation here\n    pass\n\n# tests/test_new_feature.py\ndef test_new_analysis_function():\n    \"\"\"Test the new analysis function.\"\"\"\n    # Test implementation\n    pass\n</code></pre></p>"},{"location":"development/setup/#adding-new-views-to-k8s-reporter","title":"Adding New Views to k8s-reporter","text":"<ol> <li>Create view module in <code>src/k8s_reporter/views/</code></li> <li>Add to views registry in <code>models.py</code></li> <li>Add tests in <code>tests/</code></li> <li>Update navigation in <code>app.py</code></li> </ol> <p>Example: <pre><code># src/k8s_reporter/views/new_view.py\nimport streamlit as st\n\ndef render_new_view(db_client, filters):\n    \"\"\"Render the new analysis view.\"\"\"\n    st.header(\"New Analysis View\")\n    # Implementation here\n\n# src/k8s_reporter/models.py\nANALYSIS_VIEWS = {\n    # ... existing views\n    \"new_view\": AnalysisView(\n        title=\"New View\",\n        icon=\"\ud83d\udcca\",\n        render_func=render_new_view,\n    )\n}\n</code></pre></p>"},{"location":"development/setup/#database-schema-changes","title":"Database Schema Changes","text":"<p>If you need to modify the database schema:</p> <ol> <li>Update models in <code>k8s-analyzer/src/k8s_analyzer/models.py</code></li> <li>Update SQLite exporter in <code>sqlite_exporter.py</code></li> <li>Update database client in <code>k8s-reporter/src/k8s_reporter/database.py</code></li> <li>Add migration logic if needed</li> <li>Update tests for all components</li> </ol>"},{"location":"development/setup/#testing-your-changes","title":"Testing Your Changes","text":""},{"location":"development/setup/#integration-testing","title":"Integration Testing","text":"<pre><code># Test full workflow\ncd k8s-analyzer\nuv run k8s-analyzer sqlite ../examples/multi-app-demo/ --output integration-test.db\n\ncd ../k8s-reporter\nuv run streamlit run src/k8s_reporter/app.py\n# Upload the integration-test.db and verify functionality\n</code></pre>"},{"location":"development/setup/#performance-testing","title":"Performance Testing","text":"<pre><code># Test with large datasets\nkubectl get all,pv,pvc,configmaps,secrets -A -o json &gt; large-cluster.json\n\ncd k8s-analyzer\ntime uv run k8s-analyzer sqlite large-cluster.json --output large-test.db\n\ncd ../k8s-reporter\n# Test dashboard performance with large database\n</code></pre>"},{"location":"development/setup/#documentation","title":"Documentation","text":""},{"location":"development/setup/#updating-documentation","title":"Updating Documentation","text":"<ol> <li>Component docs: Update READMEs in component directories</li> <li>Global docs: Update files in <code>docs/</code> directory</li> <li>API docs: Update docstrings in code</li> <li>Examples: Update examples in <code>examples/</code> directory</li> </ol>"},{"location":"development/setup/#building-documentation","title":"Building Documentation","text":"<pre><code># Install mkdocs\npip install mkdocs mkdocs-material\n\n# Serve documentation locally\nmkdocs serve\n\n# Build documentation\nmkdocs build\n</code></pre>"},{"location":"development/setup/#debugging","title":"Debugging","text":""},{"location":"development/setup/#debugging-k8s-analyzer","title":"Debugging k8s-analyzer","text":"<pre><code># Enable verbose logging\nuv run k8s-analyzer analyze test-data.json --verbose\n\n# Use Python debugger\nuv run python -m pdb -c continue src/k8s_analyzer/cli.py analyze test-data.json\n</code></pre>"},{"location":"development/setup/#debugging-k8s-reporter","title":"Debugging k8s-reporter","text":"<pre><code># Enable debug mode\nuv run streamlit run src/k8s_reporter/app.py --logger.level=debug\n\n# Use browser developer tools for frontend issues\n</code></pre>"},{"location":"development/setup/#cicd-integration","title":"CI/CD Integration","text":""},{"location":"development/setup/#github-actions","title":"GitHub Actions","text":"<p>The project uses GitHub Actions for CI/CD:</p> <pre><code># .github/workflows/test.yml\nname: Test\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [3.9, 3.10, 3.11]\n\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install UV\n        run: curl -LsSf https://astral.sh/uv/install.sh | sh\n      - name: Test k8s-analyzer\n        run: |\n          cd k8s-analyzer\n          uv sync --all-extras\n          uv run pytest\n      - name: Test k8s-reporter\n        run: |\n          cd k8s-reporter\n          uv sync --all-extras\n          uv run pytest\n</code></pre>"},{"location":"development/setup/#local-ci-testing","title":"Local CI Testing","text":"<pre><code># Install act (GitHub Actions local runner)\nbrew install act\n\n# Run tests locally\nact -j test\n</code></pre>"},{"location":"development/setup/#release-process","title":"Release Process","text":""},{"location":"development/setup/#version-management","title":"Version Management","text":"<ol> <li>Update version in <code>pyproject.toml</code> files</li> <li>Update CHANGELOG.md with new features and fixes</li> <li>Create git tag with version number</li> <li>Push changes and tag to GitHub</li> </ol> <pre><code># Update versions\n# Edit k8s-analyzer/pyproject.toml\n# Edit k8s-reporter/pyproject.toml\n# Edit CHANGELOG.md\n\n# Commit changes\ngit add .\ngit commit -m \"Release v1.0.0\"\n\n# Create and push tag\ngit tag -a v1.0.0 -m \"Release v1.0.0\"\ngit push origin main --tags\n</code></pre>"},{"location":"development/setup/#using-taskfile-for-releases","title":"Using Taskfile for Releases","text":"<pre><code># Install Task\nbrew install go-task/tap/go-task\n\n# View available tasks\ntask --list\n\n# Create release\ntask create-release\n</code></pre>"},{"location":"development/setup/#contributing-guidelines","title":"Contributing Guidelines","text":""},{"location":"development/setup/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Fork the repository</li> <li>Create feature branch from <code>main</code></li> <li>Make changes following code quality standards</li> <li>Add tests for new functionality</li> <li>Update documentation as needed</li> <li>Submit pull request with clear description</li> </ol>"},{"location":"development/setup/#code-review-checklist","title":"Code Review Checklist","text":"<ul> <li> Code follows style guidelines (Black, isort, flake8)</li> <li> Tests pass and cover new functionality</li> <li> Documentation is updated</li> <li> No breaking changes (or properly documented)</li> <li> Performance impact is considered</li> <li> Security implications are addressed</li> </ul>"},{"location":"development/setup/#community-guidelines","title":"Community Guidelines","text":"<ul> <li>Be respectful and inclusive</li> <li>Follow the code of conduct</li> <li>Help others learn and contribute</li> <li>Report issues constructively</li> <li>Share knowledge and best practices</li> </ul>"},{"location":"development/setup/#getting-help","title":"Getting Help","text":""},{"location":"development/setup/#development-support","title":"Development Support","text":"<ul> <li>GitHub Issues: Report bugs and request features</li> <li>GitHub Discussions: Ask questions and share ideas</li> <li>Documentation: Comprehensive guides and examples</li> <li>Code Examples: Reference implementations</li> </ul>"},{"location":"development/setup/#resources","title":"Resources","text":"<ul> <li>Python Documentation: https://docs.python.org/</li> <li>Streamlit Documentation: https://docs.streamlit.io/</li> <li>Plotly Documentation: https://plotly.com/python/</li> <li>Kubernetes API Reference: https://kubernetes.io/docs/reference/</li> </ul>"},{"location":"development/setup/#performance-optimization","title":"Performance Optimization","text":""},{"location":"development/setup/#development-tips","title":"Development Tips","text":"<ul> <li>Use caching for expensive operations</li> <li>Implement lazy loading for large datasets</li> <li>Profile code performance regularly</li> <li>Optimize database queries</li> <li>Use efficient data structures</li> </ul>"},{"location":"development/setup/#memory-management","title":"Memory Management","text":"<pre><code># Use generators for large datasets\ndef process_resources(resources):\n    for resource in resources:\n        yield analyze_resource(resource)\n\n# Cache expensive computations\nfrom functools import lru_cache\n\n@lru_cache(maxsize=128)\ndef expensive_analysis(resource_id):\n    # Expensive computation here\n    pass\n</code></pre> <p>This development setup guide provides everything needed to contribute effectively to the K8s Tools project. Follow the guidelines, maintain code quality, and help build better tools for the Kubernetes community!</p>"},{"location":"development/testing/","title":"Testing","text":"<p>Comprehensive testing is essential for maintaining code quality and reliability in K8s Tools. This guide covers our testing strategy, tools, and best practices.</p>"},{"location":"development/testing/#testing-strategy","title":"Testing Strategy","text":""},{"location":"development/testing/#test-pyramid","title":"Test Pyramid","text":"<p>Our testing approach follows the test pyramid:</p> <ol> <li>Unit Tests (Base): Fast, isolated tests for individual components</li> <li>Integration Tests (Middle): Tests for component interactions</li> <li>End-to-End Tests (Top): Full workflow tests</li> </ol>"},{"location":"development/testing/#test-categories","title":"Test Categories","text":"<ul> <li>Unit Tests: Core business logic, utilities, and data models</li> <li>Integration Tests: Database operations, API integrations, CLI commands</li> <li>End-to-End Tests: Complete user workflows and scenarios</li> <li>Performance Tests: Load testing and benchmarking</li> <li>Security Tests: Vulnerability scanning and security validation</li> </ul>"},{"location":"development/testing/#test-tools-and-framework","title":"Test Tools and Framework","text":""},{"location":"development/testing/#primary-testing-framework","title":"Primary Testing Framework","text":"<p>We use pytest as our primary testing framework:</p> <pre><code># Install testing dependencies\nuv sync --group test\n\n# Run all tests\npytest\n\n# Run with coverage reporting\npytest --cov=src --cov-report=html --cov-report=term\n</code></pre>"},{"location":"development/testing/#testing-dependencies","title":"Testing Dependencies","text":"<pre><code># pyproject.toml testing dependencies\n[project.optional-dependencies]\ntest = [\n    \"pytest&gt;=7.0\",\n    \"pytest-cov&gt;=4.0\",\n    \"pytest-mock&gt;=3.10\",\n    \"pytest-asyncio&gt;=0.21\",\n    \"pytest-xdist&gt;=3.0\",  # for parallel test execution\n    \"factory-boy&gt;=3.2\",   # for test data factories\n    \"freezegun&gt;=1.2\",     # for time-based testing\n    \"responses&gt;=0.23\",    # for HTTP mocking\n]\n</code></pre>"},{"location":"development/testing/#test-structure-and-organization","title":"Test Structure and Organization","text":""},{"location":"development/testing/#directory-structure","title":"Directory Structure","text":"<pre><code>tests/\n\u251c\u2500\u2500 unit/\n\u2502   \u251c\u2500\u2500 analyzer/\n\u2502   \u2502   \u251c\u2500\u2500 test_core.py\n\u2502   \u2502   \u251c\u2500\u2500 test_metrics.py\n\u2502   \u2502   \u2514\u2500\u2500 test_views.py\n\u2502   \u251c\u2500\u2500 reporter/\n\u2502   \u2502   \u251c\u2500\u2500 test_dashboard.py\n\u2502   \u2502   \u2514\u2500\u2500 test_exporters.py\n\u2502   \u2514\u2500\u2500 common/\n\u2502       \u251c\u2500\u2500 test_utils.py\n\u2502       \u2514\u2500\u2500 test_models.py\n\u251c\u2500\u2500 integration/\n\u2502   \u251c\u2500\u2500 test_cli.py\n\u2502   \u251c\u2500\u2500 test_database.py\n\u2502   \u2514\u2500\u2500 test_k8s_client.py\n\u251c\u2500\u2500 e2e/\n\u2502   \u251c\u2500\u2500 test_full_analysis.py\n\u2502   \u2514\u2500\u2500 test_reporting_workflow.py\n\u251c\u2500\u2500 fixtures/\n\u2502   \u251c\u2500\u2500 kubernetes/\n\u2502   \u2502   \u251c\u2500\u2500 pods.yaml\n\u2502   \u2502   \u2514\u2500\u2500 deployments.yaml\n\u2502   \u2514\u2500\u2500 sample_data/\n\u2514\u2500\u2500 conftest.py\n</code></pre>"},{"location":"development/testing/#naming-conventions","title":"Naming Conventions","text":"<ul> <li>Test files: <code>test_*.py</code></li> <li>Test functions: <code>test_&lt;functionality&gt;_&lt;expected_result&gt;()</code></li> <li>Test classes: <code>Test&lt;ComponentName&gt;</code></li> </ul> <pre><code># Good examples\ndef test_cluster_analyzer_returns_node_metrics():\n    pass\n\ndef test_security_analysis_identifies_vulnerabilities():\n    pass\n\nclass TestDashboardGenerator:\n    def test_generate_html_dashboard_with_valid_data(self):\n        pass\n</code></pre>"},{"location":"development/testing/#writing-tests","title":"Writing Tests","text":""},{"location":"development/testing/#unit-test-example","title":"Unit Test Example","text":"<pre><code>import pytest\nfrom unittest.mock import Mock, patch\nfrom k8s_tools.analyzer.core import ClusterAnalyzer\nfrom k8s_tools.common.models import ClusterMetrics\n\nclass TestClusterAnalyzer:\n    \"\"\"Test cases for ClusterAnalyzer class.\"\"\"\n\n    @pytest.fixture\n    def mock_k8s_client(self):\n        \"\"\"Mock Kubernetes client for testing.\"\"\"\n        return Mock()\n\n    @pytest.fixture\n    def analyzer(self, mock_k8s_client):\n        \"\"\"Create analyzer instance with mocked dependencies.\"\"\"\n        return ClusterAnalyzer(client=mock_k8s_client)\n\n    def test_analyze_cluster_returns_metrics(self, analyzer, mock_k8s_client):\n        \"\"\"Test that analyze_cluster returns ClusterMetrics object.\"\"\"\n        # Arrange\n        mock_k8s_client.list_nodes.return_value = []\n        mock_k8s_client.list_pods.return_value = []\n\n        # Act\n        result = analyzer.analyze_cluster()\n\n        # Assert\n        assert isinstance(result, ClusterMetrics)\n        assert result.node_count &gt;= 0\n        mock_k8s_client.list_nodes.assert_called_once()\n\n    def test_analyze_cluster_handles_api_error(self, analyzer, mock_k8s_client):\n        \"\"\"Test error handling when Kubernetes API fails.\"\"\"\n        # Arrange\n        mock_k8s_client.list_nodes.side_effect = Exception(\"API Error\")\n\n        # Act &amp; Assert\n        with pytest.raises(Exception, match=\"API Error\"):\n            analyzer.analyze_cluster()\n</code></pre>"},{"location":"development/testing/#integration-test-example","title":"Integration Test Example","text":"<pre><code>import pytest\nfrom click.testing import CliRunner\nfrom k8s_tools.cli.main import cli\n\nclass TestCLIIntegration:\n    \"\"\"Integration tests for CLI commands.\"\"\"\n\n    @pytest.fixture\n    def runner(self):\n        \"\"\"Click test runner.\"\"\"\n        return CliRunner()\n\n    def test_analyze_command_with_valid_config(self, runner, temp_config_file):\n        \"\"\"Test analyze command with valid configuration.\"\"\"\n        result = runner.invoke(cli, [\n            'analyze', \n            '--config', temp_config_file,\n            '--view', 'cluster-overview'\n        ])\n\n        assert result.exit_code == 0\n        assert \"Cluster Analysis Complete\" in result.output\n\n    @pytest.mark.skipif(not pytest.k8s_available, reason=\"K8s cluster not available\")\n    def test_analyze_against_real_cluster(self, runner):\n        \"\"\"Test against real Kubernetes cluster (requires cluster access).\"\"\"\n        result = runner.invoke(cli, ['analyze', '--view', 'health-dashboard'])\n        assert result.exit_code == 0\n</code></pre>"},{"location":"development/testing/#test-fixtures-and-factories","title":"Test Fixtures and Factories","text":"<pre><code># conftest.py\nimport pytest\nimport tempfile\nimport yaml\nfrom pathlib import Path\n\n@pytest.fixture\ndef sample_pod_data():\n    \"\"\"Sample Kubernetes pod data for testing.\"\"\"\n    return {\n        \"apiVersion\": \"v1\",\n        \"kind\": \"Pod\",\n        \"metadata\": {\n            \"name\": \"test-pod\",\n            \"namespace\": \"default\",\n        },\n        \"spec\": {\n            \"containers\": [\n                {\n                    \"name\": \"test-container\",\n                    \"image\": \"nginx:latest\",\n                    \"resources\": {\n                        \"requests\": {\"cpu\": \"100m\", \"memory\": \"128Mi\"},\n                        \"limits\": {\"cpu\": \"500m\", \"memory\": \"512Mi\"}\n                    }\n                }\n            ]\n        }\n    }\n\n@pytest.fixture\ndef temp_config_file():\n    \"\"\"Create temporary configuration file for testing.\"\"\"\n    config_data = {\n        \"cluster\": {\"name\": \"test-cluster\"},\n        \"analysis\": {\"views\": [\"cluster-overview\"]},\n        \"output\": {\"format\": \"json\"}\n    }\n\n    with tempfile.NamedTemporaryFile(mode='w', suffix='.yaml', delete=False) as f:\n        yaml.dump(config_data, f)\n        yield f.name\n\n    Path(f.name).unlink()  # cleanup\n</code></pre>"},{"location":"development/testing/#running-tests","title":"Running Tests","text":""},{"location":"development/testing/#basic-test-execution","title":"Basic Test Execution","text":"<pre><code># Run all tests\npytest\n\n# Run specific test file\npytest tests/unit/analyzer/test_core.py\n\n# Run specific test function\npytest tests/unit/analyzer/test_core.py::test_analyze_cluster_returns_metrics\n\n# Run tests with verbose output\npytest -v\n\n# Run tests in parallel\npytest -n auto\n</code></pre>"},{"location":"development/testing/#coverage-reporting","title":"Coverage Reporting","text":"<pre><code># Generate coverage report\npytest --cov=src --cov-report=html --cov-report=term-missing\n\n# Set minimum coverage threshold\npytest --cov=src --cov-fail-under=80\n</code></pre>"},{"location":"development/testing/#test-markers","title":"Test Markers","text":"<pre><code># Mark slow tests\n@pytest.mark.slow\ndef test_comprehensive_cluster_analysis():\n    pass\n\n# Mark tests requiring Kubernetes\n@pytest.mark.k8s\ndef test_real_cluster_connection():\n    pass\n\n# Mark integration tests\n@pytest.mark.integration\ndef test_database_operations():\n    pass\n</code></pre> <p>Run specific test groups: <pre><code># Run only unit tests (default)\npytest tests/unit/\n\n# Run integration tests\npytest -m integration\n\n# Skip slow tests\npytest -m \"not slow\"\n\n# Run only Kubernetes tests\npytest -m k8s\n</code></pre></p>"},{"location":"development/testing/#test-data-management","title":"Test Data Management","text":""},{"location":"development/testing/#test-data-files","title":"Test Data Files","text":"<p>Store test data in <code>tests/fixtures/</code>:</p> <pre><code># tests/fixtures/kubernetes/sample-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: sample-app\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: sample-app\n  template:\n    metadata:\n      labels:\n        app: sample-app\n    spec:\n      containers:\n      - name: app\n        image: nginx:1.20\n</code></pre>"},{"location":"development/testing/#factory-pattern-for-test-data","title":"Factory Pattern for Test Data","text":"<pre><code># tests/factories.py\nimport factory\nfrom k8s_tools.common.models import NodeMetrics, PodMetrics\n\nclass NodeMetricsFactory(factory.Factory):\n    class Meta:\n        model = NodeMetrics\n\n    name = factory.Sequence(lambda n: f\"node-{n}\")\n    cpu_capacity = \"4\"\n    memory_capacity = \"8Gi\"\n    cpu_usage = factory.LazyAttribute(lambda obj: obj.cpu_capacity * 0.5)\n    memory_usage = factory.LazyAttribute(lambda obj: obj.memory_capacity * 0.6)\n\n# Usage in tests\ndef test_node_metrics_calculation():\n    node = NodeMetricsFactory()\n    assert node.cpu_usage_percentage &lt; 100\n</code></pre>"},{"location":"development/testing/#continuous-integration","title":"Continuous Integration","text":""},{"location":"development/testing/#github-actions-workflow","title":"GitHub Actions Workflow","text":"<pre><code># .github/workflows/test.yml\nname: Tests\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: [\"3.10\", \"3.11\", \"3.12\"]\n\n    steps:\n    - uses: actions/checkout@v4\n    - uses: actions/setup-python@v4\n      with:\n        python-version: ${{ matrix.python-version }}\n\n    - name: Install uv\n      run: curl -LsSf https://astral.sh/uv/install.sh | sh\n\n    - name: Install dependencies\n      run: uv sync --group test\n\n    - name: Run tests\n      run: uv run pytest --cov=src --cov-report=xml\n\n    - name: Upload coverage to Codecov\n      uses: codecov/codecov-action@v3\n</code></pre>"},{"location":"development/testing/#best-practices","title":"Best Practices","text":""},{"location":"development/testing/#test-writing-guidelines","title":"Test Writing Guidelines","text":"<ol> <li>Arrange-Act-Assert: Structure tests clearly</li> <li>Single Responsibility: One test, one behavior</li> <li>Descriptive Names: Test names should describe the scenario</li> <li>Independent Tests: Tests should not depend on each other</li> <li>Fast Execution: Keep unit tests fast (&lt; 1 second each)</li> </ol>"},{"location":"development/testing/#mocking-guidelines","title":"Mocking Guidelines","text":"<pre><code># Good: Mock external dependencies\n@patch('k8s_tools.client.kubernetes_client')\ndef test_analysis_with_mocked_client(mock_client):\n    pass\n\n# Good: Use pytest-mock for cleaner syntax\ndef test_analysis_with_mocker(mocker):\n    mock_client = mocker.patch('k8s_tools.client.kubernetes_client')\n    pass\n\n# Avoid: Over-mocking internal logic\n# Don't mock what you're testing\n</code></pre>"},{"location":"development/testing/#performance-testing","title":"Performance Testing","text":"<pre><code>import pytest\nimport time\n\ndef test_analysis_performance():\n    \"\"\"Test that cluster analysis completes within acceptable time.\"\"\"\n    start_time = time.time()\n\n    # Perform analysis\n    result = analyzer.analyze_cluster()\n\n    execution_time = time.time() - start_time\n    assert execution_time &lt; 5.0  # Should complete within 5 seconds\n</code></pre>"},{"location":"development/testing/#related-documentation","title":"Related Documentation","text":"<ul> <li>Development Setup</li> <li>Contributing Guidelines</li> <li>Architecture Overview</li> </ul> <p> RULE mHRxidOov0WLb90jeiS2uG </p>"},{"location":"examples/advanced-workflows/","title":"Advanced Workflows","text":"<p>This document outlines advanced workflows and automation techniques using k8s-analyzer and k8s-reporter for complex Kubernetes analysis scenarios.</p>"},{"location":"examples/advanced-workflows/#overview","title":"Overview","text":"<p>Advanced K8s Tools workflows support:</p> <ul> <li>Automated Analysis Pipelines: Scripted analysis workflows</li> <li>Database Integration: SQLite-based persistent storage</li> <li>Batch Processing: Large-scale file processing</li> <li>Custom Reporting: Automated report generation</li> <li>CI/CD Integration: Pipeline automation</li> </ul>"},{"location":"examples/advanced-workflows/#advanced-k8s-analyzer-workflows","title":"Advanced k8s-analyzer Workflows","text":""},{"location":"examples/advanced-workflows/#multi-file-processing-pipeline","title":"Multi-File Processing Pipeline","text":"<p>Process and analyze multiple Kubernetes export files systematically:</p> <pre><code>#!/bin/bash\n# Advanced multi-file analysis pipeline\n\nSRC_DIR=\"./cluster-exports\"\nOUT_DIR=\"./analysis-results/$(date +%Y-%m-%d-%H%M%S)\"\nDB_FILE=\"$OUT_DIR/consolidated.db\"\n\nmkdir -p \"$OUT_DIR\"\n\n# Step 1: Batch analyze all files in directory\necho \"Starting batch analysis...\"\nk8s-analyzer batch-analyze \"$SRC_DIR\" \\\n    --recursive \\\n    --max-files 100 \\\n    --output \"$OUT_DIR/batch-analysis.json\" \\\n    --verbose\n\n# Step 2: Export to SQLite for querying\necho \"Exporting to SQLite database...\"\nk8s-analyzer export-directory-sqlite \"$SRC_DIR\" \"$DB_FILE\" \\\n    --recursive \\\n    --max-files 100\n\n# Step 3: Generate summary statistics\necho \"Generating database summary...\"\nk8s-analyzer db-summary \"$DB_FILE\" &gt; \"$OUT_DIR/summary.txt\"\n\n# Step 4: Query for problematic resources\necho \"Identifying issues...\"\nk8s-analyzer query-db \"$DB_FILE\" \\\n    --issues \\\n    --limit 50 &gt; \"$OUT_DIR/issues-report.txt\"\n\n# Step 5: Export to CSV for spreadsheet analysis\necho \"Exporting to CSV...\"\nk8s-analyzer export-csv \"$DB_FILE\" \"$OUT_DIR/csv-exports/\"\n\necho \"Analysis pipeline complete. Results in: $OUT_DIR\"\n</code></pre>"},{"location":"examples/advanced-workflows/#resource-health-monitoring-script","title":"Resource Health Monitoring Script","text":"<p>Automated script for monitoring resource health across multiple exports:</p> <pre><code>#!/bin/bash\n# Resource health monitoring and alerting\n\nDB_PATH=\"$1\"\nALERT_THRESHOLD=\"10\"  # Alert if more than 10 resources have issues\n\nif [ -z \"$DB_PATH\" ]; then\n    echo \"Usage: $0 &lt;database-path&gt;\"\n    exit 1\nfi\n\n# Check if database exists\nif [ ! -f \"$DB_PATH\" ]; then\n    echo \"Database not found: $DB_PATH\"\n    exit 1\nfi\n\n# Query for resources with issues\nISSUE_COUNT=$(k8s-analyzer query-db \"$DB_PATH\" --issues --limit 1000 | grep -c \"^|\")\nISSUE_COUNT=$((ISSUE_COUNT - 1))  # Subtract header row\n\necho \"Found $ISSUE_COUNT resources with issues\"\n\n# Generate detailed report if issues found\nif [ \"$ISSUE_COUNT\" -gt 0 ]; then\n    REPORT_FILE=\"health-report-$(date +%Y%m%d-%H%M%S).txt\"\n\n    echo \"Generating detailed health report: $REPORT_FILE\"\n    {\n        echo \"=== Kubernetes Cluster Health Report ===\"\n        echo \"Generated: $(date)\"\n        echo \"Database: $DB_PATH\"\n        echo \"Total Issues Found: $ISSUE_COUNT\"\n        echo \"\"\n\n        echo \"=== Resources with Issues ===\"\n        k8s-analyzer query-db \"$DB_PATH\" --issues --limit 100\n\n        echo \"\"\n        echo \"=== Database Summary ===\"\n        k8s-analyzer db-summary \"$DB_PATH\"\n\n    } &gt; \"$REPORT_FILE\"\n\n    # Alert if threshold exceeded\n    if [ \"$ISSUE_COUNT\" -gt \"$ALERT_THRESHOLD\" ]; then\n        echo \"\u26a0\ufe0f  ALERT: Issue count ($ISSUE_COUNT) exceeds threshold ($ALERT_THRESHOLD)\"\n        # Here you could send email, Slack notification, etc.\n    fi\nfi\n</code></pre>"},{"location":"examples/advanced-workflows/#comparative-analysis-workflow","title":"Comparative Analysis Workflow","text":"<p>Compare resource states across different time periods:</p> <pre><code>#!/bin/bash\n# Comparative analysis between two cluster states\n\nOLD_EXPORT=\"$1\"\nNEW_EXPORT=\"$2\"\nCOMPARE_DIR=\"./comparison-$(date +%Y%m%d-%H%M%S)\"\n\nif [ -z \"$OLD_EXPORT\" ] || [ -z \"$NEW_EXPORT\" ]; then\n    echo \"Usage: $0 &lt;old-export.yaml&gt; &lt;new-export.yaml&gt;\"\n    exit 1\nfi\n\nmkdir -p \"$COMPARE_DIR\"\n\n# Analyze both exports\necho \"Analyzing old state...\"\nk8s-analyzer analyze \"$OLD_EXPORT\" --output \"$COMPARE_DIR/old-analysis.json\"\nk8s-analyzer export-sqlite \"$OLD_EXPORT\" \"$COMPARE_DIR/old-state.db\"\n\necho \"Analyzing new state...\"\nk8s-analyzer analyze \"$NEW_EXPORT\" --output \"$COMPARE_DIR/new-analysis.json\"\nk8s-analyzer export-sqlite \"$NEW_EXPORT\" \"$COMPARE_DIR/new-state.db\"\n\n# Generate comparison reports\necho \"Generating comparison reports...\"\n{\n    echo \"=== Cluster State Comparison Report ===\"\n    echo \"Generated: $(date)\"\n    echo \"Old State: $OLD_EXPORT\"\n    echo \"New State: $NEW_EXPORT\"\n    echo \"\"\n\n    echo \"=== OLD STATE SUMMARY ===\"\n    k8s-analyzer db-summary \"$COMPARE_DIR/old-state.db\"\n\n    echo \"\"\n    echo \"=== NEW STATE SUMMARY ===\"\n    k8s-analyzer db-summary \"$COMPARE_DIR/new-state.db\"\n\n    echo \"\"\n    echo \"=== ISSUES IN OLD STATE ===\"\n    k8s-analyzer query-db \"$COMPARE_DIR/old-state.db\" --issues\n\n    echo \"\"\n    echo \"=== ISSUES IN NEW STATE ===\"\n    k8s-analyzer query-db \"$COMPARE_DIR/new-state.db\" --issues\n\n} &gt; \"$COMPARE_DIR/comparison-report.txt\"\n\necho \"Comparison complete. Results in: $COMPARE_DIR\"\n</code></pre>"},{"location":"examples/advanced-workflows/#advanced-k8s-reporter-integration","title":"Advanced k8s-reporter Integration","text":""},{"location":"examples/advanced-workflows/#automated-dashboard-deployment","title":"Automated Dashboard Deployment","text":"<p>Script to automatically deploy dashboards with pre-loaded data:</p> <pre><code>#!/bin/bash\n# Deploy k8s-reporter dashboard with automated data loading\n\nCLUSTER_EXPORT=\"$1\"\nPORT=\"${2:-8080}\"\nHOST=\"${3:-0.0.0.0}\"\n\nif [ -z \"$CLUSTER_EXPORT\" ]; then\n    echo \"Usage: $0 &lt;cluster-export.yaml&gt; [port] [host]\"\n    exit 1\nfi\n\n# Prepare data directory\nDATA_DIR=\"./dashboard-data-$(date +%Y%m%d-%H%M%S)\"\nmkdir -p \"$DATA_DIR\"\n\necho \"Preparing dashboard data...\"\n\n# Process cluster export\nk8s-analyzer analyze \"$CLUSTER_EXPORT\" --output \"$DATA_DIR/analysis.json\"\nk8s-analyzer export-sqlite \"$CLUSTER_EXPORT\" \"$DATA_DIR/cluster.db\"\n\n# Generate static reports\nk8s-analyzer report \"$CLUSTER_EXPORT\" --output \"$DATA_DIR/cluster-report.html\"\n\n# Export CSV for additional analysis\nk8s-analyzer export-csv \"$DATA_DIR/cluster.db\" \"$DATA_DIR/csv-exports/\"\n\necho \"Starting k8s-reporter dashboard...\"\necho \"Dashboard will be available at: http://$HOST:$PORT\"\necho \"Database location: $DATA_DIR/cluster.db\"\necho \"\"\n\n# Start the dashboard\nk8s-reporter \\\n    --host \"$HOST\" \\\n    --port \"$PORT\" \\\n    --database \"$DATA_DIR/cluster.db\" \\\n    --headless\n</code></pre>"},{"location":"examples/advanced-workflows/#production-dashboard-setup","title":"Production Dashboard Setup","text":"<p>Production-ready setup with monitoring and logging:</p> <pre><code>#!/bin/bash\n# Production k8s-reporter setup with monitoring\n\nPORT=\"8080\"\nLOG_DIR=\"./logs\"\nDATA_DIR=\"./data\"\nPID_FILE=\"./k8s-reporter.pid\"\n\nmkdir -p \"$LOG_DIR\" \"$DATA_DIR\"\n\n# Function to start the dashboard\nstart_dashboard() {\n    echo \"Starting k8s-reporter in production mode...\"\n\n    nohup k8s-reporter \\\n        --host 0.0.0.0 \\\n        --port \"$PORT\" \\\n        --headless \\\n        --database \"$DATA_DIR/cluster.db\" \\\n        &gt; \"$LOG_DIR/k8s-reporter.log\" 2&gt;&amp;1 &amp;\n\n    echo $! &gt; \"$PID_FILE\"\n    echo \"k8s-reporter started with PID $(cat $PID_FILE)\"\n    echo \"Logs: $LOG_DIR/k8s-reporter.log\"\n}\n\n# Function to stop the dashboard\nstop_dashboard() {\n    if [ -f \"$PID_FILE\" ]; then\n        PID=$(cat \"$PID_FILE\")\n        echo \"Stopping k8s-reporter (PID: $PID)...\"\n        kill \"$PID\"\n        rm -f \"$PID_FILE\"\n    else\n        echo \"No PID file found. Dashboard may not be running.\"\n    fi\n}\n\n# Function to check dashboard status\nstatus_dashboard() {\n    if [ -f \"$PID_FILE\" ]; then\n        PID=$(cat \"$PID_FILE\")\n        if ps -p \"$PID\" &gt; /dev/null; then\n            echo \"k8s-reporter is running (PID: $PID)\"\n            echo \"Dashboard URL: http://localhost:$PORT\"\n        else\n            echo \"PID file exists but process is not running\"\n            rm -f \"$PID_FILE\"\n        fi\n    else\n        echo \"k8s-reporter is not running\"\n    fi\n}\n\n# Handle command line arguments\ncase \"$1\" in\n    start)\n        start_dashboard\n        ;;\n    stop)\n        stop_dashboard\n        ;;\n    restart)\n        stop_dashboard\n        sleep 2\n        start_dashboard\n        ;;\n    status)\n        status_dashboard\n        ;;\n    *)\n        echo \"Usage: $0 {start|stop|restart|status}\"\n        exit 1\n        ;;\nesac\n</code></pre>"},{"location":"examples/advanced-workflows/#cicd-pipeline-integration","title":"CI/CD Pipeline Integration","text":""},{"location":"examples/advanced-workflows/#github-actions-workflow","title":"GitHub Actions Workflow","text":"<pre><code># .github/workflows/k8s-analysis.yml\nname: Kubernetes Analysis Pipeline\n\non:\n  schedule:\n    - cron: '0 6 * * *'  # Daily at 6 AM\n  workflow_dispatch:\n  push:\n    paths:\n      - 'k8s-manifests/**'\n\njobs:\n  analyze-kubernetes:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: '3.11'\n\n    - name: Install K8s Tools\n      run: |\n        pip install k8s-analyzer k8s-reporter\n\n    - name: Export cluster state\n      if: github.event_name == 'schedule'\n      env:\n        KUBECONFIG: ${{ secrets.KUBECONFIG }}\n      run: |\n        mkdir -p analysis-results\n        kubectl get all --all-namespaces -o yaml &gt; analysis-results/cluster-export.yaml\n\n    - name: Analyze Kubernetes manifests\n      run: |\n        mkdir -p analysis-results\n\n        # Analyze local manifests if they exist\n        if [ -d \"k8s-manifests\" ]; then\n          k8s-analyzer batch-analyze k8s-manifests \\\n            --output analysis-results/manifest-analysis.json\n\n          k8s-analyzer export-directory-sqlite k8s-manifests \\\n            analysis-results/manifests.db\n        fi\n\n        # Analyze cluster export if it exists\n        if [ -f \"analysis-results/cluster-export.yaml\" ]; then\n          k8s-analyzer analyze analysis-results/cluster-export.yaml \\\n            --output analysis-results/cluster-analysis.json\n\n          k8s-analyzer export-sqlite analysis-results/cluster-export.yaml \\\n            analysis-results/cluster.db\n\n          k8s-analyzer report analysis-results/cluster-export.yaml \\\n            --output analysis-results/cluster-report.html\n        fi\n\n    - name: Generate summary reports\n      run: |\n        # Generate summaries for each database\n        for db in analysis-results/*.db; do\n          if [ -f \"$db\" ]; then\n            echo \"=== Summary for $(basename $db) ===\" &gt;&gt; analysis-results/summary.txt\n            k8s-analyzer db-summary \"$db\" &gt;&gt; analysis-results/summary.txt\n            echo \"\" &gt;&gt; analysis-results/summary.txt\n\n            # Check for issues\n            k8s-analyzer query-db \"$db\" --issues &gt;&gt; analysis-results/issues.txt\n          fi\n        done\n\n    - name: Upload analysis results\n      uses: actions/upload-artifact@v4\n      with:\n        name: k8s-analysis-results-${{ github.run_number }}\n        path: analysis-results/\n        retention-days: 30\n\n    - name: Check for critical issues\n      run: |\n        # Fail the build if critical issues are found\n        if [ -f \"analysis-results/issues.txt\" ] &amp;&amp; [ -s \"analysis-results/issues.txt\" ]; then\n          echo \"Critical issues found in Kubernetes resources:\"\n          cat analysis-results/issues.txt\n          exit 1\n        fi\n</code></pre>"},{"location":"examples/advanced-workflows/#jenkins-pipeline","title":"Jenkins Pipeline","text":"<pre><code>// Jenkinsfile for K8s analysis pipeline\npipeline {\n    agent any\n\n    environment {\n        ANALYSIS_DIR = \"analysis-${BUILD_NUMBER}\"\n        DB_FILE = \"${ANALYSIS_DIR}/cluster.db\"\n    }\n\n    triggers {\n        cron('0 6 * * *')  // Daily at 6 AM\n    }\n\n    stages {\n        stage('Setup') {\n            steps {\n                sh 'mkdir -p ${ANALYSIS_DIR}'\n                sh 'pip install k8s-analyzer k8s-reporter'\n            }\n        }\n\n        stage('Export Cluster State') {\n            when {\n                triggeredBy 'TimerTrigger'\n            }\n            steps {\n                withKubeConfig([credentialsId: 'k8s-config']) {\n                    sh '''\n                        kubectl get all --all-namespaces -o yaml &gt; ${ANALYSIS_DIR}/cluster-export.yaml\n                        kubectl get pv,pvc --all-namespaces -o yaml &gt;&gt; ${ANALYSIS_DIR}/cluster-export.yaml\n                    '''\n                }\n            }\n        }\n\n        stage('Analyze Resources') {\n            parallel {\n                stage('Analyze Manifests') {\n                    when {\n                        changeset 'k8s-manifests/**'\n                    }\n                    steps {\n                        sh '''\n                            k8s-analyzer batch-analyze k8s-manifests \\\n                                --output ${ANALYSIS_DIR}/manifest-analysis.json\n                            k8s-analyzer export-directory-sqlite k8s-manifests \\\n                                ${ANALYSIS_DIR}/manifests.db\n                        '''\n                    }\n                }\n\n                stage('Analyze Cluster') {\n                    when {\n                        fileExists '${ANALYSIS_DIR}/cluster-export.yaml'\n                    }\n                    steps {\n                        sh '''\n                            k8s-analyzer analyze ${ANALYSIS_DIR}/cluster-export.yaml \\\n                                --output ${ANALYSIS_DIR}/cluster-analysis.json\n                            k8s-analyzer export-sqlite ${ANALYSIS_DIR}/cluster-export.yaml \\\n                                ${DB_FILE}\n                        '''\n                    }\n                }\n            }\n        }\n\n        stage('Generate Reports') {\n            steps {\n                sh '''\n                    # Generate HTML reports\n                    for yaml_file in ${ANALYSIS_DIR}/*.yaml; do\n                        if [ -f \"$yaml_file\" ]; then\n                            base_name=$(basename \"$yaml_file\" .yaml)\n                            k8s-analyzer report \"$yaml_file\" \\\n                                --output \"${ANALYSIS_DIR}/${base_name}-report.html\"\n                        fi\n                    done\n\n                    # Generate database summaries\n                    for db_file in ${ANALYSIS_DIR}/*.db; do\n                        if [ -f \"$db_file\" ]; then\n                            base_name=$(basename \"$db_file\" .db)\n                            k8s-analyzer db-summary \"$db_file\" &gt; \\\n                                \"${ANALYSIS_DIR}/${base_name}-summary.txt\"\n                        fi\n                    done\n                '''\n            }\n        }\n\n        stage('Quality Gates') {\n            steps {\n                script {\n                    sh '''\n                        # Check for resources with issues\n                        for db_file in ${ANALYSIS_DIR}/*.db; do\n                            if [ -f \"$db_file\" ]; then\n                                issue_count=$(k8s-analyzer query-db \"$db_file\" --issues | wc -l)\n                                echo \"Issues found in $(basename $db_file): $issue_count\"\n\n                                if [ \"$issue_count\" -gt 10 ]; then\n                                    echo \"QUALITY GATE FAILED: Too many issues found\"\n                                    exit 1\n                                fi\n                            fi\n                        done\n                    '''\n                }\n            }\n        }\n\n        stage('Deploy Dashboard') {\n            when {\n                branch 'main'\n            }\n            steps {\n                sh '''\n                    # Kill any existing dashboard\n                    pkill -f k8s-reporter || true\n\n                    # Start new dashboard in background\n                    nohup k8s-reporter \\\n                        --database ${DB_FILE} \\\n                        --host 0.0.0.0 \\\n                        --port 8080 \\\n                        --headless &gt; dashboard.log 2&gt;&amp;1 &amp;\n\n                    echo \"Dashboard started at http://localhost:8080\"\n                '''\n            }\n        }\n    }\n\n    post {\n        always {\n            archiveArtifacts artifacts: '${ANALYSIS_DIR}/**/*', \n                            allowEmptyArchive: true\n        }\n        failure {\n            emailext (\n                subject: \"K8s Analysis Pipeline Failed - Build ${BUILD_NUMBER}\",\n                body: \"\"\"The Kubernetes analysis pipeline has failed.\n                         Please check the build logs for details.\n\n                         Build URL: ${BUILD_URL}\"\"\",\n                to: '${DEFAULT_RECIPIENTS}'\n            )\n        }\n    }\n}\n</code></pre>"},{"location":"examples/advanced-workflows/#performance-optimization","title":"Performance Optimization","text":""},{"location":"examples/advanced-workflows/#large-scale-processing","title":"Large-Scale Processing","text":"<pre><code>#!/bin/bash\n# Optimized processing for large numbers of files\n\nSOURCE_DIR=\"$1\"\nMAX_CONCURRENT=\"${2:-4}\"\nBATCH_SIZE=\"${3:-50}\"\n\nif [ -z \"$SOURCE_DIR\" ]; then\n    echo \"Usage: $0 &lt;source-directory&gt; [max-concurrent] [batch-size]\"\n    exit 1\nfi\n\necho \"Processing directory: $SOURCE_DIR\"\necho \"Max concurrent jobs: $MAX_CONCURRENT\"\necho \"Batch size: $BATCH_SIZE\"\n\n# Create output directory\nOUTPUT_DIR=\"./bulk-processing-$(date +%Y%m%d-%H%M%S)\"\nmkdir -p \"$OUTPUT_DIR\"\n\n# Function to process a batch of files\nprocess_batch() {\n    local batch_id=\"$1\"\n    local batch_files=\"$2\"\n    local batch_output=\"$OUTPUT_DIR/batch-$batch_id\"\n\n    mkdir -p \"$batch_output\"\n\n    echo \"Processing batch $batch_id...\"\n\n    # Create temporary directory with batch files\n    temp_dir=\"/tmp/k8s-batch-$batch_id\"\n    mkdir -p \"$temp_dir\"\n\n    # Copy files to temp directory\n    echo \"$batch_files\" | while read -r file; do\n        if [ -n \"$file\" ]; then\n            cp \"$file\" \"$temp_dir/\"\n        fi\n    done\n\n    # Process the batch\n    k8s-analyzer batch-analyze \"$temp_dir\" \\\n        --output \"$batch_output/analysis.json\" \\\n        --max-files \"$BATCH_SIZE\"\n\n    k8s-analyzer export-directory-sqlite \"$temp_dir\" \\\n        \"$batch_output/batch.db\"\n\n    # Cleanup\n    rm -rf \"$temp_dir\"\n\n    echo \"Batch $batch_id complete\"\n}\n\n# Find all Kubernetes files\necho \"Discovering files...\"\nk8s-analyzer list-files \"$SOURCE_DIR\" --recursive &gt; \"$OUTPUT_DIR/all-files.txt\"\n\n# Split files into batches\ntotal_files=$(wc -l &lt; \"$OUTPUT_DIR/all-files.txt\")\ntotal_batches=$(( (total_files + BATCH_SIZE - 1) / BATCH_SIZE ))\n\necho \"Found $total_files files, creating $total_batches batches\"\n\n# Process batches in parallel\nbatch_id=0\nwhile IFS= read -r -d '' file; do\n    batch_files+=(\"$file\")\n\n    if [ ${#batch_files[@]} -eq \"$BATCH_SIZE\" ] || [ \"$batch_id\" -eq \"$total_batches\" ]; then\n        # Wait if we've reached max concurrent jobs\n        while [ $(jobs -r | wc -l) -ge \"$MAX_CONCURRENT\" ]; do\n            sleep 1\n        done\n\n        # Process batch in background\n        printf '%s\\n' \"${batch_files[@]}\" | process_batch \"$batch_id\" &amp;\n\n        # Reset for next batch\n        batch_files=()\n        ((batch_id++))\n    fi\ndone &lt; &lt;(find \"$SOURCE_DIR\" -name \"*.yaml\" -o -name \"*.yml\" -o -name \"*.json\" | head -1000 | tr '\\n' '\\0')\n\n# Wait for all background jobs to complete\nwait\n\necho \"All batches processed. Consolidating results...\"\n\n# Consolidate all batch databases\nCONSOLIDATED_DB=\"$OUTPUT_DIR/consolidated.db\"\nfirst_db=true\n\nfor batch_db in \"$OUTPUT_DIR\"/batch-*/batch.db; do\n    if [ -f \"$batch_db\" ]; then\n        if [ \"$first_db\" = true ]; then\n            cp \"$batch_db\" \"$CONSOLIDATED_DB\"\n            first_db=false\n        else\n            # Merge databases (simplified - would need custom script for real merging)\n            echo \"Would merge $batch_db into consolidated database\"\n        fi\n    fi\ndone\n\necho \"Bulk processing complete. Results in: $OUTPUT_DIR\"\necho \"Consolidated database: $CONSOLIDATED_DB\"\n</code></pre>"},{"location":"examples/advanced-workflows/#best-practices","title":"Best Practices","text":""},{"location":"examples/advanced-workflows/#error-handling-and-logging","title":"Error Handling and Logging","text":"<ul> <li>Always use <code>--verbose</code> flag for debugging</li> <li>Implement proper error handling in scripts</li> <li>Use structured logging with timestamps</li> <li>Store logs in centralized locations</li> </ul>"},{"location":"examples/advanced-workflows/#resource-management","title":"Resource Management","text":"<ul> <li>Use <code>--max-files</code> to prevent memory issues</li> <li>Implement batch processing for large datasets</li> <li>Monitor disk space when generating reports</li> <li>Clean up temporary files after processing</li> </ul>"},{"location":"examples/advanced-workflows/#security-considerations","title":"Security Considerations","text":"<ul> <li>Store sensitive kubeconfig files securely</li> <li>Use proper file permissions for database files</li> <li>Implement access controls for web dashboards</li> <li>Audit analysis results for sensitive information</li> </ul>"},{"location":"examples/advanced-workflows/#related-documentation","title":"Related Documentation","text":"<ul> <li>Basic Usage</li> <li>Multi-cluster Analysis</li> <li>Custom Dashboards</li> <li>CI/CD Integration</li> </ul>"},{"location":"examples/basic-usage/","title":"Basic Usage","text":"<p>This guide provides basic usage examples for K8s Tools, covering initial setup and common operations using both k8s-analyzer and k8s-reporter.</p>"},{"location":"examples/basic-usage/#initial-setup","title":"Initial Setup","text":"<p>Ensure K8s Tools components are installed:</p> <pre><code># Using pipx (recommended)\npipx install k8s-analyzer\npipx install k8s-reporter\n\n# Using pip\npip install k8s-analyzer\npip install k8s-reporter\n</code></pre> <p>Check the versions to verify installation:</p> <pre><code>k8s-analyzer --help\nk8s-reporter --help\n</code></pre>"},{"location":"examples/basic-usage/#k8s-analyzer-basic-operations","title":"k8s-analyzer: Basic Operations","text":""},{"location":"examples/basic-usage/#parsing-kubernetes-exports","title":"Parsing Kubernetes Exports","text":"<p>Parse a kubectl export file to extract resources:</p> <pre><code># Parse a single file\nk8s-analyzer parse cluster-export.yaml\n\n# Parse with additional files\nk8s-analyzer parse cluster-export.yaml --additional deployment1.yaml --additional service1.yaml\n\n# Save parsed results to JSON\nk8s-analyzer parse cluster-export.yaml --output parsed-resources.json\n</code></pre>"},{"location":"examples/basic-usage/#analyzing-resource-relationships","title":"Analyzing Resource Relationships","text":"<p>Analyze Kubernetes resources and build relationship mappings:</p> <pre><code># Basic analysis\nk8s-analyzer analyze cluster-export.yaml\n\n# Analysis with verbose output\nk8s-analyzer analyze cluster-export.yaml --verbose\n\n# Save analysis results\nk8s-analyzer analyze cluster-export.yaml --output analysis-results.json\n</code></pre>"},{"location":"examples/basic-usage/#generating-html-reports","title":"Generating HTML Reports","text":"<p>Create comprehensive HTML reports from analyzed data:</p> <pre><code># Generate report with default name\nk8s-analyzer report cluster-export.yaml\n\n# Custom report name\nk8s-analyzer report cluster-export.yaml --output custom-report.html\n</code></pre>"},{"location":"examples/basic-usage/#visualizing-resource-relationships","title":"Visualizing Resource Relationships","text":"<p>Display resource relationship graphs:</p> <pre><code># Show all relationships\nk8s-analyzer graph cluster-export.yaml\n\n# Filter by namespace\nk8s-analyzer graph cluster-export.yaml --namespace production\n\n# Filter by resource type\nk8s-analyzer graph cluster-export.yaml --type Deployment\n</code></pre>"},{"location":"examples/basic-usage/#validating-configurations","title":"Validating Configurations","text":"<p>Validate resource configurations and identify issues:</p> <pre><code>k8s-analyzer validate cluster-export.yaml --verbose\n</code></pre>"},{"location":"examples/basic-usage/#working-with-directories","title":"Working with Directories","text":""},{"location":"examples/basic-usage/#scanning-for-kubernetes-files","title":"Scanning for Kubernetes Files","text":"<p>Discover and list Kubernetes files in a directory:</p> <pre><code># List files in current directory\nk8s-analyzer list-files .\n\n# List files with custom patterns\nk8s-analyzer list-files ./k8s-configs --pattern \"*.yaml\" --pattern \"*.yml\"\n\n# Non-recursive scan\nk8s-analyzer list-files ./manifests --no-recursive\n</code></pre>"},{"location":"examples/basic-usage/#batch-processing","title":"Batch Processing","text":"<p>Process multiple Kubernetes files at once:</p> <pre><code># Scan and parse directory\nk8s-analyzer scan ./k8s-manifests\n\n# Batch analyze directory\nk8s-analyzer batch-analyze ./k8s-manifests --output batch-results.json\n\n# Limit number of files processed\nk8s-analyzer batch-analyze ./k8s-manifests --max-files 50\n</code></pre>"},{"location":"examples/basic-usage/#sqlite-database-operations","title":"SQLite Database Operations","text":""},{"location":"examples/basic-usage/#exporting-to-sqlite","title":"Exporting to SQLite","text":"<p>Export analyzed data to SQLite for persistent storage:</p> <pre><code># Export single file\nk8s-analyzer export-sqlite cluster-export.yaml cluster.db\n\n# Export multiple files\nk8s-analyzer export-multiple-sqlite file1.yaml file2.yaml file3.yaml --database cluster.db\n\n# Export entire directory\nk8s-analyzer export-directory-sqlite ./k8s-configs cluster.db\n</code></pre>"},{"location":"examples/basic-usage/#querying-sqlite-database","title":"Querying SQLite Database","text":"<p>Query the SQLite database for specific resources:</p> <pre><code># Query all resources\nk8s-analyzer query-db cluster.db\n\n# Filter by resource kind\nk8s-analyzer query-db cluster.db --kind Deployment\n\n# Filter by namespace\nk8s-analyzer query-db cluster.db --namespace production\n\n# Filter by health status\nk8s-analyzer query-db cluster.db --health error\n\n# Show only resources with issues\nk8s-analyzer query-db cluster.db --issues\n</code></pre>"},{"location":"examples/basic-usage/#database-statistics","title":"Database Statistics","text":"<p>Get summary statistics from your SQLite database:</p> <pre><code>k8s-analyzer db-summary cluster.db\n</code></pre>"},{"location":"examples/basic-usage/#exporting-to-csv","title":"Exporting to CSV","text":"<p>Export SQLite database contents to CSV files:</p> <pre><code>k8s-analyzer export-csv cluster.db ./csv-exports/\n</code></pre>"},{"location":"examples/basic-usage/#k8s-reporter-web-dashboard","title":"k8s-reporter: Web Dashboard","text":""},{"location":"examples/basic-usage/#launching-the-web-ui","title":"Launching the Web UI","text":"<p>Start the Streamlit-based web dashboard:</p> <pre><code># Launch with default settings\nk8s-reporter\n\n# Launch on custom port\nk8s-reporter --port 8080\n\n# Launch with custom host\nk8s-reporter --host 0.0.0.0 --port 8080\n</code></pre>"},{"location":"examples/basic-usage/#loading-existing-databases","title":"Loading Existing Databases","text":"<p>Pre-load a SQLite database when starting the dashboard:</p> <pre><code>k8s-reporter --database cluster.db\n</code></pre>"},{"location":"examples/basic-usage/#production-deployment","title":"Production Deployment","text":"<p>Run in headless mode for production:</p> <pre><code># Headless mode (no browser auto-open)\nk8s-reporter --headless --host 0.0.0.0 --port 8080\n\n# With debug mode for troubleshooting\nk8s-reporter --debug --database cluster.db\n</code></pre>"},{"location":"examples/basic-usage/#common-workflows","title":"Common Workflows","text":""},{"location":"examples/basic-usage/#analyze-and-visualize","title":"Analyze and Visualize","text":"<pre><code># 1. Export cluster state\nkubectl get all --all-namespaces -o yaml &gt; cluster-export.yaml\n\n# 2. Analyze the export\nk8s-analyzer analyze cluster-export.yaml --output analysis.json\n\n# 3. Export to SQLite for persistence\nk8s-analyzer export-sqlite cluster-export.yaml cluster.db\n\n# 4. Launch web dashboard\nk8s-reporter --database cluster.db\n</code></pre>"},{"location":"examples/basic-usage/#batch-processing-workflow","title":"Batch Processing Workflow","text":"<pre><code># 1. Process directory of manifest files\nk8s-analyzer batch-analyze ./kubernetes-manifests --output batch-analysis.json\n\n# 2. Export to SQLite\nk8s-analyzer export-directory-sqlite ./kubernetes-manifests manifests.db\n\n# 3. Generate HTML report\nk8s-analyzer report ./kubernetes-manifests/app-deployment.yaml --output deployment-report.html\n\n# 4. Query for specific issues\nk8s-analyzer query-db manifests.db --issues --limit 20\n</code></pre>"},{"location":"examples/basic-usage/#validation-and-health-check","title":"Validation and Health Check","text":"<pre><code># 1. Validate configurations\nk8s-analyzer validate cluster-export.yaml\n\n# 2. Check relationship graph\nk8s-analyzer graph cluster-export.yaml --namespace kube-system\n\n# 3. Export for further analysis\nk8s-analyzer export-csv cluster.db ./health-reports/\n</code></pre>"},{"location":"examples/basic-usage/#tips-and-best-practices","title":"Tips and Best Practices","text":""},{"location":"examples/basic-usage/#performance-optimization","title":"Performance Optimization","text":"<ul> <li>Use <code>--max-files</code> to limit processing when working with large directories</li> <li>Enable <code>--verbose</code> for debugging but disable for production scripts</li> <li>Use SQLite export for persistent storage of analysis results</li> </ul>"},{"location":"examples/basic-usage/#file-organization","title":"File Organization","text":"<pre><code># Organize exports by date\nmkdir -p exports/$(date +%Y-%m-%d)\nk8s-analyzer analyze cluster-export.yaml --output exports/$(date +%Y-%m-%d)/analysis.json\n</code></pre>"},{"location":"examples/basic-usage/#automation-scripts","title":"Automation Scripts","text":"<pre><code>#!/bin/bash\n# Daily cluster analysis script\nDATE=$(date +%Y-%m-%d)\nEXPORT_DIR=\"daily-exports/$DATE\"\n\nmkdir -p \"$EXPORT_DIR\"\n\n# Export cluster state\nkubectl get all --all-namespaces -o yaml &gt; \"$EXPORT_DIR/cluster-export.yaml\"\n\n# Analyze and export to SQLite\nk8s-analyzer analyze \"$EXPORT_DIR/cluster-export.yaml\" --output \"$EXPORT_DIR/analysis.json\"\nk8s-analyzer export-sqlite \"$EXPORT_DIR/cluster-export.yaml\" \"$EXPORT_DIR/cluster.db\"\n\n# Generate HTML report\nk8s-analyzer report \"$EXPORT_DIR/cluster-export.yaml\" --output \"$EXPORT_DIR/report.html\"\n\necho \"Analysis complete for $DATE\"\n</code></pre>"},{"location":"examples/basic-usage/#troubleshooting","title":"Troubleshooting","text":""},{"location":"examples/basic-usage/#common-issues","title":"Common Issues","text":"<p>File parsing errors: Ensure YAML/JSON files are valid <pre><code># Test file validity\nyaml-lint cluster-export.yaml\n</code></pre></p> <p>SQLite database locked: Close any open database connections <pre><code># Check if database is accessible\nk8s-analyzer db-summary cluster.db\n</code></pre></p> <p>Web UI not starting: Check if port is available <pre><code># Test different port\nk8s-reporter --port 8502\n</code></pre></p>"},{"location":"examples/basic-usage/#getting-support","title":"Getting Support","text":"<ul> <li>Check command help: <code>k8s-analyzer [command] --help</code></li> <li>Enable verbose logging: <code>--verbose</code> flag</li> <li>Review generated logs and error messages</li> <li>GitHub Issues</li> </ul>"},{"location":"examples/basic-usage/#related-documentation","title":"Related Documentation","text":"<ul> <li>Advanced Workflows</li> <li>Multi-cluster Analysis</li> <li>Custom Dashboards</li> </ul>"},{"location":"examples/custom-dashboards/","title":"Custom Dashboards [ongoing]","text":"<p>This guide shows how to use k8s-reporter's Streamlit-based web dashboard for visualizing Kubernetes cluster analysis data from k8s-analyzer.</p>"},{"location":"examples/custom-dashboards/#overview","title":"Overview","text":"<p>k8s-reporter provides:</p> <ul> <li>Interactive Web UI: Streamlit-based dashboard for exploring analysis results</li> <li>Database Integration: Direct connection to SQLite databases from k8s-analyzer</li> <li>Multiple Views: Various visualization options for different data aspects</li> <li>Export Capabilities: Download results and generate reports</li> </ul>"},{"location":"examples/custom-dashboards/#getting-started-with-k8s-reporter","title":"Getting Started with k8s-reporter","text":""},{"location":"examples/custom-dashboards/#basic-dashboard-launch","title":"Basic Dashboard Launch","text":"<p>Start the web dashboard with a pre-analyzed database:</p> <pre><code># First, create a database with k8s-analyzer\nk8s-analyzer export-sqlite cluster-export.yaml cluster.db\n\n# Launch k8s-reporter dashboard\nk8s-reporter --database cluster.db\n</code></pre> <p>The dashboard will be available at <code>http://localhost:8501</code> by default.</p>"},{"location":"examples/custom-dashboards/#custom-configuration","title":"Custom Configuration","text":"<p>Launch with custom settings:</p> <pre><code># Custom port and host\nk8s-reporter --database cluster.db --port 8080 --host 0.0.0.0\n\n# Headless mode (no auto-open browser)\nk8s-reporter --database cluster.db --headless\n\n# Debug mode for development\nk8s-reporter --database cluster.db --debug\n</code></pre>"},{"location":"examples/custom-dashboards/#extending-with-plugins","title":"Extending with Plugins","text":""},{"location":"examples/custom-dashboards/#developing-plugins","title":"Developing Plugins","text":"<p>Write plugins to capture specific cluster views and data:</p> <pre><code>from k8s_tools.plugins import PluginBase\n\nclass MyDashboardPlugin(PluginBase):\n    def register(self, registry):\n        registry.add_view('custom-view', self.custom_view)\n\n    def custom_view(self):\n        # Implement custom data logic\n        return \"Custom View Results\"\n</code></pre>"},{"location":"examples/custom-dashboards/#deploying-plugins","title":"Deploying Plugins","text":"<p>Include plugins in the K8s Tools configuration:</p> <pre><code># plugins.yaml\nplugins:\n  - path: /path/to/plugin1.py\n  - path: /path/to/plugin2.py\n</code></pre> <p>Activate plugins with K8s Tools:</p> <pre><code>k8s-analyzer analyze --config my-config.yaml --plugins plugins.yaml\n</code></pre>"},{"location":"examples/custom-dashboards/#performance-optimization","title":"Performance Optimization","text":"<ol> <li>Optimize Queries: Efficient query design enhances performance</li> <li>Cache Results: Save query results to reduce load</li> <li>Separate Environments: Run custom dashboards in non-production environments</li> </ol>"},{"location":"examples/custom-dashboards/#security-considerations","title":"Security Considerations","text":"<ul> <li>Access Control: Manage user access to dashboards</li> <li>Data Protection: Encrypt sensitive data</li> </ul>"},{"location":"examples/custom-dashboards/#troubleshooting","title":"Troubleshooting","text":""},{"location":"examples/custom-dashboards/#common-issues","title":"Common Issues","text":"<p>Data Mismatch: Ensure the data source aligns with dashboard expectations. Plugin Load Errors: Validate plugin paths and configurations.</p>"},{"location":"examples/custom-dashboards/#best-practices","title":"Best Practices","text":"<ol> <li>Iterative Testing: Incremental dashboard testing ensures accuracy</li> <li>Community Templates: Leverage community templates for common use cases</li> </ol>"},{"location":"examples/custom-dashboards/#faq","title":"FAQ","text":"<p>Q: How do I reset a panel? A: Use the \"Edit\" function to restore default settings or adjust queries.</p>"},{"location":"examples/custom-dashboards/#related-documentation","title":"Related Documentation","text":"<ul> <li>Basic Usage</li> <li>Advanced Workflows</li> <li>CI/CD Integration</li> </ul>"},{"location":"examples/multi-cluster/","title":"Multi-cluster Analysis","text":"<p>This guide covers analyzing multiple Kubernetes clusters using k8s-analyzer and k8s-reporter, focusing on processing multiple cluster exports and consolidating results.</p>"},{"location":"examples/multi-cluster/#overview","title":"Overview","text":"<p>Multi-cluster analysis with K8s Tools enables:</p> <ul> <li>Batch Processing: Analyze exports from multiple clusters</li> <li>Comparative Analysis: Compare resource states across different clusters</li> <li>Consolidated Storage: Store all cluster data in unified SQLite databases</li> <li>Cross-cluster Reporting: Generate reports across multiple cluster states</li> </ul>"},{"location":"examples/multi-cluster/#prerequisites","title":"Prerequisites","text":""},{"location":"examples/multi-cluster/#exporting-cluster-data","title":"Exporting Cluster Data","text":"<p>First, export data from each cluster you want to analyze:</p> <pre><code># Export from production cluster\nkubectl --context=production get all --all-namespaces -o yaml &gt; production-export.yaml\n\n# Export from staging cluster\nkubectl --context=staging get all --all-namespaces -o yaml &gt; staging-export.yaml\n\n# Export from development cluster\nkubectl --context=development get all --all-namespaces -o yaml &gt; development-export.yaml\n</code></pre>"},{"location":"examples/multi-cluster/#directory-structure","title":"Directory Structure","text":"<p>Organize cluster exports in a structured directory:</p> <pre><code>multi-cluster-analysis/\n\u251c\u2500\u2500 exports/\n\u2502   \u251c\u2500\u2500 production/\n\u2502   \u2502   \u251c\u2500\u2500 cluster-export.yaml\n\u2502   \u2502   \u2514\u2500\u2500 additional-resources.yaml\n\u2502   \u251c\u2500\u2500 staging/\n\u2502   \u2502   \u2514\u2500\u2500 cluster-export.yaml\n\u2502   \u2514\u2500\u2500 development/\n\u2502       \u2514\u2500\u2500 cluster-export.yaml\n\u251c\u2500\u2500 results/\n\u2502   \u251c\u2500\u2500 production/\n\u2502   \u251c\u2500\u2500 staging/\n\u2502   \u2514\u2500\u2500 development/\n\u2514\u2500\u2500 consolidated/\n    \u251c\u2500\u2500 all-clusters.db\n    \u2514\u2500\u2500 comparison-report.html\n</code></pre>"},{"location":"examples/multi-cluster/#running-multi-cluster-analysis","title":"Running Multi-cluster Analysis","text":""},{"location":"examples/multi-cluster/#sequential-analysis","title":"Sequential Analysis","text":"<p>Analyze each cluster export individually:</p> <pre><code># Analyze production cluster\nk8s-analyzer analyze exports/production/cluster-export.yaml \\\n  --output results/production/analysis.json\n\n# Analyze staging cluster\nk8s-analyzer analyze exports/staging/cluster-export.yaml \\\n  --output results/staging/analysis.json\n\n# Analyze development cluster\nk8s-analyzer analyze exports/development/cluster-export.yaml \\\n  --output results/development/analysis.json\n</code></pre>"},{"location":"examples/multi-cluster/#parallel-analysis-script","title":"Parallel Analysis Script","text":"<p>Process multiple clusters simultaneously:</p> <pre><code>#!/bin/bash\n# multi-cluster-analysis.sh\n\nCLUSTERS=(\"production\" \"staging\" \"development\")\nEXPORT_DIR=\"exports\"\nRESULT_DIR=\"results\"\n\nmkdir -p \"$RESULT_DIR\"\n\n# Function to analyze a single cluster\nanalyze_cluster() {\n    local cluster=$1\n    local export_file=\"$EXPORT_DIR/$cluster/cluster-export.yaml\"\n    local result_dir=\"$RESULT_DIR/$cluster\"\n\n    echo \"[$(date)] Starting analysis for $cluster...\"\n\n    if [ ! -f \"$export_file\" ]; then\n        echo \"Warning: Export file not found for $cluster: $export_file\"\n        return 1\n    fi\n\n    mkdir -p \"$result_dir\"\n\n    # Analyze the cluster export\n    k8s-analyzer analyze \"$export_file\" \\\n        --output \"$result_dir/analysis.json\" \\\n        --verbose\n\n    # Generate HTML report\n    k8s-analyzer report \"$export_file\" \\\n        --output \"$result_dir/report.html\"\n\n    # Export to SQLite\n    k8s-analyzer export-sqlite \"$export_file\" \\\n        \"$result_dir/cluster.db\"\n\n    # Generate validation report\n    k8s-analyzer validate \"$export_file\" &gt; \"$result_dir/validation.txt\" 2&gt;&amp;1\n\n    echo \"[$(date)] Completed analysis for $cluster\"\n}\n\n# Run analysis for each cluster in parallel\nfor cluster in \"${CLUSTERS[@]}\"; do\n    analyze_cluster \"$cluster\" &amp;\ndone\n\n# Wait for all background jobs to complete\nwait\n\necho \"[$(date)] All cluster analyses completed!\"\n</code></pre>"},{"location":"examples/multi-cluster/#batch-processing-with-multiple-files","title":"Batch Processing with Multiple Files","text":"<p>Use k8s-analyzer's batch capabilities:</p> <pre><code>#!/bin/bash\n# batch-multi-cluster.sh\n\n# Process all cluster exports in one batch\nk8s-analyzer export-multiple-sqlite \\\n    exports/production/cluster-export.yaml \\\n    exports/staging/cluster-export.yaml \\\n    exports/development/cluster-export.yaml \\\n    --database consolidated/all-clusters.db \\\n    --batch-size 5 \\\n    --verbose\n\necho \"All clusters exported to consolidated database\"\n</code></pre>"},{"location":"examples/multi-cluster/#using-make-for-orchestration","title":"Using Make for Orchestration","text":"<pre><code># Makefile for multi-cluster analysis\n.PHONY: analyze-all export-all consolidate clean\n\nEXPORT_DIR = exports\nRESULT_DIR = results\nCONSOLIDATED_DIR = consolidated\n\nCLUSTERS = production staging development\n\nanalyze-all: $(addprefix analyze-, $(CLUSTERS))\n\nanalyze-%:\n    @echo \"Analyzing cluster: $*\"\n    @mkdir -p $(RESULT_DIR)/$*\n    k8s-analyzer analyze $(EXPORT_DIR)/$*/cluster-export.yaml \\\n        --output $(RESULT_DIR)/$*/analysis.json\n    k8s-analyzer report $(EXPORT_DIR)/$*/cluster-export.yaml \\\n        --output $(RESULT_DIR)/$*/report.html\n    k8s-analyzer export-sqlite $(EXPORT_DIR)/$*/cluster-export.yaml \\\n        $(RESULT_DIR)/$*/cluster.db\n\nexport-all: analyze-all\n    @echo \"Consolidating all cluster databases...\"\n    @mkdir -p $(CONSOLIDATED_DIR)\n    k8s-analyzer export-multiple-sqlite \\\n        $(wildcard $(RESULT_DIR)/*/cluster.db) \\\n        --database $(CONSOLIDATED_DIR)/all-clusters.db\n\nconsolidate: export-all\n    @echo \"Generating consolidated reports...\"\n    k8s-analyzer db-summary $(CONSOLIDATED_DIR)/all-clusters.db \\\n        &gt; $(CONSOLIDATED_DIR)/summary.txt\n    k8s-analyzer query-db $(CONSOLIDATED_DIR)/all-clusters.db \\\n        --issues &gt; $(CONSOLIDATED_DIR)/issues-report.txt\n    k8s-analyzer export-csv $(CONSOLIDATED_DIR)/all-clusters.db \\\n        $(CONSOLIDATED_DIR)/csv-exports/\n\nclean:\n    rm -rf $(RESULT_DIR)/* $(CONSOLIDATED_DIR)/*\n</code></pre>"},{"location":"examples/multi-cluster/#consolidated-reporting-and-analysis","title":"Consolidated Reporting and Analysis","text":""},{"location":"examples/multi-cluster/#database-consolidation","title":"Database Consolidation","text":"<p>Combine multiple cluster databases for unified analysis:</p> <pre><code>#!/bin/bash\n# consolidate-clusters.sh\n\nCONSOLIDATED_DB=\"consolidated/all-clusters.db\"\nmkdir -p consolidated\n\n# Export all cluster data to a single consolidated database\nk8s-analyzer export-multiple-sqlite \\\n    results/production/cluster.db \\\n    results/staging/cluster.db \\\n    results/development/cluster.db \\\n    --database \"$CONSOLIDATED_DB\" \\\n    --batch-size 10\n\necho \"Consolidated database created: $CONSOLIDATED_DB\"\n</code></pre>"},{"location":"examples/multi-cluster/#cross-cluster-analysis","title":"Cross-cluster Analysis","text":"<p>Analyze patterns across all clusters:</p> <pre><code>#!/bin/bash\n# cross-cluster-analysis.sh\n\nDB=\"consolidated/all-clusters.db\"\nREPORT_DIR=\"consolidated/reports\"\n\nmkdir -p \"$REPORT_DIR\"\n\necho \"=== Multi-Cluster Analysis Report ===\" &gt; \"$REPORT_DIR/analysis.txt\"\necho \"Generated: $(date)\" &gt;&gt; \"$REPORT_DIR/analysis.txt\"\necho \"\" &gt;&gt; \"$REPORT_DIR/analysis.txt\"\n\n# Overall statistics\necho \"=== OVERALL STATISTICS ===\" &gt;&gt; \"$REPORT_DIR/analysis.txt\"\nk8s-analyzer db-summary \"$DB\" &gt;&gt; \"$REPORT_DIR/analysis.txt\"\necho \"\" &gt;&gt; \"$REPORT_DIR/analysis.txt\"\n\n# Resources with issues across all clusters\necho \"=== CROSS-CLUSTER ISSUES ===\" &gt;&gt; \"$REPORT_DIR/analysis.txt\"\nk8s-analyzer query-db \"$DB\" --issues --limit 100 &gt;&gt; \"$REPORT_DIR/analysis.txt\"\necho \"\" &gt;&gt; \"$REPORT_DIR/analysis.txt\"\n\n# Export to CSV for detailed analysis\necho \"Exporting to CSV...\"\nk8s-analyzer export-csv \"$DB\" \"$REPORT_DIR/csv/\"\n\necho \"Cross-cluster analysis complete: $REPORT_DIR\"\n</code></pre>"},{"location":"examples/multi-cluster/#dashboard-integration-with-k8s-reporter","title":"Dashboard Integration with k8s-reporter","text":""},{"location":"examples/multi-cluster/#multi-cluster-dashboard","title":"Multi-cluster Dashboard","text":"<p>Launch k8s-reporter with consolidated database:</p> <pre><code>#!/bin/bash\n# launch-multi-cluster-dashboard.sh\n\nCONSOLIDATED_DB=\"consolidated/all-clusters.db\"\nPORT=\"8080\"\nHOST=\"0.0.0.0\"\n\n# Ensure consolidated database exists\nif [ ! -f \"$CONSOLIDATED_DB\" ]; then\n    echo \"Error: Consolidated database not found: $CONSOLIDATED_DB\"\n    echo \"Run consolidation script first\"\n    exit 1\nfi\n\necho \"Starting multi-cluster dashboard...\"\necho \"Database: $CONSOLIDATED_DB\"\necho \"URL: http://$HOST:$PORT\"\necho \"\"\n\n# Start k8s-reporter with consolidated data\nk8s-reporter \\\n    --database \"$CONSOLIDATED_DB\" \\\n    --host \"$HOST\" \\\n    --port \"$PORT\" \\\n    --headless\n</code></pre>"},{"location":"examples/multi-cluster/#automated-multi-cluster-pipeline","title":"Automated Multi-cluster Pipeline","text":"<p>Complete end-to-end automation:</p> <pre><code>#!/bin/bash\n# complete-multi-cluster-pipeline.sh\n\nset -e  # Exit on any error\n\nCLUSTERS=(\"production\" \"staging\" \"development\")\nTIMESTAMP=$(date +%Y%m%d-%H%M%S)\nWORK_DIR=\"multi-cluster-$TIMESTAMP\"\nCONSOLIDATED_DB=\"$WORK_DIR/all-clusters.db\"\n\necho \"Starting multi-cluster analysis pipeline...\"\necho \"Working directory: $WORK_DIR\"\n\n# Step 1: Create working directory\nmkdir -p \"$WORK_DIR\"/{exports,results,consolidated}\n\n# Step 2: Export cluster data (assuming kubectl contexts are configured)\necho \"Exporting cluster data...\"\nfor cluster in \"${CLUSTERS[@]}\"; do\n    echo \"Exporting $cluster cluster...\"\n    kubectl --context=\"$cluster\" get all --all-namespaces -o yaml &gt; \\\n        \"$WORK_DIR/exports/$cluster-export.yaml\"\ndone\n\n# Step 3: Analyze each cluster\necho \"Analyzing clusters...\"\nfor cluster in \"${CLUSTERS[@]}\"; do\n    export_file=\"$WORK_DIR/exports/$cluster-export.yaml\"\n    result_dir=\"$WORK_DIR/results/$cluster\"\n\n    mkdir -p \"$result_dir\"\n\n    echo \"Analyzing $cluster...\"\n    k8s-analyzer analyze \"$export_file\" \\\n        --output \"$result_dir/analysis.json\"\n\n    k8s-analyzer export-sqlite \"$export_file\" \\\n        \"$result_dir/cluster.db\"\n\n    k8s-analyzer report \"$export_file\" \\\n        --output \"$result_dir/report.html\"\ndone\n\n# Step 4: Consolidate results\necho \"Consolidating results...\"\nk8s-analyzer export-multiple-sqlite \\\n    \"$WORK_DIR\"/results/*/cluster.db \\\n    --database \"$CONSOLIDATED_DB\"\n\n# Step 5: Generate consolidated reports\necho \"Generating consolidated reports...\"\nk8s-analyzer db-summary \"$CONSOLIDATED_DB\" &gt; \\\n    \"$WORK_DIR/consolidated/summary.txt\"\n\nk8s-analyzer query-db \"$CONSOLIDATED_DB\" --issues &gt; \\\n    \"$WORK_DIR/consolidated/issues.txt\"\n\nk8s-analyzer export-csv \"$CONSOLIDATED_DB\" \\\n    \"$WORK_DIR/consolidated/csv/\"\n\n# Step 6: Launch dashboard\necho \"Launching dashboard...\"\necho \"Results available in: $WORK_DIR\"\necho \"Dashboard URL: http://localhost:8080\"\n\nk8s-reporter \\\n    --database \"$CONSOLIDATED_DB\" \\\n    --port 8080 \\\n    --host 0.0.0.0\n</code></pre>"},{"location":"examples/multi-cluster/#best-practices","title":"Best Practices","text":""},{"location":"examples/multi-cluster/#security-considerations","title":"Security Considerations","text":"<ol> <li>Kubeconfig Management: Store kubeconfigs securely</li> <li>Access Controls: Use least-privilege access for analysis</li> <li>Network Segmentation: Ensure proper network isolation between clusters</li> </ol>"},{"location":"examples/multi-cluster/#performance-optimization","title":"Performance Optimization","text":"<ol> <li>Parallel Processing: Run cluster analyses in parallel</li> <li>Resource Limits: Set appropriate resource limits for analysis containers</li> <li>Caching: Cache results to avoid redundant analyses</li> </ol>"},{"location":"examples/multi-cluster/#operational-guidelines","title":"Operational Guidelines","text":"<ol> <li>Standardization: Use consistent naming conventions across clusters</li> <li>Automation: Automate analysis scheduling and reporting</li> <li>Monitoring: Set up alerts for analysis failures or anomalies</li> </ol>"},{"location":"examples/multi-cluster/#troubleshooting","title":"Troubleshooting","text":""},{"location":"examples/multi-cluster/#common-issues","title":"Common Issues","text":""},{"location":"examples/multi-cluster/#kubeconfig-access-errors","title":"Kubeconfig Access Errors","text":"<pre><code># Test kubeconfig access\nkubectl --kubeconfig ~/.kube/prod-config cluster-info\n</code></pre>"},{"location":"examples/multi-cluster/#resource-conflicts","title":"Resource Conflicts","text":"<pre><code># Check resource availability before analysis\nkubectl --kubeconfig ~/.kube/prod-config top nodes\n</code></pre>"},{"location":"examples/multi-cluster/#debugging-multi-cluster-issues","title":"Debugging Multi-cluster Issues","text":"<pre><code># Enable verbose logging\nk8s-analyzer analyze --verbose --config multi-cluster-config.yaml\n\n# Test individual cluster connectivity\nk8s-analyzer test-connection --cluster production\n</code></pre>"},{"location":"examples/multi-cluster/#related-documentation","title":"Related Documentation","text":"<ul> <li>Basic Usage</li> <li>Advanced Workflows</li> <li>CI/CD Integration</li> <li>Docker Deployment</li> </ul> <p> RULE 9aelDXM62tUDmHUQUL8XlE RULE VtweVW31OVFWgQwKe1SXqm </p>"},{"location":"reference/cli-commands/","title":"\ud83d\uddd2\ufe0f CLI Commands Reference","text":"<p>This document provides a comprehensive reference for all CLI commands available in the k8s-tools suite, offering detailed information on their usage, options, arguments, and practical examples.</p>"},{"location":"reference/cli-commands/#k8s-analyzer-commands","title":"k8s-analyzer Commands","text":""},{"location":"reference/cli-commands/#analyzer-analyze","title":"<code>analyzer analyze</code>","text":"<p>Analyzes the current state of the Kubernetes cluster or provided YAML files.</p> <pre><code>k8s-analyzer analyze [OPTIONS]\n</code></pre> <p>Options: - <code>--output</code>: Path to output file where analysis result will be stored. - <code>--stdin</code>: Read input from standard input. - <code>--verbose</code>: Enable verbose output for detailed analysis logs.</p> <p>Examples: - Analyze current cluster: <code>k8s-analyzer analyze</code> - Analyze and export results: <code>k8s-analyzer analyze --output analysis.json</code></p>"},{"location":"reference/cli-commands/#analyzer-report","title":"<code>analyzer report</code>","text":"<p>Generates a report from analysis data in various formats.</p> <pre><code>k8s-analyzer report [SOURCE] [OPTIONS]\n</code></pre> <p>Options: - <code>--format</code>: Output format (html, json, csv). - <code>--output</code>: Path to output report file. - <code>--title</code>: Title for the generated report.</p> <p>Examples: - Generate HTML report: <code>k8s-analyzer report analysis.json --format html --output report.html</code></p>"},{"location":"reference/cli-commands/#k8s-reporter-commands","title":"k8s-reporter Commands","text":""},{"location":"reference/cli-commands/#reporter-start","title":"<code>reporter start</code>","text":"<p>Starts the k8s-reporter dashboard service.</p> <pre><code>k8s-reporter start [OPTIONS]\n</code></pre> <p>Options: - <code>--config</code>: Path to configuration file.</p> <p>Examples: - Start service with config: <code>k8s-reporter start --config config.yaml</code></p>"},{"location":"reference/cli-commands/#reporter-generate","title":"<code>reporter generate</code>","text":"<p>Generates reports based on the specified schedule and configuration.</p> <pre><code>k8s-reporter generate [OPTIONS]\n</code></pre> <p>Options: - <code>--format</code>: Output format (html, pdf). - <code>--output</code>: Path to output report directory.</p> <p>Examples: - Generate HTML report: <code>k8s-reporter generate --format html --output reports/</code></p>"},{"location":"reference/cli-commands/#general-options","title":"General Options","text":"<ul> <li><code>--help</code>: Show help information for any command.</li> </ul>"},{"location":"reference/cli-commands/#advanced-usage","title":"Advanced Usage","text":""},{"location":"reference/cli-commands/#using-with-continuous-integration","title":"Using with Continuous Integration","text":"<p>Integrate CLI commands in CI pipelines for automated analysis and reporting.</p> <p>Example with GitHub Actions: <pre><code>jobs:\n  analyze:\n    steps:\n      - run: k8s-analyzer analyze --output analysis.json\n      - run: k8s-analyzer report analysis.json --format html --output report.html\n</code></pre></p>"},{"location":"reference/cli-commands/#custom-script-integration","title":"Custom Script Integration","text":"<p>Utilize CLI commands in scripts to automate routine tasks.</p> <p>Example Script: <pre><code>#!/bin/bash\n# Automate analysis and reporting\ndate=$(date +%Y%m%d)\n\nk8s-analyzer analyze --output analysis-${date}.json\nk8s-analyzer report analysis-${date}.json --format html --output reports/${date}-report.html\n</code></pre></p> <p>This CLI reference enables users to effectively utilize k8s-tools commands, enhancing productivity and integration into various environments.</p>"},{"location":"reference/configuration/","title":"\u2699\ufe0f Configuration Reference","text":"<p>This document serves as a reference for understanding the configuration settings for k8s-analyzer and k8s-reporter, enabling users to customize their environment according to specific needs and requirements.</p>"},{"location":"reference/configuration/#configuration-structure","title":"Configuration Structure","text":"<p>The primary configuration files are structured in YAML format, which allows for human-readable and easily modifiable settings. Key sections include:</p> <ul> <li>Server Settings: Configure network, ports, and TLS options.</li> <li>Authentication: Set up user authentication and access control.</li> <li>Resources: Define resource polling intervals, types, and inclusion settings.</li> <li>Alerts: Configure alert rules and notification channels.</li> <li>Reports: Manage report formats, schedules, and storage.</li> <li>Integrations: Set up connections with external services.</li> </ul>"},{"location":"reference/configuration/#server-settings","title":"Server Settings","text":"<pre><code>server:\n  host: \"0.0.0.0\"\n  port: 8080\n  tls:\n    enabled: false\n    cert_file: \"\"\n    key_file: \"\"\n</code></pre> <ul> <li>host: Server host address, usually set to 0.0.0.0 to listen on all interfaces.</li> <li>port: Port on which the server will run.</li> <li>tls: TLS configuration for securing the dashboard.</li> </ul>"},{"location":"reference/configuration/#authentication","title":"Authentication","text":"<pre><code>authentication:\n  enabled: true\n  type: \"basic\"\n  users:\n    - username: \"admin\"\n      password: \"securepassword\"\n</code></pre> <ul> <li>enabled: Enable or disable authentication.</li> <li>type: Type of authentication (basic, oauth2, etc.).</li> <li>users: List of user credentials with roles.</li> </ul>"},{"location":"reference/configuration/#alerts","title":"Alerts","text":"<pre><code>alerts:\n  enabled: true\n  rules:\n    - name: \"pod_failures\"\n      condition: \"pod_status == 'Failed'\"\n      severity: \"critical\"\n      channels:\n        - email: \"alerts@company.com\"\n</code></pre> <ul> <li>enabled: Activate the alerting system.</li> <li>rules: Define alert rules based on specific conditions.</li> <li>channels: Configure notification channels.</li> </ul>"},{"location":"reference/configuration/#integrations","title":"Integrations","text":"<pre><code>integrations:\n  slack:\n    webhook_url: \"https://hooks.slack.com/services/EXAMPLE/WEBHOOK\"\n  pagerduty:\n    service_key: \"your-pagerduty-service-key\"\n</code></pre> <ul> <li>slack: Slack integration settings.</li> <li>pagerduty: PagerDuty integration settings.</li> </ul>"},{"location":"reference/configuration/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"reference/configuration/#dynamic-resource-polling","title":"Dynamic Resource Polling","text":"<p>Configure dynamic polling based on resource types:</p> <pre><code>resources:\n  refresh_interval: 30s\n  types:\n    - pods\n    - services\n</code></pre>"},{"location":"reference/configuration/#customized-widgets","title":"Customized Widgets","text":"<p>Add custom widgets to the dashboard:</p> <pre><code>dashboard:\n  widgets:\n    - type: \"custom_chart\"\n      data: \"cpu_usage\"\n</code></pre>"},{"location":"reference/configuration/#best-practices","title":"Best Practices","text":"<ul> <li>Regularly update configuration files to adapt to changes in the cluster environment.</li> <li>Secure configuration files with appropriate permissions.</li> <li>Test configuration changes in a staging environment before applying them to production.</li> </ul>"},{"location":"reference/configuration/#conclusion","title":"Conclusion","text":"<p>By providing detailed configuration references, users can tailor k8s-tools to their specific needs, enhancing the tool's flexibility and integration within diverse environments.</p>"},{"location":"reference/database-schema/","title":"\ud83d\udee0\ufe0f Database Schema Reference","text":"<p>This document provides an in-depth look at the database schema utilized by k8s-analyzer and k8s-reporter to store analysis results, resource relationships, and historical data.</p>"},{"location":"reference/database-schema/#overview","title":"Overview","text":"<p>The database schema is designed to efficiently store and query large volumes of Kubernetes resource data. It supports typical operations like insertions, updates, deletions, and complex queries for generating reports and conducting analyses.</p>"},{"location":"reference/database-schema/#core-tables","title":"Core Tables","text":""},{"location":"reference/database-schema/#resources","title":"<code>resources</code>","text":"<p>Stores metadata and analysis results for all Kubernetes resources.</p> <pre><code>CREATE TABLE resources (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    uid TEXT UNIQUE,\n    name TEXT NOT NULL,\n    namespace TEXT,\n    kind TEXT NOT NULL,\n    api_version TEXT NOT NULL,\n    health_status TEXT NOT NULL,\n    issues TEXT,  -- JSON array of issue descriptions\n    labels TEXT,  -- JSON object of labels\n    annotations TEXT,  -- JSON object of annotations\n    spec TEXT,    -- JSON object of resource spec\n    status TEXT,  -- JSON object of resource status\n    creation_timestamp DATETIME,\n    deletion_timestamp DATETIME,\n    resource_version TEXT,\n    generation INTEGER,\n    owner_references TEXT,  -- JSON array of owner references\n    finalizers TEXT,  -- JSON array of finalizers\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\n);\n</code></pre> <ul> <li>Indexes: </li> <li><code>idx_resources_kind</code>: Index on kind</li> <li><code>idx_resources_namespace</code>: Index on namespace</li> <li><code>idx_resources_creation_timestamp</code>: Index on creation timestamp</li> </ul>"},{"location":"reference/database-schema/#relationships","title":"<code>relationships</code>","text":"<p>Captures relationships between resources, such as dependencies and ownerships.</p> <pre><code>CREATE TABLE relationships (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    source_uid TEXT NOT NULL,\n    source_kind TEXT NOT NULL,\n    source_name TEXT NOT NULL,\n    source_namespace TEXT,\n    target_uid TEXT,\n    target_kind TEXT NOT NULL,\n    target_name TEXT NOT NULL,\n    target_namespace TEXT,\n    relationship_type TEXT NOT NULL,\n    direction TEXT NOT NULL DEFAULT 'outbound',\n    strength REAL DEFAULT 1.0,\n    metadata TEXT,  -- JSON object of relationship metadata\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (source_uid) REFERENCES resources (uid)\n);\n</code></pre> <ul> <li>Indexes: </li> <li><code>idx_relationships_source_uid</code>: Index on source UID</li> <li><code>idx_relationships_target_uid</code>: Index on target UID</li> </ul>"},{"location":"reference/database-schema/#resource_health_history","title":"<code>resource_health_history</code>","text":"<p>Tracks and logs the changes in health status of resources over time.</p> <pre><code>CREATE TABLE resource_health_history (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    resource_uid TEXT NOT NULL,\n    health_status TEXT NOT NULL,\n    issues TEXT,  -- JSON array of issues at this point in time\n    timestamp DATETIME NOT NULL,\n    analysis_run_id TEXT,  -- Optional: link to specific analysis run\n    FOREIGN KEY (resource_uid) REFERENCES resources (uid)\n);\n</code></pre>"},{"location":"reference/database-schema/#analysis_summary","title":"<code>analysis_summary</code>","text":"<p>Provides a high-level summary of each analysis run, including resource counts and health distributions.</p> <pre><code>CREATE TABLE analysis_summary (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    analysis_timestamp DATETIME NOT NULL,\n    analysis_duration_seconds REAL,\n    total_resources INTEGER NOT NULL,\n    total_relationships INTEGER NOT NULL,\n    health_summary TEXT,  -- JSON object with health statistics\n    resource_types TEXT,  -- JSON object with resource type counts\n    namespace_summary TEXT,  -- JSON object with namespace statistics\n    cluster_info TEXT,  -- JSON object with cluster metadata\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP\n);\n</code></pre>"},{"location":"reference/database-schema/#query-examples","title":"Query Examples","text":""},{"location":"reference/database-schema/#fetch-all-resources-by-kind","title":"Fetch All Resources By Kind","text":"<pre><code>SELECT * FROM resources WHERE kind = 'Pod';\n</code></pre>"},{"location":"reference/database-schema/#find-critical-issues","title":"Find Critical Issues","text":"<pre><code>SELECT * FROM resources WHERE health_status = 'error';\n</code></pre>"},{"location":"reference/database-schema/#analyze-resource-relationships","title":"Analyze Resource Relationships","text":"<pre><code>SELECT * \nFROM relationships \nWHERE source_kind = 'Deployment' \nAND target_kind = 'ReplicaSet';\n</code></pre>"},{"location":"reference/database-schema/#best-practices","title":"Best Practices","text":"<ul> <li>Use indexes to improve query performance.</li> <li>Regularly back up database contents to prevent data loss.</li> <li>Use transactions to manage batch updates and maintain data integrity.</li> </ul>"},{"location":"reference/database-schema/#conclusion","title":"Conclusion","text":"<p>Understanding the database schema allows advanced users to extend k8s-tools, perform custom queries, and integrate with other systems more efficiently. Always refer to this schema when developing extended functionalities or troubleshooting database-related issues.</p>"},{"location":"reference/faq/","title":"\u2753 Frequently Asked Questions (FAQ)","text":"<p>This FAQ addresses common questions about k8s-analyzer and k8s-reporter, providing quick answers to help users get started and resolve common issues.</p>"},{"location":"reference/faq/#general-questions","title":"General Questions","text":""},{"location":"reference/faq/#what-are-k8s-analyzer-and-k8s-reporter","title":"What are k8s-analyzer and k8s-reporter?","text":"<p>k8s-analyzer is a command-line tool for analyzing Kubernetes cluster configurations and resources. It provides insights into resource health, relationships, security compliance, and operational metrics.</p> <p>k8s-reporter is a web-based dashboard that provides real-time visualization and reporting capabilities for Kubernetes clusters, built on top of analysis data from k8s-analyzer.</p>"},{"location":"reference/faq/#what-are-the-system-requirements","title":"What are the system requirements?","text":"<ul> <li>Operating System: Linux, macOS, or Windows</li> <li>Kubernetes: Compatible with Kubernetes 1.19+</li> <li>Resources: Minimum 512MB RAM, 1GB disk space</li> <li>Network: Access to Kubernetes API server</li> </ul>"},{"location":"reference/faq/#how-do-i-install-k8s-tools","title":"How do I install k8s-tools?","text":"<pre><code># Download latest releases\ncurl -LO https://github.com/your-org/k8s-analyzer/releases/latest/download/k8s-analyzer-linux\ncurl -LO https://github.com/your-org/k8s-reporter/releases/latest/download/k8s-reporter-linux\n\n# Make executable and install\nchmod +x k8s-analyzer-linux k8s-reporter-linux\nsudo mv k8s-analyzer-linux /usr/local/bin/k8s-analyzer\nsudo mv k8s-reporter-linux /usr/local/bin/k8s-reporter\n</code></pre>"},{"location":"reference/faq/#k8s-analyzer-questions","title":"k8s-analyzer Questions","text":""},{"location":"reference/faq/#how-do-i-analyze-my-cluster","title":"How do I analyze my cluster?","text":"<pre><code># Analyze current cluster\nk8s-analyzer analyze\n\n# Analyze specific namespace\nk8s-analyzer analyze --namespace production\n\n# Parse local YAML files\nk8s-analyzer parse ./manifests/ --output cluster-state.json\n</code></pre>"},{"location":"reference/faq/#what-output-formats-are-supported","title":"What output formats are supported?","text":"<p>k8s-analyzer supports multiple output formats: - JSON: Machine-readable structured data - HTML: Interactive web reports - CSV: Spreadsheet-compatible format - SQLite: Database format for complex queries</p>"},{"location":"reference/faq/#can-i-analyze-multiple-clusters","title":"Can I analyze multiple clusters?","text":"<p>Yes! Switch between clusters using kubectl contexts:</p> <pre><code>kubectl config use-context cluster-1\nk8s-analyzer analyze --output cluster-1-analysis.json\n\nkubectl config use-context cluster-2\nk8s-analyzer analyze --output cluster-2-analysis.json\n</code></pre>"},{"location":"reference/faq/#how-do-i-filter-analysis-results","title":"How do I filter analysis results?","text":"<p>Use filtering options to focus on specific resources:</p> <pre><code># Filter by namespace\nk8s-analyzer analyze --namespace-filter \"production,staging\"\n\n# Filter by resource type\nk8s-analyzer analyze --resource-types \"pods,services\"\n\n# Filter by health status\nk8s-analyzer report analysis.json --filter \"health_status=error\"\n</code></pre>"},{"location":"reference/faq/#k8s-reporter-questions","title":"k8s-reporter Questions","text":""},{"location":"reference/faq/#how-do-i-start-the-dashboard","title":"How do I start the dashboard?","text":"<pre><code># Start with default configuration\nk8s-reporter start\n\n# Start with custom configuration\nk8s-reporter start --config ./config.yaml\n</code></pre>"},{"location":"reference/faq/#what-is-the-default-login","title":"What is the default login?","text":"<p>Default credentials are: - Username: admin - Password: admin123</p> <p>\u26a0\ufe0f Important: Change these credentials before deploying to production!</p>"},{"location":"reference/faq/#how-do-i-configure-alerts","title":"How do I configure alerts?","text":"<p>Edit your configuration file:</p> <pre><code>alerts:\n  enabled: true\n  rules:\n    - name: \"pod_failures\"\n      condition: \"pod_status == 'Failed'\"\n      severity: \"critical\"\n      channels:\n        - email: \"alerts@company.com\"\n        - slack: \"#alerts\"\n</code></pre>"},{"location":"reference/faq/#can-i-customize-the-dashboard","title":"Can I customize the dashboard?","text":"<p>Yes! You can customize: - Themes: Light/dark mode - Widgets: Add custom charts and metrics - Layout: Rearrange dashboard components - Branding: Add company logos and colors</p>"},{"location":"reference/faq/#integration-questions","title":"Integration Questions","text":""},{"location":"reference/faq/#how-do-i-integrate-with-cicd","title":"How do I integrate with CI/CD?","text":"<p>GitHub Actions Example: <pre><code>- name: Analyze Kubernetes manifests\n  run: |\n    k8s-analyzer parse ./k8s/ --output analysis.json\n    k8s-analyzer validate analysis.json --strict\n</code></pre></p> <p>Jenkins Pipeline: <pre><code>stage('K8s Analysis') {\n    steps {\n        sh 'k8s-analyzer analyze --output analysis.json'\n        sh 'k8s-analyzer report analysis.json --format html --output report.html'\n        publishHTML([allowMissing: false, alwaysLinkToLastBuild: true, keepAll: true, reportDir: '.', reportFiles: 'report.html', reportName: 'K8s Analysis Report'])\n    }\n}\n</code></pre></p>"},{"location":"reference/faq/#how-do-i-integrate-with-monitoring-systems","title":"How do I integrate with monitoring systems?","text":"<p>k8s-tools can integrate with: - Prometheus: Export metrics for monitoring - Grafana: Create custom dashboards - ELK Stack: Log analysis and visualization - Slack/PagerDuty: Alert notifications</p>"},{"location":"reference/faq/#can-i-use-custom-metrics","title":"Can I use custom metrics?","text":"<p>Yes! Define custom metrics in your configuration:</p> <pre><code>custom_metrics:\n  - name: \"app_response_time\"\n    query: \"avg(response_time_seconds) by (app)\"\n    threshold: 2.0\n</code></pre>"},{"location":"reference/faq/#performance-questions","title":"Performance Questions","text":""},{"location":"reference/faq/#how-much-data-can-k8s-analyzer-handle","title":"How much data can k8s-analyzer handle?","text":"<p>k8s-analyzer is optimized for large clusters: - Resources: 10,000+ resources per cluster - Memory: Efficient streaming processing - Performance: Parallel analysis for speed</p>"},{"location":"reference/faq/#how-often-should-i-run-analysis","title":"How often should I run analysis?","text":"<p>Recommended frequencies: - Development: Every commit or daily - Staging: Daily or before deployments - Production: Daily for health checks, weekly for comprehensive analysis</p>"},{"location":"reference/faq/#can-i-schedule-automatic-reports","title":"Can I schedule automatic reports?","text":"<p>Yes! Use cron jobs or CI/CD schedulers:</p> <pre><code># Daily analysis at 6 AM\n0 6 * * * /usr/local/bin/k8s-analyzer analyze --output /reports/daily-$(date +\\%Y\\%m\\%d).json\n</code></pre>"},{"location":"reference/faq/#security-questions","title":"Security Questions","text":""},{"location":"reference/faq/#is-my-cluster-data-secure","title":"Is my cluster data secure?","text":"<p>k8s-tools follow security best practices: - Local Processing: Analysis runs locally, no data sent externally - RBAC: Respects Kubernetes RBAC permissions - TLS: Dashboard supports TLS encryption - Authentication: Configurable user authentication</p>"},{"location":"reference/faq/#what-permissions-are-required","title":"What permissions are required?","text":"<p>Minimum RBAC permissions: <pre><code>rules:\n- apiGroups: [\"\"]\n  resources: [\"pods\", \"services\", \"configmaps\", \"secrets\"]\n  verbs: [\"get\", \"list\"]\n- apiGroups: [\"apps\"]\n  resources: [\"deployments\", \"replicasets\"]\n  verbs: [\"get\", \"list\"]\n</code></pre></p>"},{"location":"reference/faq/#troubleshooting-questions","title":"Troubleshooting Questions","text":""},{"location":"reference/faq/#why-is-analysis-failing","title":"Why is analysis failing?","text":"<p>Common causes: 1. Permissions: Check RBAC permissions 2. Connectivity: Verify cluster access 3. Resources: Ensure sufficient memory/disk 4. Configuration: Validate YAML syntax</p>"},{"location":"reference/faq/#dashboard-not-loading","title":"Dashboard not loading?","text":"<p>Check these items: 1. Service Status: Is k8s-reporter running? 2. Port Access: Is port 8080 accessible? 3. Firewall: Are there blocking rules? 4. Logs: Check error messages in logs</p>"},{"location":"reference/faq/#how-do-i-get-support","title":"How do I get support?","text":"<ul> <li>Documentation: Check the official docs</li> <li>Issues: Report bugs on GitHub</li> <li>Community: Join discussions in forums</li> <li>Commercial: Contact support for enterprise versions</li> </ul>"},{"location":"reference/faq/#performance-optimization","title":"Performance Optimization","text":""},{"location":"reference/faq/#how-can-i-improve-analysis-speed","title":"How can I improve analysis speed?","text":"<ol> <li>Filter Resources: Analyze only needed resources</li> <li>Parallel Processing: Use multiple workers</li> <li>Incremental Analysis: Only analyze changes</li> <li>Caching: Enable result caching</li> </ol> <pre><code># Optimized analysis\nk8s-analyzer analyze \\\n  --workers 4 \\\n  --cache-enabled \\\n  --incremental \\\n  --namespace-filter \"production\"\n</code></pre>"},{"location":"reference/faq/#how-do-i-reduce-memory-usage","title":"How do I reduce memory usage?","text":"<ol> <li>Batch Processing: Process resources in batches</li> <li>Streaming: Use streaming for large datasets</li> <li>Compression: Enable output compression</li> <li>Cleanup: Regular cleanup of old data</li> </ol>"},{"location":"reference/faq/#advanced-usage","title":"Advanced Usage","text":""},{"location":"reference/faq/#can-i-extend-k8s-tools","title":"Can I extend k8s-tools?","text":"<p>Yes! k8s-tools support: - Custom Plugins: Add custom analysis logic - API Extensions: Build on top of the API - Custom Reports: Create custom report templates - Webhooks: Integrate with external systems</p>"},{"location":"reference/faq/#how-do-i-backup-analysis-data","title":"How do I backup analysis data?","text":"<pre><code># Backup SQLite database\ncp analysis.db backup-$(date +%Y%m%d).db\n\n# Export to multiple formats\nk8s-analyzer export analysis.json --format json,csv,html\n</code></pre> <p>This FAQ covers the most common questions about k8s-tools. For more specific questions, please refer to the detailed documentation or contact support.</p>"},{"location":"reference/troubleshooting/","title":"\ud83d\udee0\ufe0f Troubleshooting Guide","text":"<p>This troubleshooting guide provides solutions to common issues encountered while using the k8s-tools suite, including both k8s-analyzer and k8s-reporter.</p>"},{"location":"reference/troubleshooting/#general-issues","title":"General Issues","text":""},{"location":"reference/troubleshooting/#installation-problems","title":"Installation Problems","text":"<ul> <li>Problem: Installation fails with permission errors.</li> <li>Solution: Ensure you have the necessary permissions to install software. Try running the installation command with <code>sudo</code>.</li> </ul>"},{"location":"reference/troubleshooting/#network-connectivity","title":"Network Connectivity","text":"<ul> <li>Problem: Unable to connect to the cluster API.</li> <li>Solution: Verify your kubeconfig file and ensure the correct context is set. Check network policies and firewall settings.</li> </ul>"},{"location":"reference/troubleshooting/#k8s-analyzer-specific-issues","title":"k8s-analyzer Specific Issues","text":""},{"location":"reference/troubleshooting/#analysis-errors","title":"Analysis Errors","text":"<ul> <li>Problem: Analysis fails with \"Resource not found\" errors.</li> <li>Solution: Verify the existence of resources and check your access permissions. Refresh the resource cache.</li> </ul>"},{"location":"reference/troubleshooting/#report-generation","title":"Report Generation","text":"<ul> <li>Problem: Report generation fails or output is empty.</li> <li>Solution: Ensure that the analysis phase completed successfully. Verify that the output directory is writable.</li> </ul>"},{"location":"reference/troubleshooting/#k8s-reporter-specific-issues","title":"k8s-reporter Specific Issues","text":""},{"location":"reference/troubleshooting/#dashboard-not-loading","title":"Dashboard Not Loading","text":"<ul> <li>Problem: The dashboard doesn't load in the browser.</li> <li>Solution: Confirm that the service is running. Check the server logs for errors. Verify network and firewall settings.</li> </ul>"},{"location":"reference/troubleshooting/#authentication-failures","title":"Authentication Failures","text":"<ul> <li>Problem: Cannot log in to the dashboard with provided credentials.</li> <li>Solution: Check the authentication settings in your configuration file. Reset credentials if necessary.</li> </ul>"},{"location":"reference/troubleshooting/#logs-and-monitoring","title":"Logs and Monitoring","text":""},{"location":"reference/troubleshooting/#accessing-logs","title":"Accessing Logs","text":"<ul> <li>Problem: Difficulty accessing logs for debugging.</li> <li>Solution: Ensure logging is enabled and logs are being written to the correct location. Use <code>kubectl logs</code> for pod logs.</li> </ul>"},{"location":"reference/troubleshooting/#performance-monitoring","title":"Performance Monitoring","text":"<ul> <li>Problem: Performance degradation over time.</li> <li>Solution: Monitor resource usage and optimize configurations. Consider scaling resources or using more powerful nodes.</li> </ul>"},{"location":"reference/troubleshooting/#common-commands","title":"Common Commands","text":"<ul> <li>Restart dashboard service: <code>systemctl restart k8s-reporter</code></li> <li>Check service status: <code>systemctl status k8s-reporter</code></li> <li>View logs: <code>tail -f /var/log/k8s-tools.log</code></li> </ul>"},{"location":"reference/troubleshooting/#references","title":"References","text":"<ul> <li>Kubernetes API Access Control</li> <li>Kubectl Command Cheat Sheet</li> </ul>"},{"location":"reference/troubleshooting/#support","title":"Support","text":"<ul> <li>For further assistance, refer to the official documentation or reach out to the community forums and support channels.</li> </ul>"},{"location":"reporter/configuration/","title":"\ud83d\udee0\ufe0f k8s-reporter Configuration Guide","text":"<p>This guide provides comprehensive configuration instructions for k8s-reporter, covering all aspects from basic setup to advanced enterprise deployment scenarios.</p>"},{"location":"reporter/configuration/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Configuration File Overview</li> <li>Server Configuration</li> <li>Authentication &amp; Security</li> <li>Resource Monitoring</li> <li>Alerting System</li> <li>Report Generation</li> <li>Dashboard Customization</li> <li>External Integrations</li> <li>Performance Tuning</li> <li>Environment Variables</li> <li>Best Practices</li> <li>Troubleshooting</li> </ul>"},{"location":"reporter/configuration/#configuration-file-overview","title":"Configuration File Overview","text":"<p>k8s-reporter uses YAML configuration files to define its behavior. The configuration is divided into logical sections:</p> <ul> <li>server: HTTP server and network settings</li> <li>authentication: User access and security</li> <li>monitoring: Resource polling and data collection</li> <li>dashboard: UI customization and layout</li> <li>alerting: Alert rules and notification channels</li> <li>reporting: Report generation and storage</li> <li>integrations: External service connections</li> <li>performance: Resource usage and optimization</li> <li>logging: Log configuration and output</li> </ul>"},{"location":"reporter/configuration/#default-configuration-file","title":"Default Configuration File","text":"<pre><code># k8s-reporter configuration\napiVersion: reporter.k8s.io/v1\nkind: ReporterConfig\nmetadata:\n  name: default-config\n  version: \"1.0\"\n\nserver:\n  host: \"0.0.0.0\"\n  port: 8080\n  tls:\n    enabled: false\n    cert_file: \"\"\n    key_file: \"\"\n  cors:\n    enabled: true\n    allowed_origins: [\"*\"]\n  rate_limiting:\n    enabled: true\n    requests_per_minute: 60\n\nauthentication:\n  enabled: true\n  type: \"basic\"  # basic, oauth2, ldap, oidc\n  session_timeout: \"24h\"\n  users:\n    - username: \"admin\"\n      password: \"$2a$10$...\"  # bcrypt hash\n      roles: [\"admin\"]\n    - username: \"viewer\"\n      password: \"$2a$10$...\"\n      roles: [\"read-only\"]\n\nmonitoring:\n  kubernetes:\n    kubeconfig_path: \"~/.kube/config\"\n    context: \"\"  # empty means current context\n    namespaces: []  # empty means all namespaces\n    resource_types:\n      - pods\n      - services\n      - deployments\n      - configmaps\n      - secrets\n      - persistentvolumes\n      - persistentvolumeclaims\n  refresh_interval: \"30s\"\n  batch_size: 100\n  timeout: \"10s\"\n  include_events: true\n  include_metrics: true\n\ndashboard:\n  title: \"Kubernetes Cluster Dashboard\"\n  theme: \"light\"  # light, dark, auto\n  auto_refresh: true\n  refresh_interval: \"10s\"\n  default_namespace: \"default\"\n  widgets:\n    - type: \"cluster_overview\"\n      enabled: true\n      position: {row: 1, col: 1, width: 12, height: 4}\n    - type: \"namespace_summary\"\n      enabled: true\n      position: {row: 5, col: 1, width: 6, height: 6}\n    - type: \"resource_health\"\n      enabled: true\n      position: {row: 5, col: 7, width: 6, height: 6}\n\nalerting:\n  enabled: true\n  evaluation_interval: \"1m\"\n  rules:\n    - name: \"pod_failures\"\n      condition: \"pod_status == 'Failed'\"\n      severity: \"critical\"\n      threshold: 1\n      duration: \"5m\"\n    - name: \"high_resource_usage\"\n      condition: \"cpu_usage &gt; 80 OR memory_usage &gt; 85\"\n      severity: \"warning\"\n      threshold: 3\n      duration: \"10m\"\n  channels:\n    - type: \"email\"\n      name: \"ops-team\"\n      config:\n        to: [\"ops@company.com\"]\n        smtp_server: \"smtp.company.com:587\"\n        username: \"alerts@company.com\"\n        password: \"${SMTP_PASSWORD}\"\n    - type: \"slack\"\n      name: \"ops-slack\"\n      config:\n        webhook_url: \"${SLACK_WEBHOOK_URL}\"\n        channel: \"#k8s-alerts\"\n    - type: \"webhook\"\n      name: \"custom-webhook\"\n      config:\n        url: \"https://api.company.com/alerts\"\n        headers:\n          Authorization: \"Bearer ${API_TOKEN}\"\n\nreporting:\n  enabled: true\n  schedule: \"0 6 * * *\"  # Daily at 6 AM\n  formats: [\"html\", \"pdf\", \"json\"]\n  output_directory: \"./reports\"\n  retention:\n    days: 30\n    max_size_gb: 5\n  templates:\n    - name: \"daily_summary\"\n      template_file: \"templates/daily.html\"\n      include_sections:\n        - cluster_overview\n        - health_summary\n        - resource_usage\n        - alerts_summary\n    - name: \"security_audit\"\n      template_file: \"templates/security.html\"\n      include_sections:\n        - security_findings\n        - compliance_status\n        - recommendations\n\nintegrations:\n  prometheus:\n    enabled: false\n    endpoint: \"http://prometheus:9090\"\n    scrape_interval: \"15s\"\n  grafana:\n    enabled: false\n    url: \"http://grafana:3000\"\n    api_key: \"${GRAFANA_API_KEY}\"\n  elk:\n    enabled: false\n    elasticsearch_url: \"http://elasticsearch:9200\"\n    index_pattern: \"k8s-reporter-*\"\n\nperformance:\n  max_concurrent_requests: 10\n  cache:\n    enabled: true\n    ttl: \"5m\"\n    max_size_mb: 100\n  database:\n    type: \"sqlite\"  # sqlite, postgres, mysql\n    connection_string: \"./data/reporter.db\"\n    max_connections: 10\n    max_idle_connections: 5\n\nlogging:\n  level: \"info\"  # debug, info, warn, error\n  format: \"json\"  # json, text\n  output: \"stdout\"  # stdout, file\n  file_config:\n    path: \"./logs/reporter.log\"\n    max_size_mb: 100\n    max_backups: 3\n    max_age_days: 7\n</code></pre>"},{"location":"reporter/configuration/#customizing-alerts","title":"Customizing Alerts","text":"<p>Alerts can be fully customized to align with organizational policies. You can specify thresholds for different severity levels and define multiple notification channels.</p>"},{"location":"reporter/configuration/#example-alert-settings","title":"Example Alert Settings","text":"<pre><code>alerts:\n  enabled: true\n  critical_threshold: 5  # Threshold for critical issues\n  warning_threshold: 10  # Threshold for warnings\n  channels:\n    emails:\n      - email: \"ops-team@yourcompany.com\"\n      - email: \"admin-team@yourcompany.com\"\n    webhooks:\n      - url: \"https://api.youralertsystem.com/notifications\"\n</code></pre>"},{"location":"reporter/configuration/#integration-options","title":"Integration Options","text":"<p>k8s-reporter can be integrated with various external systems for seamless operation and notification delivery.</p>"},{"location":"reporter/configuration/#example-integrations","title":"Example Integrations","text":"<pre><code>integrations:\n  slack:\n    webhook_url: \"https://hooks.slack.com/services/EXAMPLE/WEBHOOK\"\n  pagerduty:\n    service_key: \"your-pagerduty-service-key\"\n  email:\n    smtp:\n      server: \"smtp.yourcompany.com\"\n      port: 587\n      auth:\n        user: \"smtp-user\"\n        password: \"smtp-password\"\n</code></pre>"},{"location":"reporter/configuration/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"reporter/configuration/#multi-tenancy-support","title":"Multi-Tenancy Support","text":"<p>To support multiple users, enable authentication and define multiple user profiles:</p> <pre><code>authentication:\n  enabled: true\n  users:\n    - username: \"user1\"\n      password: \"password1\"\n    - username: \"user2\"\n      password: \"password2\"\n</code></pre>"},{"location":"reporter/configuration/#data-retention-policies","title":"Data Retention Policies","text":"<p>Define how long data and reports are stored before being purged:</p> <pre><code>reports:\n  retention_days: 30  # Retain reports for 30 days\n  max_size_mb: 1000   # Maximum allowed size for report directory\n</code></pre>"},{"location":"reporter/configuration/#troubleshooting-configuration","title":"Troubleshooting Configuration","text":"<ul> <li>Invalid YAML: Ensure YAML syntax is correct. Use a validator if necessary.</li> <li>Auth Issues: Double-check usernames and passwords.</li> <li>Network Problems: Verify network settings and firewall rules.</li> </ul>"},{"location":"reporter/configuration/#conclusion","title":"Conclusion","text":"<p>With configurable options, k8s-reporter can be adapted to a variety of environments and requirements. For further assistance, contact support@yourcompany.com or refer to the official documentation.</p>"},{"location":"reporter/dashboard-guide/","title":"\ud83d\udda5\ufe0f k8s-reporter Dashboard Guide","text":"<p>This comprehensive guide walks you through using the k8s-reporter dashboard, covering all analysis views, navigation features, and best practices for Kubernetes cluster analysis.</p>"},{"location":"reporter/dashboard-guide/#overview","title":"Overview","text":"<p>The k8s-reporter dashboard is a Streamlit-based web application that provides interactive visualization and analysis of Kubernetes cluster data exported by k8s-analyzer. It offers 10+ specialized analysis views for comprehensive cluster insights.</p>"},{"location":"reporter/dashboard-guide/#key-features","title":"Key Features","text":"<ul> <li>Interactive Web Interface: Modern Streamlit-based dashboard with responsive design</li> <li>10+ Analysis Views: Specialized dashboards for different aspects of cluster analysis</li> <li>Label-based Governance: Comprehensive labeling analysis and application discovery</li> <li>Health Status Monitoring: Visual indicators for healthy, warning, and error states</li> <li>Advanced Visualizations: Interactive Plotly charts, network graphs, and data tables</li> <li>Export Capabilities: Download reports and analysis data in JSON/CSV formats</li> <li>Dynamic Filtering: Real-time filtering by namespace, resource type, and health status</li> </ul>"},{"location":"reporter/dashboard-guide/#getting-started","title":"Getting Started","text":""},{"location":"reporter/dashboard-guide/#installation","title":"Installation","text":"<pre><code># Install k8s-reporter\ncd k8s-reporter\nuv sync\n\n# Or install with pip\npip install -e .\n</code></pre>"},{"location":"reporter/dashboard-guide/#launch-the-dashboard","title":"Launch the Dashboard","text":"<pre><code># Launch with database file\nk8s-reporter --database cluster-analysis.db\n\n# Launch on custom port\nk8s-reporter --port 8080\n\n# Launch for remote access\nk8s-reporter --host 0.0.0.0 --port 8501\n</code></pre>"},{"location":"reporter/dashboard-guide/#upload-database-via-web-interface","title":"Upload Database via Web Interface","text":"<ol> <li>Launch k8s-reporter without specifying a database</li> <li>Use the file uploader in the sidebar</li> <li>Upload your <code>.db</code> file generated by k8s-analyzer</li> <li>Select analysis views from the sidebar navigation</li> </ol>"},{"location":"reporter/dashboard-guide/#dashboard-navigation","title":"Dashboard Navigation","text":""},{"location":"reporter/dashboard-guide/#sidebar-controls","title":"Sidebar Controls","text":"<ul> <li>\ud83d\udcc1 Database Upload: Upload SQLite database files</li> <li>\ud83c\udfaf View Selection: Choose from 10+ analysis views</li> <li>\ud83c\udff7\ufe0f Namespace Filter: Filter data by specific namespaces</li> <li>\ud83d\udce6 Resource Type Filter: Focus on specific Kubernetes resources</li> <li>\u2764\ufe0f Health Status Filter: Show only healthy, warning, or error resources</li> </ul>"},{"location":"reporter/dashboard-guide/#main-content-area","title":"Main Content Area","text":"<ul> <li>\ud83d\udcca Interactive Charts: Plotly visualizations with hover tooltips</li> <li>\ud83d\udccb Data Tables: Sortable, searchable resource listings</li> <li>\ud83d\udcc8 Metrics Cards: Key performance indicators and statistics</li> <li>\ud83d\udd17 Navigation: Seamless movement between related views</li> </ul>"},{"location":"reporter/dashboard-guide/#analysis-views-guide","title":"Analysis Views Guide","text":""},{"location":"reporter/dashboard-guide/#1-cluster-overview","title":"1. \ud83c\udfe0 Cluster Overview","text":"<p>Purpose: High-level cluster health and resource distribution</p> <p>Key Metrics: - Total resources, health ratio, namespaces, issues - Resource distribution pie chart - Health status breakdown - Top namespaces table</p> <p>Use Cases: - Daily cluster health checks - Executive reporting - Quick cluster assessment</p>"},{"location":"reporter/dashboard-guide/#2-security-analysis","title":"2. \ud83d\udd12 Security Analysis","text":"<p>Purpose: Security posture evaluation and RBAC analysis</p> <p>Key Features: - Service accounts and role bindings count - Privileged pods detection - Security context analysis - Automated security recommendations</p> <p>Use Cases: - Security audits - Compliance assessments - Vulnerability identification</p>"},{"location":"reporter/dashboard-guide/#3-namespace-analysis","title":"3. \ud83c\udff7\ufe0f Namespace Analysis","text":"<p>Purpose: Per-namespace resource breakdown and analysis</p> <p>Key Features: - Namespace selection dropdown - Resource type distribution - Health status per namespace - Top resources identification</p> <p>Use Cases: - Application team reporting - Namespace-specific troubleshooting - Resource allocation analysis</p>"},{"location":"reporter/dashboard-guide/#4-health-dashboard","title":"4. \u2764\ufe0f Health Dashboard","text":"<p>Purpose: Resource health monitoring and issue tracking</p> <p>Key Features: - Health ratio calculations - Health trends over time (if historical data available) - Resources with issues tables - Health distribution charts</p> <p>Use Cases: - Operational monitoring - Issue identification - Health trend analysis</p>"},{"location":"reporter/dashboard-guide/#5-relationship-analysis","title":"5. \ud83d\udd17 Relationship Analysis","text":"<p>Purpose: Resource dependency mapping and relationship visualization</p> <p>Key Features: - Relationship types distribution - Source-target matrix visualization - Searchable relationships table - Network graph visualization</p> <p>Use Cases: - Architecture understanding - Impact analysis - Dependency mapping</p>"},{"location":"reporter/dashboard-guide/#6-namespace-components","title":"6. \ud83c\udfd7\ufe0f Namespace Components","text":"<p>Purpose: Detailed component analysis within namespaces</p> <p>Key Features: - Component distribution charts - Relationship network graphs - Critical and orphaned components identification - Dependency chain analysis</p> <p>Use Cases: - Microservices architecture analysis - Component health assessment - Dependency troubleshooting</p>"},{"location":"reporter/dashboard-guide/#7-resource-efficiency","title":"7. \u26a1 Resource Efficiency","text":"<p>Purpose: Pod resource optimization and efficiency analysis</p> <p>Key Features: - Resource coverage percentage - Pods without requests/limits identification - Severity classification (critical, high, medium, low) - Detailed remediation recommendations</p> <p>Use Cases: - Resource optimization - Cost management - Performance tuning</p>"},{"location":"reporter/dashboard-guide/#8-storage-analysis","title":"8. \ud83d\udcbe Storage Analysis","text":"<p>Purpose: Storage consumption and volume management</p> <p>Key Features: - Total capacity and utilization metrics - Storage class distribution - Volume status analysis - Per-namespace storage breakdown</p> <p>Use Cases: - Capacity planning - Storage optimization - Cost allocation</p>"},{"location":"reporter/dashboard-guide/#9-temporal-analysis","title":"9. \u23f0 Temporal Analysis","text":"<p>Purpose: Resource lifecycle and creation pattern analysis</p> <p>Key Features: - Resource creation timeline - Age distribution analysis - Creation patterns by day of week - Stale resource identification</p> <p>Use Cases: - Lifecycle management - Cleanup planning - Growth analysis</p>"},{"location":"reporter/dashboard-guide/#10-label-analysis-new-in-v079","title":"10. \ud83c\udff7\ufe0f Label Analysis (New in v0.7.9)","text":"<p>Purpose: Comprehensive labeling governance and quality assessment</p> <p>Key Features: - Label coverage metrics and quality scoring - Common labels identification - Multi-label resource analysis - Orphaned resource detection</p> <p>Use Cases: - Labeling governance - Compliance assessments - Resource organization</p>"},{"location":"reporter/dashboard-guide/#11-application-view-new-in-v079","title":"11. \ud83d\ude80 Application View (New in v0.7.9)","text":"<p>Purpose: Application-centric cluster analysis using Kubernetes labels</p> <p>Key Features: - Automatic application discovery - Application health and resource breakdowns - Orphaned resource identification - Labeling recommendations - Detailed per-application analysis</p> <p>Use Cases: - Application portfolio management - Resource governance - Development team reporting</p>"},{"location":"reporter/dashboard-guide/#advanced-features","title":"Advanced Features","text":""},{"location":"reporter/dashboard-guide/#interactive-visualizations","title":"Interactive Visualizations","text":"<ul> <li>Hover Tooltips: Detailed information on chart hover</li> <li>Clickable Legends: Toggle data series visibility</li> <li>Zoom and Pan: Navigate large datasets easily</li> <li>Responsive Design: Works on desktop, tablet, and mobile</li> </ul>"},{"location":"reporter/dashboard-guide/#export-capabilities","title":"Export Capabilities","text":"<ul> <li>JSON Reports: Complete analysis data export</li> <li>CSV Data: Tabular data for spreadsheet analysis</li> <li>Filtered Exports: Export only filtered/selected data</li> <li>Application Reports: Specialized reports for governance</li> </ul>"},{"location":"reporter/dashboard-guide/#search-and-filtering","title":"Search and Filtering","text":"<ul> <li>Global Search: Find resources across all views</li> <li>Multi-level Filtering: Combine namespace, type, and health filters</li> <li>Real-time Updates: Filters apply instantly</li> <li>Persistent Filters: Maintain filters across view changes</li> </ul>"},{"location":"reporter/dashboard-guide/#configuration-options","title":"Configuration Options","text":""},{"location":"reporter/dashboard-guide/#environment-variables","title":"Environment Variables","text":"<pre><code># Pre-load database\nexport K8S_REPORTER_DATABASE=\"/path/to/cluster.db\"\n\n# Custom port and host\nexport STREAMLIT_SERVER_PORT=\"8501\"\nexport STREAMLIT_SERVER_ADDRESS=\"localhost\"\n</code></pre>"},{"location":"reporter/dashboard-guide/#cli-options","title":"CLI Options","text":"<pre><code>k8s-reporter --help\n\nOptions:\n  --port         Port to run the app (default: 8501)\n  --host         Host to bind the app (default: localhost)\n  --database     Path to SQLite database file\n  --headless     Run without opening browser\n  --debug        Enable debug logging\n</code></pre>"},{"location":"reporter/dashboard-guide/#best-practices","title":"Best Practices","text":""},{"location":"reporter/dashboard-guide/#daily-operations","title":"Daily Operations","text":"<ol> <li>Start with Overview: Begin with Cluster Overview for high-level health</li> <li>Check Health Dashboard: Identify any immediate issues</li> <li>Review Security: Regular security posture assessments</li> <li>Monitor Efficiency: Weekly resource efficiency reviews</li> </ol>"},{"location":"reporter/dashboard-guide/#weekly-reviews","title":"Weekly Reviews","text":"<ol> <li>Temporal Analysis: Review resource creation patterns</li> <li>Storage Analysis: Monitor capacity and growth trends</li> <li>Label Analysis: Assess labeling governance</li> <li>Application View: Review application portfolio health</li> </ol>"},{"location":"reporter/dashboard-guide/#monthly-assessments","title":"Monthly Assessments","text":"<ol> <li>Comprehensive Security Review: Deep dive into security analysis</li> <li>Resource Optimization: Identify optimization opportunities</li> <li>Relationship Analysis: Review architecture and dependencies</li> <li>Export Reports: Generate monthly governance reports</li> </ol>"},{"location":"reporter/dashboard-guide/#troubleshooting","title":"Troubleshooting","text":""},{"location":"reporter/dashboard-guide/#common-issues","title":"Common Issues","text":""},{"location":"reporter/dashboard-guide/#dashboard-wont-load","title":"Dashboard Won't Load","text":"<pre><code># Check if port is available\nnetstat -an | grep 8501\n\n# Use different port\nk8s-reporter --port 8080\n</code></pre>"},{"location":"reporter/dashboard-guide/#database-upload-fails","title":"Database Upload Fails","text":"<pre><code># Verify database file\nsqlite3 cluster.db \".tables\"\n\n# Check file permissions\nls -la cluster.db\n</code></pre>"},{"location":"reporter/dashboard-guide/#performance-issues","title":"Performance Issues","text":"<pre><code># Enable debug mode\nk8s-reporter --debug\n\n# Use smaller dataset for testing\nk8s-analyzer export-directory-sqlite ./small-test cluster-test.db\n</code></pre>"},{"location":"reporter/dashboard-guide/#chart-rendering-problems","title":"Chart Rendering Problems","text":"<ul> <li>Clear browser cache</li> <li>Try different browser</li> <li>Check browser console for JavaScript errors</li> <li>Ensure latest Plotly version</li> </ul>"},{"location":"reporter/dashboard-guide/#getting-help","title":"Getting Help","text":"<ul> <li>Documentation: Check the complete documentation</li> <li>GitHub Issues: Report bugs and feature requests</li> <li>Community: Join discussions and get support</li> <li>Examples: Review example usage and configurations</li> </ul>"},{"location":"reporter/dashboard-guide/#tips-for-effective-analysis","title":"Tips for Effective Analysis","text":""},{"location":"reporter/dashboard-guide/#navigation-efficiency","title":"Navigation Efficiency","text":"<ul> <li>Use browser bookmarks for frequently accessed views</li> <li>Leverage browser back/forward for quick navigation</li> <li>Keep multiple browser tabs open for comparison</li> </ul>"},{"location":"reporter/dashboard-guide/#data-interpretation","title":"Data Interpretation","text":"<ul> <li>Focus on trends rather than absolute numbers</li> <li>Use filtering to isolate specific issues</li> <li>Compare data across different time periods</li> <li>Export data for detailed offline analysis</li> </ul>"},{"location":"reporter/dashboard-guide/#reporting","title":"Reporting","text":"<ul> <li>Use screenshots for visual reports</li> <li>Export filtered data for stakeholder sharing</li> <li>Create regular reporting schedules</li> <li>Combine multiple views for comprehensive analysis</li> </ul> <p>This guide provides everything you need to effectively use the k8s-reporter dashboard for comprehensive Kubernetes cluster analysis and governance.</p>"},{"location":"reporter/examples/","title":"\ud83e\udde9 k8s-reporter Examples","text":"<p>This document covers various example scenarios demonstrating how to effectively utilize k8s-reporter for monitoring and reporting on Kubernetes clusters.</p>"},{"location":"reporter/examples/#quick-start-examples","title":"Quick Start Examples","text":""},{"location":"reporter/examples/#basic-dashboard-setup","title":"Basic Dashboard Setup","text":"<pre><code># Start k8s-reporter using default configuration\nk8s-reporter start --config ./configs/default-reporter-config.yaml\n</code></pre>"},{"location":"reporter/examples/#custom-port-configuration","title":"Custom Port Configuration","text":"<pre><code>server:\n  port: 9090 # Change to your desired port\n\n# Start with custom port\nk8s-reporter start --config ./configs/custom-port-config.yaml\n</code></pre>"},{"location":"reporter/examples/#enabling-tls","title":"Enabling TLS","text":"<p>To secure the dashboard with TLS, edit your configuration as follows:</p> <pre><code>server:\n  tls:\n    enabled: true\n    cert_file: \"/path/to/cert.pem\"\n    key_file: \"/path/to/key.pem\"\n</code></pre> <p>Start the dashboard:</p> <pre><code>k8s-reporter start --config ./configs/tls-config.yaml\n</code></pre>"},{"location":"reporter/examples/#real-world-scenarios","title":"Real-World Scenarios","text":""},{"location":"reporter/examples/#multi-cluster-management","title":"Multi-cluster Management","text":"<p>Manage views from different clusters using context switching:</p> <pre><code># Configure multiple contexts\nkubectl config use-context development\nk8s-reporter start --config ./configs/dev-cluster-config.yaml\n\nkubectl config use-context production\nk8s-reporter start --config ./configs/prod-cluster-config.yaml\n</code></pre>"},{"location":"reporter/examples/#security-compliance-dashboard","title":"Security Compliance Dashboard","text":"<p>Monitor security settings and compliance:</p> <pre><code>alerts:\n  enabled: true\n  rules:\n    - name: \"compliance_violation\"\n      condition: \"is_compliant == false\"\n      severity: \"critical\"\n      channels:\n        - type: \"email\"\n          config:\n            to: [\"security-team@yourcompany.com\"]\n</code></pre>"},{"location":"reporter/examples/#historical-data-analysis","title":"Historical Data Analysis","text":"<p>Enable persistence for long-term analysis:</p> <pre><code>performance:\n  database:\n    type: \"sqlite\"\n    connection_string: \"./data/history.db\"\n    max_connections: 20\n</code></pre>"},{"location":"reporter/examples/#cicd-integration","title":"CI/CD Integration","text":""},{"location":"reporter/examples/#github-actions-example","title":"GitHub Actions Example","text":"<p>Automate reporting with a GitHub Actions workflow:</p> <pre><code>name: k8s-report\n\non:\n  schedule:\n    - cron: \"0 0 * * 0\" # Weekly report\n\njobs:\n  report:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Setup k8s-reporter\n        run: |\n          curl -LO https://github.com/your-org/k8s-reporter/releases/latest/download/k8s-reporter-linux\n          chmod +x k8s-reporter-linux\n          sudo mv k8s-reporter-linux /usr/local/bin/k8s-reporter\n      - name: Generate report\n        run: |\n          k8s-reporter generate --format html --output weekly-report.html\n      - name: Upload report\n        uses: actions/upload-artifact@v2\n        with:\n          name: weekly-report\n          path: weekly-report.html\n</code></pre>"},{"location":"reporter/examples/#jenkins-pipeline-example","title":"Jenkins Pipeline Example","text":"<pre><code>pipeline {\n    agent any\n    stages {\n        stage('Setup') {\n            steps {\n                sh 'curl -LO https://github.com/your-org/k8s-reporter/releases/latest/download/k8s-reporter-linux'\n                sh 'chmod +x k8s-reporter-linux'\n                sh 'sudo mv k8s-reporter-linux /usr/local/bin/k8s-reporter'\n            }\n        }\n        stage('Report') {\n            steps {\n                sh 'k8s-reporter generate --format html --output jenkins-report.html'\n                archiveArtifacts artifacts: 'jenkins-report.html'\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"reporter/examples/#advanced-use-cases","title":"Advanced Use Cases","text":""},{"location":"reporter/examples/#configuring-dynamic-dashboards","title":"Configuring Dynamic Dashboards","text":"<p>Define dynamic dashboards using environment-specific settings:</p> <pre><code>environment:\n  variables:\n    - name: \"ENV_NAME\"\n      value: \"staging\"\n\ndashboard:\n  title: \"Dashboard - ${ENV_NAME}\"\n  theme: \"dark\"\n</code></pre>"},{"location":"reporter/examples/#building-custom-reports","title":"Building Custom Reports","text":"<p>Create personalized report layouts:</p> <pre><code>reports:\n  templates:\n    - name: \"custom_operations_report\"\n      sections:\n        - resource_summary\n        - performance_insights\n        - custom_script_output\n</code></pre>"},{"location":"reporter/examples/#conclusion","title":"Conclusion","text":"<p>These examples are designed to illustrate the versatility of k8s-reporter in various contexts. For further information, please explore the official documentation or join the community discussions.</p>"},{"location":"reporter/overview/","title":"\ud83c\udfa8 k8s-reporter Overview","text":"<p>The <code>k8s-reporter</code> is an interactive web dashboard built with Streamlit that provides comprehensive visualization and analysis of Kubernetes cluster data exported by <code>k8s-analyzer</code>. It offers multiple specialized views for different aspects of cluster analysis.</p>"},{"location":"reporter/overview/#key-features","title":"Key Features","text":"<ul> <li>Interactive Web Dashboard: Built with Streamlit for modern, responsive user experience</li> <li>Multiple Analysis Views: 10+ specialized dashboards for different analysis types</li> <li>Real-time Filtering: Dynamic data exploration with namespace, resource type, and health filters</li> <li>Advanced Visualizations: Plotly charts, network graphs, and interactive tables</li> <li>Label-based Analysis: Comprehensive labeling governance and application discovery</li> <li>Export Capabilities: Download reports and analysis data in various formats</li> <li>Database Integration: Seamless integration with k8s-analyzer SQLite databases</li> </ul>"},{"location":"reporter/overview/#architecture","title":"Architecture","text":"<pre><code>graph TB\n    WEB[Web Browser] --&gt; STREAMLIT[Streamlit Frontend]\n    STREAMLIT --&gt; DATABASE[Database Client]\n    DATABASE --&gt; SQLITE[SQLite Database]\n    STREAMLIT --&gt; VIEWS[Analysis Views]\n    VIEWS --&gt; CHARTS[Plotly Charts]\n    VIEWS --&gt; TABLES[Data Tables]\n    VIEWS --&gt; FILTERS[Dynamic Filters]</code></pre>"},{"location":"reporter/overview/#analysis-views","title":"Analysis Views","text":""},{"location":"reporter/overview/#cluster-overview","title":"\ud83d\udcca Cluster Overview","text":"<ul> <li>High-level cluster health and resource distribution</li> <li>Resource type breakdown with pie charts</li> <li>Top namespaces ranking</li> <li>Health ratio monitoring</li> <li>Issues summary dashboard</li> </ul>"},{"location":"reporter/overview/#security-analysis","title":"\ud83d\udd12 Security Analysis","text":"<ul> <li>RBAC analysis and service account insights</li> <li>Pod security context evaluation</li> <li>Privileged containers detection</li> <li>Security recommendations</li> <li>ConfigMaps and Secrets overview</li> </ul>"},{"location":"reporter/overview/#namespace-analysis","title":"\ud83c\udff7\ufe0f Namespace Analysis","text":"<ul> <li>Per-namespace resource breakdown</li> <li>Resource distribution within namespaces</li> <li>Health status per namespace</li> <li>Top resources identification</li> <li>Component relationship mapping</li> </ul>"},{"location":"reporter/overview/#health-dashboard","title":"\u2764\ufe0f Health Dashboard","text":"<ul> <li>Real-time health monitoring</li> <li>Health trends over time</li> <li>Issue identification and tracking</li> <li>Resource health distribution</li> <li>Health ratio tracking</li> </ul>"},{"location":"reporter/overview/#relationship-analysis","title":"\ud83d\udd17 Relationship Analysis","text":"<ul> <li>Resource dependency mapping</li> <li>Relationship type distribution</li> <li>Interactive relationship matrix</li> <li>Search and filter capabilities</li> <li>Network graph visualization</li> </ul>"},{"location":"reporter/overview/#resource-efficiency","title":"\u26a1 Resource Efficiency","text":"<ul> <li>Pod resource optimization analysis</li> <li>Detection of pods without resource requests/limits</li> <li>Severity classification (critical, high, medium, low)</li> <li>Resource coverage metrics</li> <li>Automated recommendations</li> </ul>"},{"location":"reporter/overview/#storage-analysis","title":"\ud83d\udcbe Storage Analysis","text":"<ul> <li>Global storage consumption tracking</li> <li>Per-namespace storage breakdown</li> <li>Storage class analytics</li> <li>Volume status tracking (bound, available, pending)</li> <li>Access pattern analysis</li> </ul>"},{"location":"reporter/overview/#temporal-analysis","title":"\u23f0 Temporal Analysis","text":"<ul> <li>Resource lifecycle tracking</li> <li>Creation timeline and age-based categorization</li> <li>Temporal patterns over time</li> <li>Age distribution analysis</li> <li>Most active namespaces</li> </ul>"},{"location":"reporter/overview/#label-analysis","title":"\ud83c\udff7\ufe0f Label Analysis","text":"<ul> <li>Comprehensive label coverage analysis with quality scoring</li> <li>Common labels identification and usage patterns</li> <li>Multi-label resource analysis with statistical insights</li> <li>Orphaned resource detection without proper labels</li> <li>Label governance recommendations</li> <li>Interactive label filtering and search capabilities</li> </ul>"},{"location":"reporter/overview/#application-view","title":"\ud83d\ude80 Application View","text":"<ul> <li>Automatic application discovery using standard Kubernetes labels</li> <li>Application health status and resource breakdowns</li> <li>Component identification and relationships within applications</li> <li>Orphaned resource identification and labeling recommendations</li> <li>Detailed per-application resource inventory and analysis</li> <li>Export functionality for governance reports</li> </ul>"},{"location":"reporter/overview/#getting-started","title":"Getting Started","text":""},{"location":"reporter/overview/#launch-the-dashboard","title":"Launch the Dashboard","text":"<pre><code># Launch with a specific database\nk8s-reporter --database cluster-analysis.db\n\n# Launch on custom port\nk8s-reporter --port 8080\n\n# Launch for remote access\nk8s-reporter --host 0.0.0.0 --port 8080\n</code></pre>"},{"location":"reporter/overview/#upload-database-via-web-ui","title":"Upload Database via Web UI","text":"<ol> <li>Launch k8s-reporter without specifying a database</li> <li>Use the file uploader in the sidebar</li> <li>Upload your <code>.db</code> file generated by k8s-analyzer</li> </ol>"},{"location":"reporter/overview/#navigation-and-filtering","title":"Navigation and Filtering","text":"<ul> <li>View Selection: Choose from 8+ analysis views in the sidebar</li> <li>Namespace Filter: Filter data by specific namespaces</li> <li>Resource Type Filter: Focus on specific Kubernetes resource types</li> <li>Health Status Filter: Show only healthy, warning, or error resources</li> <li>Search: Find specific resources by name or type</li> </ul>"},{"location":"reporter/overview/#advanced-features","title":"Advanced Features","text":""},{"location":"reporter/overview/#interactive-visualizations","title":"Interactive Visualizations","text":"<ul> <li>Hover Tooltips: Detailed information on chart elements</li> <li>Clickable Legends: Toggle data series on/off</li> <li>Responsive Design: Optimized for desktop, tablet, and mobile</li> <li>Real-time Updates: Refresh data without page reload</li> </ul>"},{"location":"reporter/overview/#data-export","title":"Data Export","text":"<pre><code># Export filtered data to CSV\n# Available through the web interface in each view\n</code></pre>"},{"location":"reporter/overview/#custom-configuration","title":"Custom Configuration","text":"<pre><code># Environment variables\nexport K8S_REPORTER_DATABASE=\"/path/to/cluster.db\"\nexport STREAMLIT_SERVER_PORT=\"8501\"\nexport STREAMLIT_SERVER_ADDRESS=\"localhost\"\n\n# CLI options\nk8s-reporter --help\n\nOptions:\n  --port         Port to run the app (default: 8501)\n  --host         Host to bind the app (default: localhost)\n  --database     Path to SQLite database file\n  --headless     Run without opening browser\n  --debug        Enable debug logging\n</code></pre>"},{"location":"reporter/overview/#use-cases","title":"Use Cases","text":""},{"location":"reporter/overview/#operations-teams","title":"Operations Teams","text":"<ul> <li>Daily Health Checks: Monitor cluster health with the overview dashboard</li> <li>Incident Response: Quickly identify problematic resources using health filters</li> <li>Capacity Planning: Analyze storage consumption and resource efficiency</li> </ul>"},{"location":"reporter/overview/#security-teams","title":"Security Teams","text":"<ul> <li>Security Audits: Use the security analysis view for RBAC and pod security assessment</li> <li>Compliance Reporting: Generate security posture reports</li> <li>Vulnerability Assessment: Identify containers without proper security configurations</li> </ul>"},{"location":"reporter/overview/#platform-engineers","title":"Platform Engineers","text":"<ul> <li>Resource Optimization: Identify over/under-provisioned resources</li> <li>Cost Management: Analyze storage and compute efficiency</li> <li>Architecture Review: Understand resource relationships and dependencies</li> </ul>"},{"location":"reporter/overview/#devops-engineers","title":"DevOps Engineers","text":"<ul> <li>Deployment Validation: Ensure proper resource configurations</li> <li>Multi-cluster Comparison: Compare configurations across environments</li> <li>Change Impact Assessment: Analyze before/after cluster states</li> </ul>"},{"location":"reporter/overview/#integration","title":"Integration","text":""},{"location":"reporter/overview/#with-k8s-analyzer","title":"With k8s-analyzer","text":"<pre><code># Generate database with k8s-analyzer\nk8s-analyzer sqlite cluster-export.json --output cluster.db\n\n# Analyze with k8s-reporter\nk8s-reporter --database cluster.db\n</code></pre>"},{"location":"reporter/overview/#cicd-integration","title":"CI/CD Integration","text":"<pre><code># Automated reporting in pipelines\nk8s-reporter --database cluster.db --headless --host 0.0.0.0\n</code></pre>"},{"location":"reporter/overview/#docker-deployment","title":"Docker Deployment","text":"<pre><code>FROM python:3.11-slim\n\n# Install k8s-reporter\nCOPY k8s-reporter /app/k8s-reporter\nWORKDIR /app/k8s-reporter\nRUN pip install -e .\n\n# Expose port\nEXPOSE 8501\n\n# Run the application\nCMD [\"k8s-reporter\", \"--host\", \"0.0.0.0\", \"--port\", \"8501\"]\n</code></pre>"},{"location":"reporter/overview/#development","title":"Development","text":""},{"location":"reporter/overview/#local-development","title":"Local Development","text":"<pre><code># Clone and setup\ngit clone https://github.com/k8s-tools/k8s-reporter.git\ncd k8s-reporter\n\n# Install dependencies\nuv sync --all-extras\n\n# Run in development mode\nuv run streamlit run src/k8s_reporter/app.py\n\n# Run tests\nuv run pytest\n\n# Code formatting\nuv run black src tests\nuv run isort src tests\n</code></pre>"},{"location":"reporter/overview/#adding-new-views","title":"Adding New Views","text":"<ol> <li>Create a new view module in <code>src/k8s_reporter/views/</code></li> <li>Implement the view function following the established pattern</li> <li>Add the view to the <code>ANALYSIS_VIEWS</code> configuration</li> <li>Update the navigation and documentation</li> </ol>"},{"location":"reporter/overview/#custom-visualizations","title":"Custom Visualizations","text":"<pre><code>import plotly.express as px\nimport streamlit as st\n\ndef create_custom_chart(data):\n    \"\"\"Create a custom Plotly chart.\"\"\"\n    fig = px.bar(data, x='category', y='value', title='Custom Analysis')\n    st.plotly_chart(fig, use_container_width=True)\n</code></pre>"},{"location":"reporter/overview/#performance-optimization","title":"Performance Optimization","text":""},{"location":"reporter/overview/#for-large-datasets","title":"For Large Datasets","text":"<ul> <li>Use pagination for large tables</li> <li>Implement lazy loading for expensive queries</li> <li>Cache expensive computations using Streamlit's <code>@st.cache_data</code></li> </ul>"},{"location":"reporter/overview/#database-optimization","title":"Database Optimization","text":"<ul> <li>Ensure proper SQLite indexes</li> <li>Use efficient queries with appropriate WHERE clauses</li> <li>Implement connection pooling for high-traffic scenarios</li> </ul>"},{"location":"reporter/overview/#troubleshooting","title":"Troubleshooting","text":""},{"location":"reporter/overview/#common-issues","title":"Common Issues","text":""},{"location":"reporter/overview/#port-already-in-use","title":"Port Already in Use","text":"<pre><code># Check what's using the port\nnetstat -an | grep 8501\n\n# Use a different port\nk8s-reporter --port 8080\n</code></pre>"},{"location":"reporter/overview/#database-connection-issues","title":"Database Connection Issues","text":"<pre><code># Verify database file exists and is readable\nls -la cluster.db\nsqlite3 cluster.db \".tables\"\n\n# Check file permissions\nchmod 644 cluster.db\n</code></pre>"},{"location":"reporter/overview/#performance-issues","title":"Performance Issues","text":"<pre><code># Enable debug mode for detailed logging\nk8s-reporter --debug\n\n# Use a smaller dataset for testing\nk8s-analyzer sqlite small-cluster.json --output test.db\n</code></pre>"},{"location":"reporter/overview/#future-enhancements","title":"Future Enhancements","text":""},{"location":"reporter/overview/#planned-features","title":"Planned Features","text":"<ul> <li>Custom Dashboards: User-defined dashboard creation</li> <li>Real-time Monitoring: Live cluster connection</li> <li>Multi-cluster Support: Compare multiple clusters</li> <li>Alert Integration: Integration with monitoring systems</li> <li>PDF Reports: Automated report generation</li> </ul>"},{"location":"reporter/overview/#roadmap","title":"Roadmap","text":"<ul> <li>v1.0: Enhanced visualizations and export capabilities</li> <li>v1.1: Real-time cluster monitoring</li> <li>v1.2: Multi-cluster comparison features</li> <li>v2.0: Advanced analytics and machine learning insights</li> </ul>"},{"location":"reporter/overview/#support-and-contributing","title":"Support and Contributing","text":"<ul> <li>Issues: Report bugs and feature requests on GitHub Issues</li> <li>Discussions: Join the community on GitHub Discussions</li> <li>Contributing: See the development guide for contribution guidelines</li> <li>Documentation: Help improve documentation and examples</li> </ul>"}]}