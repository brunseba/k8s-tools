name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write
  packages: write
  issues: read
  pull-requests: read

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - directory: 'k8s-analyzer'
            python-version: '3.11'
          - directory: 'k8s-analyzer'
            python-version: '3.12'
          - directory: 'k8s-reporter'
            python-version: '3.9'
          - directory: 'k8s-reporter'
            python-version: '3.10'
          - directory: 'k8s-reporter'
            python-version: '3.11'
          - directory: 'k8s-reporter'
            python-version: '3.12'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install hatch
      run: |
        python -m pip install --upgrade pip
        pip install hatch

    - name: Install dependencies
      run: |
        cd ${{ matrix.directory }}
        if [ "${{ matrix.directory }}" = "k8s-analyzer" ]; then
          python -m pip install -e .[test]
        else
          python -m pip install -e .[dev]
        fi
        python -m pip install cyclonedx-bom

    - name: Run tests with coverage
      run: |
        cd ${{ matrix.directory }}
        if [ "${{ matrix.directory }}" = "k8s-analyzer" ]; then
          python -m pytest --junitxml=test-results.xml --cov=src/k8s_analyzer --cov-report=xml --cov-report=term-missing
        else
          python -m pytest --junitxml=test-results.xml --cov=src/k8s_reporter --cov-report=xml --cov-report=term-missing
        fi

    - name: Generate SBOM
      run: |
        cd ${{ matrix.directory }}
        cyclonedx-py environment -o sbom.json

    - name: Build wheel and sdist
      run: |
        cd ${{ matrix.directory }}
        hatch build

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.directory }}-py${{ matrix.python-version }}
        path: ${{ matrix.directory }}/test-results.xml
        if-no-files-found: ignore

    - name: Upload coverage reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-${{ matrix.directory }}-py${{ matrix.python-version }}
        path: ${{ matrix.directory }}/coverage.xml
        if-no-files-found: ignore

    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      with:
        name: sbom-${{ matrix.directory }}-py${{ matrix.python-version }}
        path: ${{ matrix.directory }}/sbom.json
        if-no-files-found: ignore

    - name: Upload built packages
      uses: actions/upload-artifact@v4
      with:
        name: packages-${{ matrix.directory }}-py${{ matrix.python-version }}
        path: ${{ matrix.directory }}/dist/*
        if-no-files-found: ignore

  publish:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    strategy:
      matrix:
        directory: ['k8s-analyzer', 'k8s-reporter']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install hatch
      run: |
        python -m pip install --upgrade pip
        pip install hatch

    - name: Build packages
      run: |
        cd ${{ matrix.directory }}
        hatch build

    - name: Get package version
      id: get_version
      run: |
        cd ${{ matrix.directory }}
        pip install toml
        VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "package_name=${{ matrix.directory }}" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: "${{ steps.get_version.outputs.package_name }}-v${{ steps.get_version.outputs.version }}"
        name: "${{ steps.get_version.outputs.package_name }} v${{ steps.get_version.outputs.version }}"
        files: |
          ${{ matrix.directory }}/dist/*.whl
          ${{ matrix.directory }}/dist/*.tar.gz
          ${{ matrix.directory }}/sbom.json
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload packages as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-packages-${{ steps.get_version.outputs.package_name }}-v${{ steps.get_version.outputs.version }}
        path: |
          ${{ matrix.directory }}/dist/*.whl
          ${{ matrix.directory }}/dist/*.tar.gz
          ${{ matrix.directory }}/sbom.json
        retention-days: 90

