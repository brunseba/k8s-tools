"""
Main Streamlit application for k8s-reporter.

This module provides the web UI for analyzing Kubernetes cluster data
from k8s-analyzer SQLite databases.
"""

import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
import pandas as pd
from datetime import datetime
from pathlib import Path
from typing import Optional

from k8s_reporter.database import DatabaseClient
from k8s_reporter.models import ANALYSIS_VIEWS
from k8s_reporter.views import (
    render_overview,
    render_security_analysis,
    render_namespace_analysis,
    render_health_dashboard,
    render_relationships_view,
    render_namespace_components_view,
    render_storage_analysis,
    render_temporal_analysis,
    render_resource_efficiency,
)


def configure_page():
    """Configure the Streamlit page."""
    st.set_page_config(
        page_title="K8s Reporter",
        page_icon="🚀",
        layout="wide",
        initial_sidebar_state="expanded",
        menu_items={
            'Get Help': 'https://github.com/k8s-tools/k8s-reporter',
            'Report a bug': 'https://github.com/k8s-tools/k8s-reporter/issues',
            'About': """
            # K8s Reporter
            
            Web UI for analyzing Kubernetes cluster data from k8s-analyzer SQLite databases.
            
            **Features:**
            - Cluster overview and health monitoring
            - Security analysis and RBAC insights
            - Resource efficiency analysis
            - Namespace-level breakdowns
            - Interactive visualizations
            
            Built with ❤️ using Streamlit and Plotly.
            """
        }
    )


def load_database() -> Optional[DatabaseClient]:
    """Load database from user selection."""
    st.sidebar.header("📊 Database Selection")
    
    # Option 1: File uploader
    uploaded_file = st.sidebar.file_uploader(
        "Upload SQLite database",
        type=['db', 'sqlite', 'sqlite3'],
        help="Upload a database file generated by k8s-analyzer"
    )
    
    if uploaded_file:
        # Save uploaded file temporarily
        temp_path = Path(f"/tmp/{uploaded_file.name}")
        with open(temp_path, "wb") as f:
            f.write(uploaded_file.read())
        
        try:
            return DatabaseClient(str(temp_path))
        except Exception as e:
            st.sidebar.error(f"Error loading database: {e}")
            return None
    
    # Option 2: Manual path input
    st.sidebar.subheader("Or enter database path:")
    db_path = st.sidebar.text_input(
        "Database path",
        placeholder="/path/to/cluster.db",
        help="Enter the full path to your SQLite database file"
    )
    
    if db_path and Path(db_path).exists():
        try:
            return DatabaseClient(db_path)
        except Exception as e:
            st.sidebar.error(f"Error loading database: {e}")
            return None
    elif db_path:
        st.sidebar.error("Database file not found")
    
    return None


def render_sidebar(db_client: DatabaseClient) -> dict:
    """Render sidebar with navigation and filters."""
    st.sidebar.header("🧭 Navigation")
    
    # View selection
    view_options = {view.get_title(): key for key, view in ANALYSIS_VIEWS.items()}
    selected_view_title = st.sidebar.selectbox(
        "Select Analysis View",
        options=list(view_options.keys()),
        index=0
    )
    selected_view = view_options[selected_view_title]
    
    # Filters section
    st.sidebar.header("🔍 Filters")
    
    filters = {}
    
    # Namespace filter
    if ANALYSIS_VIEWS[selected_view].config.requires_namespace_filter:
        namespaces = ['All'] + db_client.get_namespaces()
        selected_namespace = st.sidebar.selectbox("Namespace", namespaces)
        if selected_namespace != 'All':
            filters['namespace'] = selected_namespace
    
    # Resource kind filter
    resource_kinds = ['All'] + db_client.get_resource_kinds()
    selected_kind = st.sidebar.selectbox("Resource Kind", resource_kinds)
    if selected_kind != 'All':
        filters['kind'] = selected_kind
    
    # Health status filter
    health_options = ['All', 'healthy', 'warning', 'error']
    selected_health = st.sidebar.selectbox("Health Status", health_options)
    if selected_health != 'All':
        filters['health_status'] = selected_health
    
    return {
        'view': selected_view,
        'filters': filters
    }


def render_database_summary(db_client: DatabaseClient):
    """Render quick database summary in sidebar."""
    st.sidebar.header("📈 Database Summary")
    
    try:
        summary = db_client.get_resource_summary()
        
        col1, col2 = st.sidebar.columns(2)
        with col1:
            st.metric("Resources", f"{summary.total_resources:,}")
            st.metric("Issues", summary.issues_count)
        with col2:
            st.metric("Relationships", f"{summary.total_relationships:,}")
            st.metric("Namespaces", summary.namespaces_count)
        
        # Health ratio
        total = sum(summary.health_distribution.values())
        healthy = summary.health_distribution.get('healthy', 0)
        health_ratio = (healthy / total * 100) if total > 0 else 0
        
        st.sidebar.metric(
            "Health Ratio",
            f"{health_ratio:.1f}%",
            delta=None,
            help="Percentage of healthy resources"
        )
        
    except Exception as e:
        st.sidebar.error(f"Error loading summary: {e}")


def main():
    """Main application function."""
    configure_page()
    
    # Main header
    st.title("🚀 K8s Reporter")
    st.markdown("""
    **Kubernetes Cluster Analysis Dashboard**
    
    Analyze and visualize your Kubernetes cluster data with interactive dashboards and insights.
    """)
    
    # Load database
    db_client = load_database()
    
    if not db_client:
        st.info("""
        👆 **Get Started**: Upload a database file or enter the path to a SQLite database 
        generated by k8s-analyzer in the sidebar.
        
        **Don't have a database yet?** Use k8s-analyzer to export your cluster data:
        ```bash
        # Export cluster data to SQLite
        k8s-analyzer export-directory-sqlite /path/to/manifests cluster.db
        
        # Or export multiple files
        k8s-analyzer export-multiple-sqlite file1.json file2.yaml -d cluster.db
        ```
        """)
        return
    
    # Render sidebar
    sidebar_config = render_sidebar(db_client)
    render_database_summary(db_client)
    
    # Main content area
    selected_view = sidebar_config['view']
    filters = sidebar_config['filters']
    
    # Render selected view
    try:
        if selected_view == 'overview':
            render_overview(db_client, filters)
        elif selected_view == 'security':
            render_security_analysis(db_client, filters)
        elif selected_view == 'namespaces':
            render_namespace_analysis(db_client, filters)
        elif selected_view == 'health':
            render_health_dashboard(db_client, filters)
        elif selected_view == 'relationships':
            render_relationships_view(db_client, filters)
        elif selected_view == 'namespace_components':
            render_namespace_components_view(db_client, filters)
        elif selected_view == 'storage':
            render_storage_analysis(db_client, filters)
        elif selected_view == 'temporal':
            render_temporal_analysis(db_client, filters)
        elif selected_view == 'efficiency':
            render_resource_efficiency(db_client, filters)
        elif selected_view == 'compliance':
            render_compliance_report(db_client, filters)
        elif selected_view == 'trends':
            render_trends_analysis(db_client, filters)
        else:
            st.error(f"View '{selected_view}' not implemented yet")
            st.info("This analysis view is coming soon! 🚧")
            
    except Exception as e:
        st.error(f"Error rendering view: {e}")
        st.exception(e)


def render_efficiency_analysis(db_client: DatabaseClient, filters: dict):
    """Render resource efficiency analysis (placeholder)."""
    st.header("⚡ Resource Efficiency Analysis")
    st.info("Resource efficiency analysis coming soon!")


def render_compliance_report(db_client: DatabaseClient, filters: dict):
    """Render compliance report (placeholder)."""
    st.header("✅ Compliance Report")
    st.info("Compliance reporting coming soon!")


def render_trends_analysis(db_client: DatabaseClient, filters: dict):
    """Render trends analysis (placeholder)."""
    st.header("📈 Trends Analysis")
    st.info("Trends analysis coming soon!")


if __name__ == "__main__":
    main()
