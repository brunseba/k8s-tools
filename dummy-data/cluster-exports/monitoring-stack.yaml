apiVersion: v1
kind: List
items:
- apiVersion: v1
  kind: Namespace
  metadata:
    name: monitoring
    labels:
      name: monitoring
    creationTimestamp: "2024-01-12T08:00:00Z"
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: prometheus
    namespace: monitoring
    labels:
      app: prometheus
      tier: monitoring
    creationTimestamp: "2024-01-12T09:00:00Z"
  spec:
    replicas: 2
    selector:
      matchLabels:
        app: prometheus
    template:
      metadata:
        labels:
          app: prometheus
          tier: monitoring
      spec:
        containers:
        - name: prometheus
          image: prom/prometheus:v2.40.0
          resources:
            limits:
              cpu: "2"
              memory: "4Gi"
            requests:
              cpu: "1"
              memory: "2Gi"
          ports:
          - containerPort: 9090
          args:
          - --config.file=/etc/prometheus/prometheus.yml
          - --storage.tsdb.path=/prometheus/
          - --web.console.libraries=/etc/prometheus/console_libraries
          - --web.console.templates=/etc/prometheus/consoles
          - --web.enable-lifecycle
          - --storage.tsdb.retention.time=30d
          volumeMounts:
          - name: prometheus-config-volume
            mountPath: /etc/prometheus/
          - name: prometheus-storage-volume
            mountPath: /prometheus/
        volumes:
        - name: prometheus-config-volume
          configMap:
            name: prometheus-config
        - name: prometheus-storage-volume
          persistentVolumeClaim:
            claimName: prometheus-pvc
- apiVersion: v1
  kind: Service
  metadata:
    name: prometheus-service
    namespace: monitoring
    creationTimestamp: "2024-01-12T09:05:00Z"
  spec:
    selector:
      app: prometheus
    ports:
    - protocol: TCP
      port: 9090
      targetPort: 9090
    type: ClusterIP
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: grafana
    namespace: monitoring
    labels:
      app: grafana
      tier: monitoring
    creationTimestamp: "2024-01-12T09:30:00Z"
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: grafana
    template:
      metadata:
        labels:
          app: grafana
          tier: monitoring
      spec:
        containers:
        - name: grafana
          image: grafana/grafana:9.2.0
          resources:
            limits:
              cpu: "1"
              memory: "2Gi"
            requests:
              cpu: "500m"
              memory: "1Gi"
          ports:
          - containerPort: 3000
          env:
          - name: GF_SECURITY_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                name: grafana-credentials
                key: admin-password
          - name: GF_DATABASE_TYPE
            value: "postgres"
          - name: GF_DATABASE_HOST
            value: "postgres-service:5432"
          - name: GF_DATABASE_NAME
            value: "grafana"
          - name: GF_DATABASE_USER
            valueFrom:
              secretKeyRef:
                name: grafana-credentials
                key: db-user
          - name: GF_DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: grafana-credentials
                key: db-password
          volumeMounts:
          - name: grafana-storage
            mountPath: /var/lib/grafana
        volumes:
        - name: grafana-storage
          persistentVolumeClaim:
            claimName: grafana-pvc
- apiVersion: v1
  kind: Service
  metadata:
    name: grafana-service
    namespace: monitoring
    creationTimestamp: "2024-01-12T09:35:00Z"
  spec:
    selector:
      app: grafana
    ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
    type: LoadBalancer
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: alertmanager
    namespace: monitoring
    labels:
      app: alertmanager
      tier: monitoring
    creationTimestamp: "2024-01-12T10:00:00Z"
  spec:
    replicas: 2
    selector:
      matchLabels:
        app: alertmanager
    template:
      metadata:
        labels:
          app: alertmanager
          tier: monitoring
      spec:
        containers:
        - name: alertmanager
          image: prom/alertmanager:v0.25.0
          resources:
            limits:
              cpu: "500m"
              memory: "1Gi"
            requests:
              cpu: "250m"
              memory: "512Mi"
          ports:
          - containerPort: 9093
          args:
          - --config.file=/etc/alertmanager/alertmanager.yml
          - --storage.path=/alertmanager
          - --web.external-url=http://alertmanager.example.com
          volumeMounts:
          - name: alertmanager-config-volume
            mountPath: /etc/alertmanager
          - name: alertmanager-storage-volume
            mountPath: /alertmanager
        volumes:
        - name: alertmanager-config-volume
          configMap:
            name: alertmanager-config
        - name: alertmanager-storage-volume
          persistentVolumeClaim:
            claimName: alertmanager-pvc
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    name: node-exporter
    namespace: monitoring
    labels:
      app: node-exporter
      tier: monitoring
    creationTimestamp: "2024-01-12T10:30:00Z"
  spec:
    selector:
      matchLabels:
        app: node-exporter
    template:
      metadata:
        labels:
          app: node-exporter
          tier: monitoring
      spec:
        hostNetwork: true
        hostPID: true
        containers:
        - name: node-exporter
          image: prom/node-exporter:v1.4.0
          resources:
            limits:
              cpu: "200m"
              memory: "200Mi"
            requests:
              cpu: "100m"
              memory: "100Mi"
          ports:
          - containerPort: 9100
            hostPort: 9100
          args:
          - --path.rootfs=/host
          volumeMounts:
          - name: proc
            mountPath: /host/proc
            readOnly: true
          - name: sys
            mountPath: /host/sys
            readOnly: true
          - name: root
            mountPath: /host
            readOnly: true
        volumes:
        - name: proc
          hostPath:
            path: /proc
        - name: sys
          hostPath:
            path: /sys
        - name: root
          hostPath:
            path: /
        tolerations:
        - key: node-role.kubernetes.io/master
          effect: NoSchedule
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: prometheus-pvc
    namespace: monitoring
    creationTimestamp: "2024-01-12T08:30:00Z"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Gi
    storageClassName: "fast-ssd"
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: grafana-pvc
    namespace: monitoring
    creationTimestamp: "2024-01-12T08:35:00Z"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 10Gi
    storageClassName: "standard"
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: alertmanager-pvc
    namespace: monitoring
    creationTimestamp: "2024-01-12T08:40:00Z"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 5Gi
    storageClassName: "standard"
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: prometheus-config
    namespace: monitoring
    creationTimestamp: "2024-01-12T08:45:00Z"
  data:
    prometheus.yml: |
      global:
        scrape_interval: 15s
        evaluation_interval: 15s
      
      alerting:
        alertmanagers:
        - static_configs:
          - targets:
            - alertmanager-service:9093
      
      rule_files:
      - "alerts.yml"
      
      scrape_configs:
      - job_name: 'prometheus'
        static_configs:
        - targets: ['localhost:9090']
      
      - job_name: 'node-exporter'
        kubernetes_sd_configs:
        - role: endpoints
        relabel_configs:
        - source_labels: [__meta_kubernetes_endpoints_name]
          regex: 'node-exporter'
          action: keep
      
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
        - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
        - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
          action: keep
          regex: default;kubernetes;https
- apiVersion: v1
  kind: Secret
  metadata:
    name: grafana-credentials
    namespace: monitoring
    creationTimestamp: "2024-01-12T08:20:00Z"
  type: Opaque
  data:
    admin-password: YWRtaW4xMjM=  # admin123
    db-user: Z3JhZmFuYQ==  # grafana
    db-password: Z3JhZmFuYXBhc3M=  # grafanapass
