apiVersion: v1
kind: List
items:
- apiVersion: v1
  kind: Namespace
  metadata:
    name: production
    labels:
      environment: production
    creationTimestamp: "2024-01-10T08:00:00Z"
- apiVersion: v1
  kind: Namespace
  metadata:
    name: monitoring
    labels:
      environment: production
    creationTimestamp: "2024-01-10T08:05:00Z"
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: web-frontend
    namespace: production
    labels:
      app: web-frontend
      tier: frontend
      environment: production
    creationTimestamp: "2024-01-10T09:00:00Z"
  spec:
    replicas: 5
    selector:
      matchLabels:
        app: web-frontend
    template:
      metadata:
        labels:
          app: web-frontend
          tier: frontend
      spec:
        containers:
        - name: nginx
          image: nginx:1.21
          resources:
            limits:
              cpu: "1"
              memory: "256Mi"
            requests:
              cpu: "500m"
              memory: "128Mi"
          ports:
          - containerPort: 80
          livenessProbe:
            httpGet:
              path: /health
              port: 80
            initialDelaySeconds: 30
            periodSeconds: 10
- apiVersion: v1
  kind: Service
  metadata:
    name: web-frontend-service
    namespace: production
    creationTimestamp: "2024-01-10T09:05:00Z"
  spec:
    selector:
      app: web-frontend
    ports:
    - protocol: TCP
      port: 80
      targetPort: 80
    type: LoadBalancer
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: api-backend
    namespace: production
    labels:
      app: api-backend
      tier: backend
      environment: production
    creationTimestamp: "2024-01-10T09:30:00Z"
  spec:
    replicas: 3
    selector:
      matchLabels:
        app: api-backend
    template:
      metadata:
        labels:
          app: api-backend
          tier: backend
      spec:
        containers:
        - name: api-server
          image: mycompany/api-server:v2.1.0
          resources:
            limits:
              cpu: "2"
              memory: "1Gi"
            requests:
              cpu: "1"
              memory: "512Mi"
          ports:
          - containerPort: 8080
          env:
          - name: DATABASE_URL
            valueFrom:
              secretKeyRef:
                name: database-credentials
                key: connection-string
          - name: REDIS_URL
            value: "redis://redis-service:6379"
          - name: LOG_LEVEL
            value: "info"
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 45
            periodSeconds: 15
- apiVersion: v1
  kind: Service
  metadata:
    name: api-backend-service
    namespace: production
    creationTimestamp: "2024-01-10T09:35:00Z"
  spec:
    selector:
      app: api-backend
    ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
    type: ClusterIP
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    name: redis
    namespace: production
    labels:
      app: redis
      tier: cache
    creationTimestamp: "2024-01-10T10:00:00Z"
  spec:
    replicas: 1
    serviceName: redis-service
    selector:
      matchLabels:
        app: redis
    template:
      metadata:
        labels:
          app: redis
          tier: cache
      spec:
        containers:
        - name: redis
          image: redis:6.2-alpine
          resources:
            limits:
              cpu: "1"
              memory: "512Mi"
            requests:
              cpu: "500m"
              memory: "256Mi"
          ports:
          - containerPort: 6379
          volumeMounts:
          - name: redis-storage
            mountPath: /data
    volumeClaimTemplates:
    - metadata:
        name: redis-storage
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 5Gi
- apiVersion: v1
  kind: Service
  metadata:
    name: redis-service
    namespace: production
    creationTimestamp: "2024-01-10T10:05:00Z"
  spec:
    selector:
      app: redis
    ports:
    - protocol: TCP
      port: 6379
      targetPort: 6379
    type: ClusterIP
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: worker-queue
    namespace: production
    labels:
      app: worker-queue
      tier: worker
    creationTimestamp: "2024-01-10T10:30:00Z"
  spec:
    replicas: 2
    selector:
      matchLabels:
        app: worker-queue
    template:
      metadata:
        labels:
          app: worker-queue
          tier: worker
      spec:
        containers:
        - name: worker
          image: mycompany/worker:v1.5.0
          resources:
            limits:
              cpu: "1"
              memory: "768Mi"
            requests:
              cpu: "500m"
              memory: "384Mi"
          env:
          - name: QUEUE_URL
            value: "redis://redis-service:6379"
          - name: WORKER_CONCURRENCY
            value: "4"
- apiVersion: v1
  kind: Secret
  metadata:
    name: database-credentials
    namespace: production
    creationTimestamp: "2024-01-10T08:30:00Z"
  type: Opaque
  data:
    connection-string: cG9zdGdyZXNxbDovL3VzZXI6cGFzc3dvcmRAZGItc2VydmVyOjU0MzIvbXlkYg==
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: app-config
    namespace: production
    creationTimestamp: "2024-01-10T08:45:00Z"
  data:
    max_connections: "1000"
    timeout_seconds: "30"
    feature_flags: "new_ui=true,analytics=true"
    cors_origins: "https://myapp.com,https://www.myapp.com"
- apiVersion: networking.k8s.io/v1
  kind: Ingress
  metadata:
    name: main-ingress
    namespace: production
    annotations:
      kubernetes.io/ingress.class: "nginx"
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
    creationTimestamp: "2024-01-10T11:00:00Z"
  spec:
    tls:
    - hosts:
      - myapp.com
      - www.myapp.com
      secretName: main-tls
    rules:
    - host: myapp.com
      http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: web-frontend-service
              port:
                number: 80
        - path: /api
          pathType: Prefix
          backend:
            service:
              name: api-backend-service
              port:
                number: 8080
